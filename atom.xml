<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ennis -Little Monster</title>
  
  <subtitle>ARTPOP = artistic revolution through the potential of pop.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-03T03:21:44.362Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ennis L.M. Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-26向量化</title>
    <link href="http://yoursite.com/2018/12/03/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-26%E5%90%91%E9%87%8F%E5%8C%96/"/>
    <id>http://yoursite.com/2018/12/03/笔记-深入拆解Java虚拟机-26向量化/</id>
    <published>2018-12-03T02:25:32.000Z</published>
    <updated>2018-12-03T03:21:44.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SIMD"><a href="#SIMD" class="headerlink" title="SIMD"></a>SIMD</h1><table><thead><tr><th>寄存器名称</th><th>所属指令集</th><th>位数</th><th>备注</th></tr></thead><tbody><tr><td>XMM 寄存器</td><td>SSE（Streaming SIMD Extensions）指令集</td><td>128 位</td></tr><tr><td>YMM 寄存器</td><td>AVX（Advanced Vector Extensions）指令集</td><td>256 位</td><td>XMM升级版</td></tr><tr><td>ZMM 寄存器</td><td>AVX512 指令集</td><td>512 位</td><td>YMM升级版</td></tr></tbody></table><p>原本使用 XMM 寄存器的指令，使用 YMM 寄存器的低 128 位。</p><p>支持 AVX512 指令集的 CPU 都比较贵，目前在生产环境中很少见到。</p><p>HotSpot 虚拟机更新了不少基于 AVX512 指令集以及 ZMM 寄存器的优化。</p><blockquote><p>单指令流多数据流（Single Instruction Multiple Data，SIMD）：即通过单条指令操控多组数据的计算操作。这些指令称之为 SIMD 指令。</p></blockquote><ul><li><p>SIMD 指令将上述寄存器中的<strong>值看成多个整数或者浮点数组成的向量</strong>，进行<strong>批量计算</strong>。</p><ul><li>128 位 XMM 寄存器里的值可以看成 16 个 byte 值组成的向量，或者 8 个 short 值组成的向量，4 个 int 值组成的向量，两个 long 值组成的向量。</li></ul></li><li><p>SIMD 指令PADDB、PADDW、PADDD以及PADDQ，将分别实现 byte 值、short 值、int 值或者 long 值的向量加法。</p></li><li><p>SIMD 指令也被看成 <strong>CPU 指令级别的并行</strong>。</p></li></ul><h1 id="使用-SIMD-指令的-HotSpot-Intrinsic"><a href="#使用-SIMD-指令的-HotSpot-Intrinsic" class="headerlink" title="使用 SIMD 指令的 HotSpot Intrinsic"></a>使用 SIMD 指令的 HotSpot Intrinsic</h1><ul><li><p>SIMD 指令虽然非常高效，但是<strong>使用很麻烦</strong>。</p></li><li><p>不同的 CPU 所支持的 SIMD 指令可能不同。</p></li><li><p><strong>Java 程序无法像 C++ 程序那样</strong>，直接<strong>使用由 Intel 提供的</strong>，将被替换为具体 SIMD 指令的 <strong>intrinsic 方法</strong>。</p></li><li><p><strong>HotSpot 虚拟机提供 Java 层面的 intrinsic 方法</strong>，这些 intrinsic 方法的语义要<strong>比单个 SIMD 指令复杂得多</strong>。</p></li><li><p>使用 SIMD 指令的 HotSpot intrinsic 是虚拟机开发人员根据其语义定制的，因而性能相当优越。</p></li><li><p>由于<strong>开发及维护成本较高</strong>，这种类型的 intrinsic 屈指可数。</p></li><li><p><strong>intrinsic 方法只能做到点覆盖</strong>，在多数情况下，应用程序不会用到这些 intrinsic 的语义，却又存在向量化优化的机会（借助自动向量化）。</p></li></ul><h1 id="自动向量化（auto-vectorization）"><a href="#自动向量化（auto-vectorization）" class="headerlink" title="自动向量化（auto vectorization）"></a>自动向量化（auto vectorization）</h1><ul><li><p>即时编译器的自动向量化将针对<strong>能够展开的计数循环，进行向量化优化</strong>。</p></li><li><p><a href="http://ennis.info/2018/11/24/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-25%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">计数循环的判定</a></p></li><li><p>自动向量化的条件较为苛刻。</p></li><li><p><strong>C2 支持的整数向量化操作不多</strong>（加法，减法，按位与、或、异或，以及批量移位和批量乘法）。</p></li><li><p>C2 支持<strong>向量点积的自动向量化</strong>，需要多条 SIMD 指令完成，并不是十分高效。</p></li></ul><!-- - 为了解决向量化 intrinsic 以及自动向量化覆盖面过窄的问题，在 OpenJDK 的 [Paname 项目](http://openjdk.java.net/projects/panama/) 中尝试引入开发人员可控的向量化抽象（[参考 Vladimir Ivanov 2018 年在 JVMLS 上的演讲](http://cr.openjdk.java.net/~vlivanov/talks/2018_JVMLS_VectorAPI.pdf)）。--><h2 id="自动向量化的条件"><a href="#自动向量化的条件" class="headerlink" title="自动向量化的条件"></a>自动向量化的条件</h2><ol><li>循环变量的<strong>增量为 1</strong>（能够遍历整个数组）。</li><li>循环变量<strong>不能为 long 类型</strong>（ C2 无法将循环识别为计数循环）。</li><li>循环<strong>迭代之间最好不要有数据依赖</strong>（循环展开之后，循环体内存在数据依赖，C2 无法进行自动向量化）。</li><li>循环体内<strong>不要有分支跳转</strong>。</li><li><strong>不要手工进行循环展开</strong>（如果 C2 无法自动展开，也无法进行自动向量化）。</li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/39838" target="_blank" rel="noopener">https://time.geekbang.org/column/article/39838</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SIMD&quot;&gt;&lt;a href=&quot;#SIMD&quot; class=&quot;headerlink&quot; title=&quot;SIMD&quot;&gt;&lt;/a&gt;SIMD&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;寄存器名称&lt;/th&gt;
&lt;th&gt;所属指令集&lt;/th&gt;
&lt;th&gt;位数&lt;/th&gt;
&lt;t
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-25循环优化</title>
    <link href="http://yoursite.com/2018/11/24/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-25%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2018/11/24/笔记-深入拆解Java虚拟机-25循环优化/</id>
    <published>2018-11-24T10:59:41.000Z</published>
    <updated>2018-11-24T11:57:51.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="循环无关代码外提"><a href="#循环无关代码外提" class="headerlink" title="循环无关代码外提"></a>循环无关代码外提</h1><blockquote><p>所谓的循环无关代码（Loop-invariant Code），指的是循环中值不变的表达式。</p></blockquote><ul><li>在<strong>不改变程序语义</strong>的情况下，将<strong>循环无关代码提出循环之外</strong>。</li></ul><h2 id="外提循环中值不变的表达式"><a href="#外提循环中值不变的表达式" class="headerlink" title="外提循环中值不变的表达式"></a>外提循环中值不变的表达式</h2><ul><li>通过 Sea-of-Nodes IR 以及节点调度共同完成。</li></ul><h2 id="外提循环无关检测"><a href="#外提循环无关检测" class="headerlink" title="外提循环无关检测"></a>外提循环无关检测</h2><ul><li>通过循环预测（Loop Prediction）完成。</li></ul><p>比如 null 检测（null check），数组下标范围检测（range check）。</p><p>null 检测涉及控制流依赖，无法通过 Sea-of-Nodes IR 转换以及节点调度外提。</p><h1 id="循环展开（Loop-Unrolling）"><a href="#循环展开（Loop-Unrolling）" class="headerlink" title="循环展开（Loop Unrolling）"></a>循环展开（Loop Unrolling）</h1><blockquote><p>指的是在循环体中重复多次循环迭代，并<strong>减少循环次数</strong>的编译优化。</p></blockquote><ul><li>在 C2 中，<strong>只有计数循环</strong>（Counted Loop）才能被展开。</li><li>随着循环体的增大，优化机会不断增加。</li><li>如果循环展开能够触发进一步优化，总体的代码复杂度将降低。</li><li>缺点：可能会<strong>增加代码的冗余度</strong>，导致所生成机器码的长度大幅上涨。</li></ul><h2 id="循环完全展开（Full-Unroll）"><a href="#循环完全展开（Full-Unroll）" class="headerlink" title="循环完全展开（Full Unroll）"></a>循环完全展开（Full Unroll）</h2><ul><li>当<strong>循环数目</strong>是<strong>固定值</strong>而且<strong>非常小</strong>时，会将<strong>循环全部展开</strong>（Full Unroll）。</li><li>仅迭代三次（或以下）的循环，即时编译器将进行完全展开。</li><li>循环体 IR 节点数目超过阈值的循环，即时编译器不会进行任何循环展开。</li></ul><h2 id="计数循环需满足的-4-个条件"><a href="#计数循环需满足的-4-个条件" class="headerlink" title="计数循环需满足的 4 个条件"></a>计数循环需满足的 4 个条件</h2><ol><li>维护一个循环计数器，并且基于计数器的循环出口只有一个（但可以有基于其他判断条件的出口）。</li><li>循环计数器的类型为 int、short 或者 char（即不能是 byte、long，更不能是 float 或者 double）。</li><li>每个迭代循环计数器的增量为常数。</li><li>循环计数器的上限（增量为正数）或下限（增量为负数）是循环无关的数值。</li></ol><h1 id="循环判断外提（loop-unswitching）"><a href="#循环判断外提（loop-unswitching）" class="headerlink" title="循环判断外提（loop unswitching）"></a>循环判断外提（loop unswitching）</h1><blockquote><p>指的是<strong>将循环中的 if 语句外提至循环之前</strong>，并且在该 if 语句的两个分支中分别放置一份循环代码。</p></blockquote><ul><li>与循环无关检测外提所针对的代码模式比较类似。</li></ul><h1 id="循环剥离（loop-peeling）"><a href="#循环剥离（loop-peeling）" class="headerlink" title="循环剥离（loop peeling）"></a>循环剥离（loop peeling）</h1><blockquote><p>指的是将循环的前几个迭代或者后几个迭代剥离出循环的优化方式。</p></blockquote><ul><li>一般来说，循环的<strong>前几个迭代</strong>或者<strong>后几个迭代</strong>都包含<strong>特殊处理</strong>。</li><li>剥离出去后，可以<strong>使原本的循环体的规律性更加明显</strong>，触发进一步的优化。</li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Q：</p><p>如果有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( ... ) &#123;</span><br><span class="line">sum += x + y + a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借助 Sea-of-Nodes IR 能把 x + y 表达式外提出去。但，如果表达式变成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum += x + a[i] + y;</span><br></pre></td></tr></table></figure><p>也能借助 IR 外提  x + y 吗？</p><p>A：能。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/39814" target="_blank" rel="noopener">https://time.geekbang.org/column/article/39814</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;循环无关代码外提&quot;&gt;&lt;a href=&quot;#循环无关代码外提&quot; class=&quot;headerlink&quot; title=&quot;循环无关代码外提&quot;&gt;&lt;/a&gt;循环无关代码外提&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;所谓的循环无关代码（Loop-invariant Code），指的
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-24字段访问相关优化</title>
    <link href="http://yoursite.com/2018/11/22/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-24%E5%AD%97%E6%AE%B5%E8%AE%BF%E9%97%AE%E7%9B%B8%E5%85%B3%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2018/11/22/笔记-深入拆解Java虚拟机-24字段访问相关优化/</id>
    <published>2018-11-22T11:20:50.000Z</published>
    <updated>2018-11-22T12:09:20.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字段读取优化"><a href="#字段读取优化" class="headerlink" title="字段读取优化"></a>字段读取优化</h1><ul><li><p>即时编译器会<strong>优化实例字段和静态字段访问</strong>，以减少总的内存访问数目。</p><ul><li>沿控制流，缓存各个字段存储节点将要存储的值，或者字段读取节点所得到的值。</li><li>遇到对同一字段的读取节点时，如果缓存值还没有失效，将读取节点替换为该缓存值。</li><li>遇到对同一字段的存储节点时，更新所缓存的值。</li><li>遇到可能更新字段的节点时，采取保守策略，舍弃所有缓存值。</li></ul></li><li><p>如果字段读取节点被替换成一个常量，将进一步触发更多优化。</p><ul><li>删除不可达条件分支代码，死循环后的代码。</li></ul></li><li><p>即时编译器将在 volatile 字段访问前后插入内存屏障节点。</p></li><li><strong>内存屏障节点会阻止即时编译器将屏障之前所缓存的值用于屏障之后的读取节点之上。</strong></li><li><strong>加锁、解锁操作会阻止即时编译器的字段读取优化。</strong></li></ul><h1 id="字段存储优化"><a href="#字段存储优化" class="headerlink" title="字段存储优化"></a>字段存储优化</h1><ul><li>即时编译器会<strong>消除冗余的存储节点</strong>。</li><li>如果字段被标记为 <strong>volatile</strong>，即时编译器<strong>不能</strong>将冗余的存储操作<strong>消除</strong>掉。</li></ul><h1 id="死代码消除（dead-code-eliminiation）"><a href="#死代码消除（dead-code-eliminiation）" class="headerlink" title="死代码消除（dead code eliminiation）"></a>死代码消除（dead code eliminiation）</h1><ul><li><strong>消除局部变量的死存储</strong>（dead store）（涉及冗余存储）。</li><li><strong>消除不可达分支。</strong></li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Q：思考即时编译器会怎么优化下面代码中的除法操作？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t = x/y;</span><br><span class="line">t = x+y;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A：<strong>除法无法优化，因为可能存在除零异常。</strong>s即时编译器需要判断除数是否为 0。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/39683" target="_blank" rel="noopener">https://time.geekbang.org/column/article/39683</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字段读取优化&quot;&gt;&lt;a href=&quot;#字段读取优化&quot; class=&quot;headerlink&quot; title=&quot;字段读取优化&quot;&gt;&lt;/a&gt;字段读取优化&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;即时编译器会&lt;strong&gt;优化实例字段和静态字段访问&lt;/strong&gt;，以减少总的内存访
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-23逃逸分析</title>
    <link href="http://yoursite.com/2018/11/15/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-23%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/11/15/笔记-深入拆解Java虚拟机-23逃逸分析/</id>
    <published>2018-11-15T08:40:59.000Z</published>
    <updated>2018-11-15T11:38:41.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h1><blockquote><p>一种确定<strong>指针动态范围</strong>的<strong>静态分析</strong>，它可以分析在程序的哪些地方可以访问到指针。</p></blockquote><ul><li>在 JVM 的<strong>即时编译</strong>语境下，逃逸分析将<strong>判断新建的对象是否逃逸</strong>。</li></ul><h2 id="判断对象是否逃逸的依据"><a href="#判断对象是否逃逸的依据" class="headerlink" title="判断对象是否逃逸的依据"></a>判断对象是否逃逸的依据</h2><ul><li>对象是否被<strong>存入堆</strong>中（静态字段或者堆中对象的实例字段）。</li><li><p>对象是否被<strong>传入未知代码</strong>中（对象是否作为方法调用的调用者或者参数）。</p><ul><li>方法中未被内联的方法调用当成未知代码。</li><li>可以认为<strong>方法调用的调用者以及参数是逃逸的</strong>。</li></ul></li><li><p>通常<strong>逃逸分析</strong>放在<strong>方法内联之后</strong>。</p></li></ul><h1 id="基于逃逸分析的优化"><a href="#基于逃逸分析的优化" class="headerlink" title="基于逃逸分析的优化"></a>基于逃逸分析的优化</h1><h2 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h2><ul><li><p>如果能证明<strong>锁对象不逃逸</strong>，对该锁对象的<strong>加锁、解锁</strong>操作<strong>没有意义</strong>。</p><ul><li>因为其他线程不能获得该所对象，即时编译器可以消除加锁、解锁操作。</li><li>传统编译器仅需证明锁对象不逃逸出线程，便可以进行锁消除。</li><li>由于即时编译的限制，条件被强化为证明锁<strong>对象不逃逸</strong>出当前编译的<strong>方法</strong>。</li></ul></li><li><p>基于逃逸分析的锁消除实际上不多见。</p></li></ul><h2 id="栈上分配（HotSpot-虚拟机未采用）"><a href="#栈上分配（HotSpot-虚拟机未采用）" class="headerlink" title="栈上分配（HotSpot 虚拟机未采用）"></a>栈上分配（HotSpot 虚拟机未采用）</h2><ul><li>如果逃逸分析能证明某些<strong>新建的对象不逃逸</strong>，可以将其<strong>分配至栈上</strong>。</li><li>new 语句所在的方法退出时，<strong>弹出</strong>当前方法的<strong>栈桢自动回收内存空间</strong>。</li><li>无须借助垃圾回收器处理。</li><li>实现需要<strong>更改大量</strong>假设“对象只能堆分配”的<strong>代码</strong>。</li></ul><h2 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h2><blockquote><p>标量：就是仅能存储一个值的变量，如局部变量。<br>聚合量：可能同时存储多个值，如 Java 对象。</p></blockquote><ul><li>可以看成将原本<strong>对对象的字段的访问，替换为一个个局部变量的访问</strong>。</li><li>对象没有被实际分配，和栈上分配一样。</li><li>可以减轻垃圾回收的压力。</li><li>与栈上分配相比，<strong>对字段的内存连续性不做要求</strong>。</li><li>字段甚至可以<strong>直接在寄存器中维护</strong>，无须浪费任何内存空间。</li></ul><h1 id="部分逃逸分析（partial-escape-analysis）"><a href="#部分逃逸分析（partial-escape-analysis）" class="headerlink" title="部分逃逸分析（partial escape analysis）"></a>部分逃逸分析（partial escape analysis）</h1><ul><li>C2 的逃逸分析与控制流无关。</li><li>Graal 引入一个<strong>与控制流有关</strong>的逃逸分析，即部分逃逸分析。</li><li>部分逃逸分析能够<strong>优化更多的情况，编译时间更长</strong>。</li><li><strong>解决</strong>所新建的实例仅在<strong>部分程序路径中逃逸</strong>的情况。</li><li>根据控制流信息，判断出新建对象仅在部分分支中逃逸，<strong>将对象的新建操作推延至对象逃逸的分支中</strong>。</li><li>使得原本因对象逃逸而无法避免的新建对象操作，不再出现在只执行 if-else 分支的程序路径之中。（不懂）</li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/18048" target="_blank" rel="noopener">https://time.geekbang.org/column/article/18048</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;逃逸分析&quot;&gt;&lt;a href=&quot;#逃逸分析&quot; class=&quot;headerlink&quot; title=&quot;逃逸分析&quot;&gt;&lt;/a&gt;逃逸分析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一种确定&lt;strong&gt;指针动态范围&lt;/strong&gt;的&lt;strong&gt;静态分析&lt;/strong&gt;
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-22HotSpot虚拟机的intrinsic</title>
    <link href="http://yoursite.com/2018/11/14/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-22HotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84intrinsic/"/>
    <id>http://yoursite.com/2018/11/14/笔记-深入拆解Java虚拟机-22HotSpot虚拟机的intrinsic/</id>
    <published>2018-11-14T11:14:48.000Z</published>
    <updated>2018-11-14T11:41:12.187Z</updated>
    
    <content type="html"><![CDATA[<ul><li>HotSpot 虚拟机中，所有被标注 @HotSpotIntrinsicCandidate 注解的方法都是 HotSpot intrinsic。</li><li>这些方法的调用，会被 HotSpot 虚拟机<strong>替换成高效的指令序列</strong>。<strong>原本的方法实现</strong>则会被<strong>忽略</strong>掉。</li><li>如果 Java 核心类库的开发者更改了原本的实现，虚拟机中的高效实现也需要进行相应的修改。</li><li><strong>其他虚拟机不一定维护</strong>了这些 intrinsic 的高效实现。</li><li>这些高效实现通常<strong>依赖于具体的 CPU 指令</strong>，而这些 CPU 指令不好在 Java 源程序中表达。</li><li>如果换了一个体系架构，可能没有对应的 CPU 指令，无法进行 intrinsic 优化。</li></ul><!-- # intrinsic 与 CPU 指令 --><!-- 看看即可 --><h1 id="intrinsic-与方法内联"><a href="#intrinsic-与方法内联" class="headerlink" title="intrinsic 与方法内联"></a>intrinsic 与方法内联</h1><h2 id="独立的桩程序"><a href="#独立的桩程序" class="headerlink" title="独立的桩程序"></a>独立的桩程序</h2><ul><li>可以被解释执行器利用，直接替换对原方法的调用。</li><li>可以被即时编译器所利用，把代表对原方法的调用的 IR 节点，替换为对这些桩程序的调用的 IR 节点。</li><li>这种形式实现的比较少，主要包括 Math 类的一些方法。</li></ul><h2 id="特殊的编译器-IR-节点"><a href="#特殊的编译器-IR-节点" class="headerlink" title="特殊的编译器 IR 节点"></a>特殊的编译器 IR 节点</h2><ul><li>只能被即时编译器所用。</li><li>将对原方法的调用的 IR 节点，替换成特殊的 IR 节点，并参与接下来的优化过程。</li><li>替换过程是在方法内联时进行。</li><li>native 方法被标记为 intrinsic 也能够 “ 内联 “ 进来，并插入特殊的 IR 节点。</li><li>即时编译器的后端根据这些特殊的 IR 节点，生成指定的 CPU 指令。<br>-native 方法经过 intrinsic 优化之后，JNI 开销直接消失不见，最终的结果十分高效。</li><li>大部分实现通过这种形式。</li></ul><h1 id="已有-intrinsic-简介"><a href="#已有-intrinsic-简介" class="headerlink" title="已有 intrinsic 简介"></a>已有 intrinsic 简介</h1><ul><li>最新版本的 HotSpot 虚拟机定义了三百多个 intrinsic（Java 10.0.2）。</li><li>有三成以上是Unsafe类的方法。</li></ul><!-- 其他看看即可 --><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/18046" target="_blank" rel="noopener">https://time.geekbang.org/column/article/18046</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;HotSpot 虚拟机中，所有被标注 @HotSpotIntrinsicCandidate 注解的方法都是 HotSpot intrinsic。&lt;/li&gt;
&lt;li&gt;这些方法的调用，会被 HotSpot 虚拟机&lt;strong&gt;替换成高效的指令序列&lt;/strong&gt;
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>转-Android学习路线指南</title>
    <link href="http://yoursite.com/2018/11/14/%E8%BD%AC-Android%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2018/11/14/转-Android学习路线指南/</id>
    <published>2018-11-14T05:50:40.000Z</published>
    <updated>2018-11-14T11:45:42.380Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://blog.csdn.net/singwhatiwanna/article/details/49560409" target="_blank" rel="noopener">转自《Android 开发艺术探索》作者 —— 任玉刚</a><br>转载请注明出处：<a href="https://blog.csdn.net/singwhatiwanna/article/details/49560409" target="_blank" rel="noopener">https://blog.csdn.net/singwhatiwanna/article/details/49560409</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看到一篇文章中提到“最近几年国内的初级Android程序员已经很多了，但是中高级的 Android 技术人才仍然稀缺“，这的确不假，从我在百度所进行的一些面试来看，找一个适合的高级 Android 工程师的确不容易，一般需要进行大量的面试才能挑选出一个比较满意的。为什么中高级 Android 程序员不多呢？这是一个问题，我不好回答，但是我想写一篇文章来描述下 Android 的学习路线，期望可以帮助更多的 Android 程序员提升自己。由于我也是从一个菜鸟过来的，所以我会结合我的个人经历以及我对 Android 学习过程的认识来写这篇文章，这会让这篇文章更加真实，而并非纸上谈兵。</p><h1 id="我的工作经历"><a href="#我的工作经历" class="headerlink" title="我的工作经历"></a>我的工作经历</h1><p>前面说到，我也是从一个 Android 菜鸟过来的。其实这句话放在任何人的身上都是适用的，即大家都是一步步过来的，因此作为初学者也不必因为技术差而郁闷，同理，高手也不要看不起一些所谓的菜鸟，因为这不公平，技术只有在同等的工作年限上才具有一定的可比性，也许你眼中的菜鸟只是个工作半年的新手，而你已经工作 5 年，可想而知，这根本不具有可比性，搞不好别人 5 年后可以达到比你更高的技术高度。</p><p>我有若干个技术 QQ 群，群里（481798332）的小伙伴对我的工作经历比较感兴趣，刚好在这里我就做下介绍。我是硕士研究生毕业，我已经工作 3 年零 3 个月了，职位上从最开始的腾讯初级工程师变成了现在的百度 Android 资深工程师。最开始我并不是做 Android 的，先是做了半年的 C++，接着做了 3 个月的 Web 前端，然后公司内部转岗做 Android 到至今，纯 Android 工作年限的话其实是 2.5 年。但是我认为我的 Android 工作经验（注：工作年限不等同于工作经验）不止 2.5 年，我投入大量的业余时间在 Android 开发上，并且我习惯去思考问题、总结问题并将其融会贯通，因此我的 Android 技术在短时间内有了很大的提升。</p><p>在 Android 学习过程中，初学者踩过的坑我也都踩过，我也深深地知道大家在学习过程中最棘手的问题是什么。举个例子，在 3 年前，我想在 SlidingMenu 中放入一个 ListView，发现二者总是不能很好地一起工作，这肯定是由于滑动冲突的问题，我也知道，但是不知道怎么解决。我就去学校图书馆翻遍了所有的 Android 书籍，无果。大家肯定都知道原因，为什么我无法从书中查找到问题的答案，因为入门书不讲滑动冲突，所谓的高级编程书也不讲。还有一个问题，我曾经以为 view.post(runnable) 可以让 runnable 的 run 方法在线程中执行，所以我就在 run 方法里面去做耗时的操作，现在想想我当时是多菜啊，因此我曾经也是菜鸟。</p><p>直到若干年后的某一天，我终于琢磨透了滑动冲突的事，然后我就把解决问题的思想写在了 CSDN 博客上，但是好像看得人并不多，很多人并不能体会我的用心，后来我博客的访问量越来越大，这才慢慢地得到了一些人的关注。后来有一天我有了写书的契机，我想到了我最开始学习 Android 时所踩过的坑，想到滑动冲突对我的困扰，为了更好地传播我的技术经验，为了让更多的人少踩一些坑，为了让更多地人成为 Android 高级工程师，我毅然决定将 Android 开发中最重要的、最疑难的、最容易困扰大家的、成为高级工程师所必备的知识点和盘托出，这就是《Android 开发艺术探索》存在的原因以及意义。书的反响怎么样呢？从目前读者的评价来看，内容基本无差评，我收到了很多读者的肯定以及感谢，这说明很多人能够理解我的用心。</p><p>说了那么多，言归正传，下面说下 Android 学习路线的话题，本文打算从 4 个阶段来对 Android 的学习过程做一个全面的分析，分别为 Android 初级、中级、高级以及资深工程师，具体请看下面的分析。同理，本篇学习路线仍然只针对 Android 应用开发，不针对 Rom 开发和逆向工程等。这里虚拟一位“小明”的角色，在这里小明就是 Android 初学者的代表。</p><h1 id="初级工程师"><a href="#初级工程师" class="headerlink" title="初级工程师"></a>初级工程师</h1><p>小明之前完全没接触过 Android 开发，是个应届生，他的待遇是 13k，然后小明以校招的身份进入了百度，然后小明需要怎么学习才能成为初级工程师呢？这个时候，小明对编程基础、数据结构、C 语言都有一定基础，Java 语法什么的也都掌握的比较好，Android 才有 java 语言，无奈的是小明并不会搞 Android。</p><p>小明首先需要购买一本 Android 入门的书籍，为了更快地学习 Android，小明业余时间也都用来一边看书一边照着书中的例子敲代码，结果 2 周时间小明就把这本书学了一遍。看完这本书后，小明对 Android 的历史、结构、代码规范等都有了一个大概的了解，并且，小明已经可以写出一些简单的 Activity 了。这个时候在小明眼里，Android 开发很简单很好玩，通过在 xml 中摆放一些按钮文本框什么的就可以做一些界面了。</p><p>小明开始跟着他的技术导师做需求，一些简单的小需求小明自然是不在话下了。突然有一天来了一个需求，该需求要求小明在 Activity 中为一个 button 加一个动画效果，小明慌了：“完全没接触过，书上也没有讲，怎么办呢？”小明冷静了下，打开了百度搜索，输入“Android 动画”，打开前几个链接，小明恍然大悟，照着网上的例子把需求给实现了。后来导师告诉他：“学好 Android，官方文档是必须看的，既全面又权威”。然后小明如获至宝，花了一年时间把上面的 guide 和 training 都看了一遍，并且他还动手抄了几个小例子。</p><p>有一天，小明又需要做一个动画相关的需求，这可难不倒小明，它熟练地打开了 <a href="http://www.baidu.com，输入“Android" target="_blank" rel="noopener">www.baidu.com，输入“Android</a> 动画”，突然他楞了一下：”总不能每次写动画都要百度一下吧！“，于是他在 CSDN 开了一个博客，把动画相关的知识点都写上去，为的是后面再写动画相关的代码就不用百度去搜了，事实如何呢？后面再写动画相关的代码，小明的确不用再去百度搜了，因为通过写一篇动画博客，他把动画相关的细节都已经记住了，这样他就可以不用再去参考任何文档了，后来小明还学会了把一些琐碎的不方便放在博客上的东西写到了印象笔记上面，什么时候忘了 10 秒钟以内都可以快速找回来，而不是花 10 分钟去再次搜索一遍。</p><p>这里总结一下，Android 入门的时候，需要有一本入门书，好好学习书中的内容，同时花一年时间把 Android 官方文档中的 training 和 guide 看一遍，同时通过写博客和记笔记的方式来做总结，建议让自己的每篇博客都有价值些。通过一年时间的学习，相信每个人都可以达到中级工程师的水平。</p><p>技术要求： </p><ul><li>基本知识点 </li></ul><p>比如四大组件如何使用、如何创建Service、如何进行布局、简单的自定义View、动画等常见技术 </p><ul><li>书籍推荐 </li></ul><p>《第一行代码 Android》、《疯狂 Android》</p><h1 id="中级工程师"><a href="#中级工程师" class="headerlink" title="中级工程师"></a>中级工程师</h1><p>小明经过一年的努力学习终于成为 Android 中级工程师了，月薪变成了 17k。到了中级工程师，已经可以在公司里干很多体力活了，但是一些很重要的任务小明还不能一个人承担起来，这个时候小明需要学习的内容就很多了，如下所示：</p><ul><li>AIDL：熟悉 AIDL，理解其工作原理，懂 transact 和 onTransact 的区别； </li><li>Binder：从 Java 层大概理解 Binder 的工作原理，懂 Parcel 对象的使用； </li><li>多进程：熟练掌握多进程的运行机制，懂 Messenger、Socket 等； </li><li>事件分发：弹性滑动、滑动冲突等； </li><li>玩转 View：View 的绘制原理、各种自定义 View； </li><li>动画系列：熟悉 View 动画和属性动画的不同点，懂属性动画的工作原理； </li><li>懂性能优化、熟悉 mat 等工具 </li><li>懂点常见的设计模式</li></ul><h2 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h2><p>阅读进阶书籍，阅读 Android 源码，阅读官方文档并尝试自己写相关的技术文章，需要有一定技术深度和自我思考。在这个阶段的学习过程中，有 2 个点是比较困扰大家的，一个是阅读源码，另一个是自定义 View 以及滑动冲突。</p><p>如何阅读源码呢？这是个头疼的问题，但是源码必须要读。阅读源码的时候不要深入代码细节不可自拔，要关注代码的流程并尽量挖掘出对应用层开发有用的结论。另外仔细阅读源码中对一个类或者方法的注释，在看不懂源码时，源码中的注释可以帮你更好地了解源码中的工作原理，这个过程虽然艰苦，但是别无他法。</p><p>如何玩转自定义 View 呢？我的建议是不要通过学习自定义 view 而学习自定义 view。为什么这么说呢？因为自定义 view 的种类太多了，各式各样的绚丽的自定义效果，如何学的玩呢！我们要透过现象看本质，更多地去关注自定义 view 所需的知识点，这里做如下总结：</p><ul><li>搞懂 view 的滑动原理 </li><li>搞懂如何实现弹性滑动 </li><li>搞懂 view 的滑动冲突 </li><li>搞懂 view 的 measure、layout 和 draw </li><li>然后再学习几个已有的自定义 view 的例子 </li><li>最后就可以搞定自定义 view 了，所谓万变不离其宗</li></ul><p>大概再需要 1-2 年时间，即可达到高级工程师的技术水平。我个人认为通过《Android 开发艺术探索》和《Android 群英传》可以缩短这个过程为 0.5-1 年。注意，达到高级工程师的技术水平不代表就可以立刻成为高级工程师（受机遇、是否跳槽的影响），但是技术达到了，成为高级工程师只是很简单的事。</p><p>技术要求： </p><ul><li>稍微深入的知识点 </li></ul><p>AIDL、Messenger、Binder、多进程、动画、滑动冲突、自定义 View、消息队列等 </p><ul><li>书籍推荐 </li></ul><p>《Android 开发艺术探索》、《Android 群英传》</p><h1 id="高级工程师"><a href="#高级工程师" class="headerlink" title="高级工程师"></a>高级工程师</h1><p>小明成为了梦寐以求的高级工程师，月薪达到了 20k，还拿到了一丢丢股票。这个时候小明的 Android 水平已经不错了，但是小明的目标是资深工程师，小明听说资深工程师月薪可以达到 30k+。</p><p>为了成为 Android 资深工程师，需要学习的东西就更多了，并且有些并不是那么具体了，如下所示： </p><ul><li><p>继续加深理解”稍微深入的知识点“中所定义的内容 </p></li><li><p>了解系统核心机制： </p><ol><li>了解 SystemServer 的启动过程 </li><li>了解主线程的消息循环模型 </li><li>了解 AMS 和 PMS 的工作原理 </li><li>能够回答问题”一个应用存在多少个 Window ？“ </li><li>了解四大组件的大概工作流程 </li><li>… </li></ol></li><li><p>基本知识点的细节 </p><ol><li>Activity 的启动模式以及异常情况下不同 Activity 的表现 </li><li>Service 的 onBind 和 onReBind 的关联 </li><li>onServiceDisconnected(ComponentName className) 和 binderDied() 的区别 </li><li>AsyncTask 在不同版本上的表现细节 </li><li>线程池的细节和参数配置 </li><li>… </li></ol></li><li><p>熟悉设计模式，有架构意识</p></li></ul><h2 id="学习方法-1"><a href="#学习方法-1" class="headerlink" title="学习方法"></a>学习方法</h2><p>这个时候已经没有太具体的学习方法了，无非就是看书、看源码和做项目，平时多种总结，尽量将知识融会贯通从而形成一种体系化的感觉。同时这个阶段对架构是有一定要求的，架构是抽象的，但是设计模式是具体的，所以一定要加强下设计模式的学习。关于设计模式的学习，最近一本新书推荐给大家《Android 源码设计模式解析与实战》，既可以学习设计模式，又可能体会到 Android 源码中的设计思想，我最近也在阅读此书。</p><p>技术要求： </p><ul><li>稍微深入的知识点 </li><li>系统核心机制 </li><li>基本知识点的细节 </li><li>设计模式和架构 </li><li>书籍推荐 </li></ul><p>《Android 开发艺术探索》、《Android 源码设计模式解析与实战》、《Android 内核剖析》</p><h1 id="资深工程师"><a href="#资深工程师" class="headerlink" title="资深工程师"></a>资深工程师</h1><p>这个阶段的程序员也许并没有太具体的学习路线了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/singwhatiwanna/article/details/49560409&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;转自《Android 开发艺术探索》作者 
      
    
    </summary>
    
      <category term="学习指南" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="指南" scheme="http://yoursite.com/tags/%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-2021方法内联</title>
    <link href="http://yoursite.com/2018/11/10/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-2021%E6%96%B9%E6%B3%95%E5%86%85%E8%81%94/"/>
    <id>http://yoursite.com/2018/11/10/笔记-深入拆解Java虚拟机-2021方法内联/</id>
    <published>2018-11-10T10:24:39.000Z</published>
    <updated>2018-11-11T07:55:12.323Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。</p></blockquote><ul><li>可以<strong>消除调用本身带来的性能开销</strong>。</li><li>可以进一步<strong>触发更多的优化</strong>。</li><li>可以算是<strong>编译优化</strong>里<strong>最为重要的一环</strong>。</li></ul><h1 id="机器码的生成"><a href="#机器码的生成" class="headerlink" title="机器码的生成"></a>机器码的生成</h1><p>即时编译器首先解析字节码，并生成 IR 图，然后在该 IR 图上进行优化。优化是由一个个独立的优化阶段（optimization phase）串联起来的。每个优化阶段都会对 IR 图进行转换。最后即时编译器根据 IR 图的节点以及调度顺序生成机器码。</p><h1 id="C2"><a href="#C2" class="headerlink" title="C2"></a>C2</h1><ul><li>方法内联在<strong>解析字节码的过程</strong>中完成。</li></ul><p>每当碰到方法调用字节码时，C2 将决定是否需要内联该方法调用。如果需要内联，则开始解析目标方法的字节码。</p><h1 id="Graal"><a href="#Graal" class="headerlink" title="Graal"></a>Graal</h1><ul><li>方法内联在<strong>解析字节码的过程</strong>中完成。</li><li>拥有一个<strong>独立的优化阶段</strong>，寻找指代方法调用的 IR 节点，替换为目标方法的 IR 图。</li></ul><h2 id="独立优化阶段"><a href="#独立优化阶段" class="headerlink" title="独立优化阶段"></a>独立优化阶段</h2><ul><li><strong>将被调用方法的 IR 图节点复制到调用者方法的 IR 图中。</strong></li><li>被调用方法的传入参数节点，将被替换为调用者方法进行方法调用时所传入参数对应的节点。</li><li>在调用者方法的 IR 图中，所有指向原方法调用节点的数据依赖将重新指向被调用方法的返回节点。</li></ul><p>如果被调用方法存在多个返回节点，则生成一个 Phi 节点，将这些返回值聚合起来，并作为原方法调用节点的替换对象。</p><ul><li>如果被调用方法将抛出某种类型的异常，而调用者方法恰好有该异常类型的处理器，并且该异常处理器覆盖这一方法调用，那么即时编译器需要将被调用方法抛出异常的路径，与调用者方法的异常处理器相连接。</li><li>在接下来的编译过程中<strong>对新的 IR 图进行进一步优化</strong>。</li></ul><h1 id="方法内联的条件"><a href="#方法内联的条件" class="headerlink" title="方法内联的条件"></a>方法内联的条件</h1><ul><li>内联越多➡生成代码的执行效率越高。</li><li>内联越多➡编译时间也就越长➡程序达到峰值性能的时刻将被推迟。</li><li>内联越多➡生成的机器码越长。</li></ul><p>JVM 中编译生成的机器码会被部署到 Code Cache 之中。Code Cache 有大小限制。Code Cache 已满时，出现即时编译已被关闭的警告信息。</p><ul><li><p>即时编译器根据这些规则决定方法调用<strong>能否被内联</strong>。</p><ul><li><strong>方法调用指令所在的程序路径的热度</strong></li><li><strong>目标方法的调用次数及大小</strong></li><li><strong>当前 IR 图的大小</strong></li></ul></li><li><p>内联算法<strong>更青睐于小方法</strong>。</p></li></ul><p><img src="http://pcrioz2ch.bkt.clouddn.com/JVM/20/c2_parameters.jpg" alt="image" title="C2 相关的虚拟机参数"></p><h2 id="特殊规则"><a href="#特殊规则" class="headerlink" title="特殊规则"></a>特殊规则</h2><ul><li>自动拆箱总会被内联。</li><li>Throwable 类的方法不能被其他类中的方法所内联。</li></ul><h2 id="强制内联"><a href="#强制内联" class="headerlink" title="强制内联"></a>强制内联</h2><ul><li>由 -XX:CompileCommand 中的 inline 指令指定的方法。</li><li>由 @ForceInline 注解的方法（仅限于 JDK 内部方法）。</li></ul><h2 id="不被内联"><a href="#不被内联" class="headerlink" title="不被内联"></a>不被内联</h2><ul><li>由 -XX:CompileCommand 中的 dontinline 指令或 exclude 指令（表示不编译）指定的方法。</li><li>由 @DontInline 注解的方法（仅限于 JDK 内部方法）。</li></ul><h2 id="无法内联"><a href="#无法内联" class="headerlink" title="无法内联"></a>无法内联</h2><ul><li>调用字节码对应的符号引用未被解析。</li><li>目标方法所在的类未被初始化。</li><li>目标方法是 native 方法。</li></ul><h2 id="不支持内联"><a href="#不支持内联" class="headerlink" title="不支持内联"></a>不支持内联</h2><ul><li><strong>C2 不支持内联超过 9 层的调用</strong>（可以通过虚拟机参数 -XX:MaxInlineLevel 调整）。</li><li><strong>1 层的直接递归调用</strong>（可以通过虚拟机参数 -XX:MaxRecursiveInlineLevel 调整）。</li></ul><h1 id="静态方法调用"><a href="#静态方法调用" class="headerlink" title="静态方法调用"></a>静态方法调用</h1><ul><li>即时编译器可以轻易地<strong>确定唯一的目标方法</strong>。</li></ul><h1 id="虚方法调用"><a href="#虚方法调用" class="headerlink" title="虚方法调用"></a>虚方法调用</h1><blockquote><ul><li>非 static、非 private 、非 final 方法都是虚方法。<blockquote><p>换句话说可以被重写的方法都是虚方法。</p></blockquote></li><li>即时编译器需要先对虚方法调用进行去虚化（devirtualize），即转换为一个或多个直接调用，然后才能进行方法内联。</li></ul></blockquote><h2 id="完全去虚化"><a href="#完全去虚化" class="headerlink" title="完全去虚化"></a>完全去虚化</h2><ul><li>通过<strong>类型推导</strong>或者<strong>类层次分析</strong>（class hierarchy analysis），识别虚方法调用的唯一目标方法，将其<strong>转换为直接调用</strong>。</li><li><strong>关键在于证明虚方法调用的目标方法是唯一的。</strong></li></ul><h3 id="基于类型推导的完全去虚化"><a href="#基于类型推导的完全去虚化" class="headerlink" title="基于类型推导的完全去虚化"></a>基于类型推导的完全去虚化</h3><blockquote><p>类型推导属于全局优化，比较浪费时间。</p></blockquote><ul><li>通过<strong>数据流分析</strong>推导出调用者的动态类型。</li><li>如果生成 Sea-of-Nodes IR 后，调用者的<strong>动态类型已能够直接确定，就进行去虚化</strong>。</li><li>如果<strong>需要额外的数据流分析才能确定</strong>，<strong>不做</strong>，节省编译时间，依赖接下来的去虚化手段优化。</li></ul><h3 id="基于类层次分析的完全去虚化"><a href="#基于类层次分析的完全去虚化" class="headerlink" title="基于类层次分析的完全去虚化"></a>基于类层次分析的完全去虚化</h3><ul><li><strong>分析所有已被加载的类</strong>，判断某个抽象方法或者接口方法<strong>是否仅有一个实现</strong>。如果是，调用这些方法只能调用至该具体实现中。</li><li><strong>无法保证之后的执行过程只有一个具体实现。</strong></li><li>JVM 为当前编译结果<strong>注册若干个假设</strong>（assumption）。</li></ul><p>假定某抽象类只有一个子类，或者某抽象方法只有一个具体实现，又或者某类没有子类等。</p><ul><li>当新的类被加载，JVM 会重新验证假设。</li><li>如果某个假设不再成立，对其所属的编译结果去优化。</li><li>如果使用了 <strong>final 修饰符</strong>，即时编译器可以<strong>不用生成对应的假设，直接去虚化和内联</strong>。</li></ul><h4 id="接口方法调用（不懂）"><a href="#接口方法调用（不懂）" class="headerlink" title="接口方法调用（不懂）"></a>接口方法调用（不懂）</h4><ul><li><strong>去虚化不能移除动态类型检测。</strong></li><li>执行 invokeinterface 指令时，JVM 必须对调用者的动态类型进行测试，是否实现了目标接口方法所在的接口。</li><li>Java 类验证器将接口类型直接看成 Object 类型，有可能出现声明类型为接口，实际类型没有继承该接口的情况。</li></ul><h2 id="条件去虚化（guarded-devirtualization）"><a href="#条件去虚化（guarded-devirtualization）" class="headerlink" title="条件去虚化（guarded devirtualization）"></a>条件去虚化（guarded devirtualization）</h2><ul><li>将虚方法调用<strong>转换为若干个类型测试以及直接调用</strong>。</li><li><strong>关键在于找出需要进行比较的类型。</strong></li><li>将调用者的动态类型，依次<strong>与类型 Profile 记录的类型比较</strong>。</li><li>如果<strong>匹配，直接调用</strong>该记录类型所对应的目标方法。</li><li>不匹配<ul><li>如果类型 Profile 是<strong>完整</strong>的，<strong>去优化</strong>，重新收集类型 Profile。</li><li>如果类型 Profile 是<strong>不完整</strong>的，进行原本的<strong>虚调用</strong>，通过内联缓存进行调用，或者通过方法表进行动态绑定。（Graal）</li></ul></li><li><strong>在 C2 中，如果类型 Profile 是不完整的，不会进行条件去虚化</strong>，直接使用内联缓存或者方法表。</li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/14575" target="_blank" rel="noopener">https://time.geekbang.org/column/article/14575</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可以&lt;strong&gt;消除调用本身带来的性能开销&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;可以进一步&lt;s
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-19Java字节码（基础篇）</title>
    <link href="http://yoursite.com/2018/11/08/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-19Java%E5%AD%97%E8%8A%82%E7%A0%81%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/"/>
    <id>http://yoursite.com/2018/11/08/笔记-深入拆解Java虚拟机-19Java字节码（基础篇）/</id>
    <published>2018-11-08T06:42:50.000Z</published>
    <updated>2018-11-10T11:39:23.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h1><ul><li><strong>解释执行</strong>过程中，为 Java 方法分配栈桢时，JVM <strong>需要开辟一块额外的空间作为操作数栈</strong>，存放计算的操作数和返回结果。</li><li>执行每一条指令之前，JVM <strong>要求该指令的操作数已被压入操作数栈中</strong>。</li><li>在执行指令时，JVM 会将该指令<strong>所需的操作数弹出</strong>，并且将指令的<strong>结果重新压入栈</strong>中。</li></ul><h2 id="直接作用在操作数栈上的指令"><a href="#直接作用在操作数栈上的指令" class="headerlink" title="直接作用在操作数栈上的指令"></a>直接作用在操作数栈上的指令</h2><h3 id="dup-指令"><a href="#dup-指令" class="headerlink" title="dup 指令"></a>dup 指令</h3><ul><li>复制栈顶元素。</li><li>常用于复制 new 指令所生成的未经初始化的引用。</li></ul><h3 id="pop-指令"><a href="#pop-指令" class="headerlink" title="pop 指令"></a>pop 指令</h3><ul><li>舍弃栈顶元素。</li><li>常用于舍弃调用指令的返回结果。</li></ul><h3 id="dup2-指令和-pop2-指令"><a href="#dup2-指令和-pop2-指令" class="headerlink" title="dup2 指令和 pop2 指令"></a>dup2 指令和 pop2 指令</h3><ul><li>long 类型或 double 类型的值占据两个栈单元。</li><li>dup 指令和 pop 指令只能处理非 long 或非 double 类型的值。</li><li>dup2 指令复制栈顶两个单元。</li><li>pop2 指令弹出栈顶两个单元。</li></ul><h3 id="swap-指令"><a href="#swap-指令" class="headerlink" title="swap 指令"></a>swap 指令</h3><ul><li>交换栈顶两个元素的值。</li></ul><h2 id="直接将常量加载在操作数栈上的指令"><a href="#直接将常量加载在操作数栈上的指令" class="headerlink" title="直接将常量加载在操作数栈上的指令"></a>直接将常量加载在操作数栈上的指令</h2><ul><li><p>常量类型包括</p><ul><li>int 类型</li><li>long 类型</li><li>float 类型</li><li>double 类型</li><li>String 类型</li><li>Class 类型</li></ul></li><li><p>正常情况下，<strong>操作数栈的压入弹出是一条条指令完成</strong>。</p></li><li><strong>例外：抛异常</strong>时会清除操作数栈上的所有内容，然后将异常实例压入操作数栈。</li></ul><p><img src="http://pcrioz2ch.bkt.clouddn.com/JVM/19/instructions_const.jpg" alt="image" title="常数加载指令表"></p><h3 id="int-类型为例"><a href="#int-类型为例" class="headerlink" title="int 类型为例"></a>int 类型为例</h3><ul><li>可以通过 iconst 指令加载 -1 至 5 之间的 int 值。</li><li>可以通过 bipush、sipush 加载一个字节、两个字节所能代表的 int 值。</li><li>可以通过 ldc 加载常量池中的常量值（如 ldc #18 将加载常量池中的第 18 项）。</li></ul><h1 id="局部变量区"><a href="#局部变量区" class="headerlink" title="局部变量区"></a>局部变量区</h1><ul><li>方法栈帧的重要组成部分。</li><li>可以<strong>缓存计算的结果</strong>。</li><li>JVM 将其<strong>当成一个数组</strong>，依次存放 this 指针（仅非静态方法），所传入的参数，字节码中的局部变量。</li><li>long 类型和 double 类型的值占据两个单元，其余类型占据一个单元。</li><li><strong>生命周期没有重合的局部变量可以编排至同一单元。</strong></li><li>存储在局部变量区的值，<strong>需要加载至操作数栈中，才能进行计算</strong>。</li><li>计算得到的<strong>结果再存储至局部变量区</strong>中。</li></ul><p><img src="http://pcrioz2ch.bkt.clouddn.com/JVM/19/instructons_local_variable.jpg" alt="image" title="局部变量区访问指令表"></p><ul><li>局部变量数组的<strong>加载、存储指令</strong>需要<strong>指明</strong>所加载单元的<strong>下标</strong>。</li></ul><h2 id="iinc-M-N-指令"><a href="#iinc-M-N-指令" class="headerlink" title="iinc M N 指令"></a>iinc M N 指令</h2><ul><li>Java 字节码<strong>唯一能够作用于局部变量的指令</strong>。</li><li>M 为非负整数，N 为整数。</li><li>将局部变量数组的第 M 个单元中的 int 值增加 N。</li><li>常用于<strong>更新 for 循环的自增量</strong>。</li></ul><h1 id="Java-字节码简介"><a href="#Java-字节码简介" class="headerlink" title="Java 字节码简介"></a>Java 字节码简介</h1><h2 id="Java-相关指令"><a href="#Java-相关指令" class="headerlink" title="Java 相关指令"></a>Java 相关指令</h2><ul><li>new：后跟目标类，生成该类的未初始化的对象。</li><li>instanceof：后跟目标类，判断栈顶元素是否为目标类 / 接口的实例（是则压入 1，否则压入 0）。</li><li>checkcast：后跟目标类，判断栈顶元素是否为目标类 / 接口的实例（如果不是便抛出异常）。</li><li>athrow：将栈顶异常抛出。</li><li>monitorenter：为栈顶对象加锁。</li><li>monitorexit：为栈顶对象解锁。</li></ul><h2 id="字段访问指令"><a href="#字段访问指令" class="headerlink" title="字段访问指令"></a>字段访问指令</h2><ul><li>静态字段访问指令：getstatic、putstatic。</li><li>实例字段访问指令：getfield、putfield。</li><li>这四条指令均附带用以定位目标字段的信息。</li><li>这四条指令所消耗的操作数栈元素皆不同。</li></ul><h2 id="方法调用指令"><a href="#方法调用指令" class="headerlink" title="方法调用指令"></a>方法调用指令</h2><ul><li>包括 invokestatic，invokespecial，invokevirtual，invokeinterface 和 invokedynamic。</li><li>除 invokedynamic 外，其他的方法调用指令所消耗的操作数栈元素由调用类型和目标方法描述符确定。</li></ul><h2 id="数组相关指令"><a href="#数组相关指令" class="headerlink" title="数组相关指令"></a>数组相关指令</h2><ul><li>newarray：新建基本类型数组。</li><li>anewarray：新建引用类型数组。</li><li>mutianewarray：新建多维数组。</li><li>arraylength：求数组长度。</li><li>数组加载指令。</li><li>数组存储指令。</li></ul><p><img src="http://pcrioz2ch.bkt.clouddn.com/JVM/19/instructions_array.jpg" alt="image" title="数组访问指令表"></p><h2 id="控制流指令"><a href="#控制流指令" class="headerlink" title="控制流指令"></a>控制流指令</h2><ul><li>goto：无条件跳转指令。</li><li>tableswitch：条件跳转指令（针对密集的 cases）。</li><li>lookupswtich：条件跳转指令（针对稀疏的 cases）。</li><li>被废弃的 jsr，ret 指令。</li><li>返回指令。</li></ul><p><img src="http://pcrioz2ch.bkt.clouddn.com/JVM/19/instructons_return.jpg" alt="image" title="返回指令表"></p><ul><li>除返回指令外，其他的控制流指令均附带一个或者多个字节码偏移量，代表需要跳转到的位置。</li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Q：JVM 为什么使用<strong>基于栈的计算模型</strong>？</p><p>A：<strong>实现起来容易</strong>一些，但并<strong>不高效</strong>，因为没有使用底层体系架构的寄存器。在JVM中，只有解释器完整地模拟出该计算模型。即时编译器在解析字节码时会使用一个虚拟的栈计算模型，但是在接下来的编译优化，以及生成的机器码就不用了。</p><hr><p>Q：为什么局部变量要初始化？</p><p>A：①如果是虚拟机初始化局部变量，那么它需要掌握每个变量的生命周期，以便初始化共享同一下标的局部变量。实现起来比较费事。②从代码规范来看，使用未经初始化的局部变量意义不明。</p><hr><p>Q：C/C++ 的汇编指令会有大量寄存器的操作，<strong>Java 的指令会用到寄存器吗</strong>？</p><p>A：<strong>Java 字节码不会</strong>，但是<strong>底下的实现（比如解释执行器，即时编译器）是会的</strong>。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://time.geekbang.org/column/article/14794" target="_blank" rel="noopener">https://time.geekbang.org/column/article/14794</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;操作数栈&quot;&gt;&lt;a href=&quot;#操作数栈&quot; class=&quot;headerlink&quot; title=&quot;操作数栈&quot;&gt;&lt;/a&gt;操作数栈&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解释执行&lt;/strong&gt;过程中，为 Java 方法分配栈桢时，JVM &lt;strong&gt;需要开辟
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-18即时编译器的中间表达形式</title>
    <link href="http://yoursite.com/2018/11/08/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-18%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%A1%A8%E8%BE%BE%E5%BD%A2%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/11/08/笔记-深入拆解Java虚拟机-18即时编译器的中间表达形式/</id>
    <published>2018-11-08T06:41:19.000Z</published>
    <updated>2018-11-08T08:31:11.660Z</updated>
    
    <content type="html"><![CDATA[<p>目测太难看不懂。。。</p><p>待更新</p><p><a href="https://time.geekbang.org/column/article/14270" target="_blank" rel="noopener">https://time.geekbang.org/column/article/14270</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目测太难看不懂。。。&lt;/p&gt;
&lt;p&gt;待更新&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/14270&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://time.geekban
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Android的视图优化方法</title>
    <link href="http://yoursite.com/2018/11/07/Android%E7%9A%84%E8%A7%86%E5%9B%BE%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/11/07/Android的视图优化方法/</id>
    <published>2018-11-07T13:31:51.000Z</published>
    <updated>2018-11-08T07:03:24.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过度绘制（Overdraw）"><a href="#过度绘制（Overdraw）" class="headerlink" title="过度绘制（Overdraw）"></a>过度绘制（Overdraw）</h1><blockquote><p>过度绘制（Overdraw）指的是屏幕上的某个像素在同一帧的时间内被绘制了多次。</p></blockquote><h2 id="检测过度绘制"><a href="#检测过度绘制" class="headerlink" title="检测过度绘制"></a>检测过度绘制</h2><p>Android 中打开过度绘制检测工具的方式：</p><ul><li>开发者选项 ➡ 调试GPU过度绘制 ➡ 显示过度绘制区域</li></ul><p>界面中会出现不同颜色的区域，各颜色代表的意思：</p><p><img src="http://pcrioz2ch.bkt.clouddn.com/android/layout/overdraw.webp" alt="image"></p><h2 id="过度绘制优化"><a href="#过度绘制优化" class="headerlink" title="过度绘制优化"></a>过度绘制优化</h2><h3 id="移除布局中不需要的背景"><a href="#移除布局中不需要的背景" class="headerlink" title="移除布局中不需要的背景"></a>移除布局中不需要的背景</h3><h4 id="移除-Window-默认的-Background"><a href="#移除-Window-默认的-Background" class="headerlink" title="移除 Window 默认的 Background"></a>移除 Window 默认的 Background</h4><p>通常使用的 theme 会包含一个 windowBackground。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@color/background_material_light<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后又给跟布局添加了一个背景，这会导致整个页面被多绘制一次。</p><p>移掉 windowBackground 即可解决，有两种方法。</p><ul><li>在 theme 中设置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 onCreate() 方法中添加</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setBackgroundDrawable(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h4 id="移除控件中不需要的背景"><a href="#移除控件中不需要的背景" class="headerlink" title="移除控件中不需要的背景"></a>移除控件中不需要的背景</h4><ul><li>父布局和子布局设置了相同的 background，选择其一设置即可。</li></ul><h2 id="减少透明度的使用"><a href="#减少透明度的使用" class="headerlink" title="减少透明度的使用"></a>减少透明度的使用</h2><p>View 设置了 alpha 值至少渲染两次。</p><h1 id="布局优化"><a href="#布局优化" class="headerlink" title="布局优化"></a>布局优化</h1><ul><li>LinearLayout 与 RelativeLayout 作用相同时使用 LinearLayout。</li><li>LinearLayout 需要嵌套时使用 RelativeLayout。</li><li>使用 ConstraintLayout。</li></ul><h2 id="使用-Layout-Inspector-查看-layout-层次结构"><a href="#使用-Layout-Inspector-查看-layout-层次结构" class="headerlink" title="使用 Layout Inspector 查看 layout 层次结构"></a>使用 Layout Inspector 查看 layout 层次结构</h2><blockquote><p>Tools &gt; Android &gt; Layout Inspector</p></blockquote><h2 id="使用-lint-优化布局的层次结构"><a href="#使用-lint-优化布局的层次结构" class="headerlink" title="使用 lint 优化布局的层次结构"></a>使用 lint 优化布局的层次结构</h2><blockquote><p>Analyze&gt; Inspect Code</p><blockquote><p>Android&gt; Lint&gt; Performance</p></blockquote></blockquote><h2 id="lt-include-标签"><a href="#lt-include-标签" class="headerlink" title="&lt;include> 标签"></a>&lt;include> 标签</h2><ul><li>只支持 android:layout_ 开头的属性（android:id 是特例）。</li><li>&lt;include> 指定了 id 属性，包含的布局文件根元素也指定了 id 属性，以 &lt;include> 指定的为准。</li></ul><h2 id="lt-merge-标签"><a href="#lt-merge-标签" class="headerlink" title="&lt;merge> 标签"></a>&lt;merge> 标签</h2><ul><li>配合 &lt;include> 标签使用可以减少布局的层级。</li></ul><h2 id="ViewStub"><a href="#ViewStub" class="headerlink" title="ViewStub"></a>ViewStub</h2><ul><li>继承自 View，宽高都是 0，本身不参与任何的布局和绘制过程。</li><li>按需加载所需的布局文件（如网络异常时的界面），使用的时候再加载，提高初始化性能。</li><li>不支持 &lt;merge> 标签。</li><li>使用 inflateedId 属性指定加载的布局 id。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ViewStub</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/stub_import"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:inflatedId</span>=<span class="string">"@+id/panel_import"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="怎样加载？"><a href="#怎样加载？" class="headerlink" title="怎样加载？"></a>怎样加载？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((ViewStub) findViewById(R.id.stub_import)).setVisibility(View.VISIBLE);</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View importPanel = ((ViewStub) findViewById(R.id.stub_import)).inflate();</span><br></pre></td></tr></table></figure><ul><li>加载后 ViewStub 不在属于布局，为 null。</li></ul><h1 id="绘制优化"><a href="#绘制优化" class="headerlink" title="绘制优化"></a>绘制优化</h1><h2 id="onDraw-方法"><a href="#onDraw-方法" class="headerlink" title="onDraw 方法"></a>onDraw 方法</h2><ul><li>不要创建新的布局对象。</li><li>不要做耗时的任务。</li></ul><h3 id="减少自定义-View-的过度绘制"><a href="#减少自定义-View-的过度绘制" class="headerlink" title="减少自定义 View 的过度绘制"></a>减少自定义 View 的过度绘制</h3><ul><li>假如有多张图片叠层显示时，可以使用 <code>Canvas</code> 的 <code>clipRect()</code> 等方法将图片裁剪。</li></ul><h1 id="使用-GPU-呈现模式分析工具"><a href="#使用-GPU-呈现模式分析工具" class="headerlink" title="使用 GPU 呈现模式分析工具"></a>使用 GPU 呈现模式分析工具</h1><p>Android 中打开 GPU 呈现模式分析工具的方式：</p><ul><li>开发者模式 ➡ 监控 ➡ GPU呈现模式</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;过度绘制（Overdraw）&quot;&gt;&lt;a href=&quot;#过度绘制（Overdraw）&quot; class=&quot;headerlink&quot; title=&quot;过度绘制（Overdraw）&quot;&gt;&lt;/a&gt;过度绘制（Overdraw）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;过度绘制（Over
      
    
    </summary>
    
      <category term="Android优化" scheme="http://yoursite.com/categories/Android%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="优化" scheme="http://yoursite.com/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="视图" scheme="http://yoursite.com/tags/%E8%A7%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-1617即时编译</title>
    <link href="http://yoursite.com/2018/11/06/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-1617%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91/"/>
    <id>http://yoursite.com/2018/11/06/笔记-深入拆解Java虚拟机-1617即时编译/</id>
    <published>2018-11-06T02:03:09.000Z</published>
    <updated>2018-11-10T11:38:36.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分层编译模式"><a href="#分层编译模式" class="headerlink" title="分层编译模式"></a>分层编译模式</h1><h2 id="HotSpot-包含的即时编译器："><a href="#HotSpot-包含的即时编译器：" class="headerlink" title="HotSpot 包含的即时编译器："></a>HotSpot 包含的即时编译器：</h2><ol><li>C1</li><li>C2</li><li>Graal（<strong>实验性质</strong>的即时编译器）</li></ol><h2 id="Java-7-以前需要根据程序特性选择对应的即使编译器"><a href="#Java-7-以前需要根据程序特性选择对应的即使编译器" class="headerlink" title="Java 7 以前需要根据程序特性选择对应的即使编译器"></a>Java 7 以前需要根据程序特性选择对应的即使编译器</h2><h3 id="C1"><a href="#C1" class="headerlink" title="C1"></a>C1</h3><ul><li><strong>执行时间较短</strong>的程序。</li><li>对<strong>启动性能</strong>有要求的程序。</li><li>C1 <strong>编译效率较快</strong>。</li><li>对应参数 -client</li></ul><h3 id="C2"><a href="#C2" class="headerlink" title="C2"></a>C2</h3><ul><li><strong>执行时间较长</strong>的程序。</li><li>对<strong>峰值性能</strong>有要求的程序。</li><li>C2 生成<strong>代码的执行效率较快</strong>。</li><li>对应参数 -server</li></ul><h2 id="Java-7-引入分层编译"><a href="#Java-7-引入分层编译" class="headerlink" title="Java 7 引入分层编译"></a>Java 7 引入分层编译</h2><ul><li><strong>综合</strong> C1 的<strong>启动性能</strong>优势和 C2 的<strong>峰值性能</strong>优势。</li><li><p>分层编译将 Java 虚拟机的执行状态<strong>分为 5 个层次</strong>。</p><p>  0.解释执行</p><p>  1.执行不带 profiling 的 C1 代码</p><p>  2.执行仅带方法调用次数和循环回边执行次数 profiling 的C1 代码</p><p>  3.执行带所有 profiling 的 C1 代码</p><p>  4.执行 C2 代码</p></li><li><p>C2 代码的执行效率比 C1 代码高 30% 以上。</p></li><li>C1 执行效率 1 层 &gt; 2 层 &gt; 3 层。（1 层比 2 层稍高，2 层比 3 层高 30% 以上）。</li></ul><h2 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h2><ul><li>profiling：在程序执行过程中，收集能够<strong>反映程序执行状态的数据</strong>。</li><li>这里所收集的数据我们称之为程序的 profile。</li><li>例如 JDK 附带的 hprof。</li><li>profiler 大多通过<strong>注入</strong>或 <strong>JVMTI 事件</strong>来实现。</li><li><strong>第 0 层和第 3 层还会收集用于第 4 层 C2 编译的数据。</strong></li></ul><p>如：分支跳转字节码的分支 profile（branch profile）（跳转次数和不跳转次数），非私有实例方法调用指令，强制类型转换 checkcast 指令，类型测试 instanceof 指令，引用类型的数组存储 aastore 指令的 profile（receiver type profile）。</p><ul><li>分支 profile 和类型 profile 的收集会给应用程序<strong>带来不少性能开销</strong>。</li><li>通常情况，<strong>不会在解释执行中收集</strong>分支 profile 和类型 profile。</li><li><strong>只有触发 C1 编译后</strong>，JVM 认为可能被 C2 编译，才收集这些 profile。</li><li>比较<strong>极端情况</strong>下，JVM 才会在<strong>解释执行时收集</strong> profile（如等待 C1 编译的方法过多时）。</li><li>C2 可以根据收集到的数据进行猜测，作出比较<strong>激进的优化</strong>。</li></ul><h3 id="基于分支-profile-的优化"><a href="#基于分支-profile-的优化" class="headerlink" title="基于分支 profile 的优化"></a>基于分支 profile 的优化</h3><ul><li><p>根据条件跳转指令的分支 profile，即时编译器可以将<strong>从未执行过的分支剪掉</strong>。</p><ul><li><strong>节省编译时间</strong>和部署代码要消耗的<strong>内存空间</strong>。</li><li>将<strong>精简程序的数据流</strong>，触发更多的优化。</li></ul></li><li><p>根据分支 profile，计算每一条程序执行路径的概率，<strong>优化优先处理概率较高的路径</strong>。</p></li></ul><h3 id="基于类型-profile-的优化"><a href="#基于类型-profile-的优化" class="headerlink" title="基于类型 profile 的优化"></a>基于类型 profile 的优化</h3><h4 id="instanceof-测试"><a href="#instanceof-测试" class="headerlink" title="instanceof 测试"></a>instanceof 测试</h4><ul><li>目标类型是 final 类型，只比较测试对象的动态类型是否为该类型。</li><li>目标类型是非 final 类型，依次测试该类，该类的父类、祖先类，该类所直接或者间接实现的接口。</li></ul><h4 id="instanceof-以及方法调用的类型-profile"><a href="#instanceof-以及方法调用的类型-profile" class="headerlink" title="instanceof 以及方法调用的类型 profile"></a>instanceof 以及方法调用的类型 profile</h4><ul><li><strong>假设对象的动态类型仅为类型 profile 中的那几个。</strong></li><li><strong>针对分支 profile 优化。</strong></li><li><strong>对方法调用的条件去虚化内联。</strong></li></ul><h3 id="去优化"><a href="#去优化" class="headerlink" title="去优化"></a>去优化</h3><blockquote><p>即从执行即时编译生成的机器码切换回解释执行。</p></blockquote><ul><li>当<strong>假设失败</strong>的情况下，JVM 将<strong>去优化</strong>。</li><li>生成的机器码中，即时编译器在<strong>假设失败的位置上插入一个陷阱</strong>（trap）。</li><li>陷阱实际上是一条 call 指令，调用至 Java 虚拟机专门负责去优化的方法。</li><li>与普通的 call 指令的区别：去优化方法会更改栈上的返回地址，并不再返回即时编译器生成的机器码中。</li><li><strong>去优化过程非常复杂。</strong></li><li>生成的机器代码和原本的字节码差异非常大。</li><li>需要将当前机器码的执行状态转换至某一字节码之前的执行状态，并从该字节码开始执行。</li><li>这便要求即时编译器在编译过程中<strong>记录好这两种执行状态的映射</strong>。</li></ul><h4 id="去优化的原因与优化无关"><a href="#去优化的原因与优化无关" class="headerlink" title="去优化的原因与优化无关"></a>去优化的原因与优化无关</h4><blockquote><p>即使重新编译也不会改变生成的机器码。</p></blockquote><ul><li>生成的机器码可以在调用去优化方法时传入 Action_None。</li><li>表示<strong>保留这一份机器码</strong>。</li><li>在下一次调用该方法时重新进入这一份机器码。</li></ul><h4 id="去优化的原因与静态分析的结果有关"><a href="#去优化的原因与静态分析的结果有关" class="headerlink" title="去优化的原因与静态分析的结果有关"></a>去优化的原因与静态分析的结果有关</h4><ul><li>生成的机器码可以在调用去优化方法时传入 Action_Recompile。</li><li>表示<strong>不保留这一份机器码</strong>。</li><li>但是可以<strong>不经过重新 profile，直接重新编译</strong>。</li></ul><h4 id="去优化的原因与基于-profile-的激进优化有关"><a href="#去优化的原因与基于-profile-的激进优化有关" class="headerlink" title="去优化的原因与基于 profile 的激进优化有关"></a>去优化的原因与基于 profile 的激进优化有关</h4><ul><li>生成的机器码需要在调用去优化方法时传入 Action_Reinterpret。</li><li>表示<strong>不保留这一份机器码</strong>。</li><li>而且<strong>需要重新收集程序的 profile</strong>。</li></ul><h2 id="编译路径"><a href="#编译路径" class="headerlink" title="编译路径"></a>编译路径</h2><ul><li><strong>1 层和 4 层为终止状态。</strong></li><li>一个方法被终止状态编译后，如果编译后的代码没有失效，JVM 不再发出该方法的编译请求。</li></ul><p><img src="http://pcrioz2ch.bkt.clouddn.com/JVM/16/compile_path.png" alt="image"></p><h3 id="通常情况"><a href="#通常情况" class="headerlink" title="通常情况"></a>通常情况</h3><ul><li>热点方法会被第 3 层的 C1 编译，再被第 4 层的 C2 编译。</li></ul><h3 id="琐碎的方法"><a href="#琐碎的方法" class="headerlink" title="琐碎的方法"></a>琐碎的方法</h3><ul><li><strong>字节数少</strong>，且第 3 层的 profiling <strong>没有可收集的数据</strong>的方法。</li><li>JVM 断定该方法对于 <strong>C1 代码和 C2 代码执行效率相同</strong>。</li><li>在第 3 层编译后，直接用第 1 层的 C1 编译。</li></ul><h3 id="C1-忙碌的情况"><a href="#C1-忙碌的情况" class="headerlink" title="C1 忙碌的情况"></a>C1 忙碌的情况</h3><ul><li>解释执行过程中进行 profiling。</li><li>然后直接由第 4 层的 C2 编译。</li></ul><h3 id="C2-忙碌的情况"><a href="#C2-忙碌的情况" class="headerlink" title="C2 忙碌的情况"></a>C2 忙碌的情况</h3><ul><li>方法先被第 2 层的 C1 编译。</li><li>再被第 3 层的 C1 编译，减少在第 3 层的执行时间。</li></ul><h2 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h2><ul><li>默认开启分层编译。</li><li>不管分层编译是否开启，原本的选择即时编译器的参数都无效（-client 和 -server）。</li><li>关闭分层编译情况下，JVM 采用 C2。</li><li>只使用 C1：使用参数 -XX:TieredStopAtLevel=1，解释执行后直接由 1 层的 C1 编译。</li></ul><h1 id="即时编译的触发"><a href="#即时编译的触发" class="headerlink" title="即时编译的触发"></a>即时编译的触发</h1><ul><li>根据方法的<strong>调用次数</strong>和<strong>循环回边的执行次数</strong>来触发。</li><li>profiling 中包含上述次数。</li><li><strong>解释执行和 C1 代码中增加循环回边计数器的位置不同</strong>，但不会对程序照成影响。</li><li>JVM <strong>不对计数器进行同步</strong>，收集的几次为非精确值。</li><li>即时编译的<strong>触发不需要非常精确的值</strong>。</li><li>不启用分层编译，超过由参数 -XX:CompileThreshold 指定的阈值时（使用 C1 时，该值为 1500；使用 C2 时，该值为 10000），会触发即时编译。</li><li>启用分层编译，JVM 不采用由参数 -XX:CompileThreshold 指定的阈值，使用另一套阈值系统。阈值大小<strong>动态调整</strong>。</li><li>动态调整：比较阈值时，将阈值与某个<strong>系数 s</strong> 相乘。</li><li>该系数与<strong>当前待编译的方法数目</strong>成<strong>正相关</strong>，与<strong>编译线程的数目</strong>成<strong>负相关</strong>。</li><li>64 位 JVM中，默认情况下<strong>编译线程的总数目</strong>根据<strong>处理器数量来调整</strong>，（对应参数 -XX:+CICompilerCountPerCPU，默认为 true；当通过参数 -XX:+CICompilerCount=N 强制设定总编译线程数目时，CICompilerCountPerCPU 将被设置为 false）。</li><li>JVM 将编译线程按照 1:2 的比例分配给 C1 和 C2（至少各为 1 个）。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对于核及以上的机器，总的编译线程的数目为：</span><br><span class="line">n = log2(N) * log2(log2(N)) * 3 / 2</span><br><span class="line">其中 N 为 CPU 核心数目。</span><br></pre></td></tr></table></figure><p>启用分层编译时的具体触发条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当方法调用次数大于由参数 -XX:TierXInvocationThreshold 指定的阈值乘以系数，或者当方法调用次数大于由参数 -XX:TierXMINInvocationThreshold 指定的阈值乘以系数，并且方法调用次数和循环回边次数之和大于由参数 -XX:TierXCompileThreshold 指定的阈值乘以系数时，便会触发 X 层即时编译。</span><br><span class="line"></span><br><span class="line">触发条件为：</span><br><span class="line">i &gt; TierXInvocationThreshold * s || (i &gt; TierXMinInvocationThreshold * s  &amp;&amp; i + b &gt; TierXCompileThreshold * s)</span><br></pre></td></tr></table></figure><h1 id="OSR-编译"><a href="#OSR-编译" class="headerlink" title="OSR 编译"></a>OSR 编译</h1><ul><li>JVM 还存在另一种以<strong>循环为单位</strong>的即时编译（On-Stack-Replacement（OSR）编译）。</li><li><strong>循环回边计数器用来触发</strong>这种类型的编译的。</li><li>不启用分层编译情况，触发 OSR 编译的阈值是由参数 -XX:CompileThreshold 指定的阈值的倍数。</li></ul><p>计算方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(OnStackReplacePercentage - InterpreterProfilePercentage)/100</span><br><span class="line"></span><br><span class="line">其中 -XX:InterpreterProfilePercentage 的默认值为 33，当使用 C1 时 -XX:OnStackReplacePercentage 为 933，当使用 C2 时为 140。</span><br><span class="line">也就是说，默认情况下，C1 的 OSR 编译的阈值为 13500，而 C2 的为 10700。</span><br></pre></td></tr></table></figure><ul><li>启用分层编译的情况下，触发 OSR 编译的阈值则由参数 -XX:TierXBackEdgeThreshold 指定的阈值乘以系数。</li><li>OSR 编译在<strong>正常的应用程序</strong>中<strong>不多见</strong>。它只在<strong>基准测试</strong>时比较<strong>常见</strong>。</li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Q：<strong>为什么不把所有代码都即时编译一下呢？这样程序的执行效率不是更快吗？</strong></p><p>A：即时编译是以方法为单位的。<strong>动态编译比较耗时</strong>，如果花了大量CPU资源编译出来的机器码运行不了几次，就很浪费了。</p><hr><p>Q：为什么要用分层编译呢？<strong>使用最快的编译代码编译器编译的代码不是更好吗？</strong></p><p>A：<strong>机器码越快，需要的编译时间就越长。分层编译是一种折衷的方式</strong>，既能够满足部分不那么热的代码能够在短时间内编译完成，也能满足很热的代码能够拥有最好的优化。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://time.geekbang.org/column/article/14061" target="_blank" rel="noopener">https://time.geekbang.org/column/article/14061</a><br><a href="https://time.geekbang.org/column/article/14070" target="_blank" rel="noopener">https://time.geekbang.org/column/article/14070</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分层编译模式&quot;&gt;&lt;a href=&quot;#分层编译模式&quot; class=&quot;headerlink&quot; title=&quot;分层编译模式&quot;&gt;&lt;/a&gt;分层编译模式&lt;/h1&gt;&lt;h2 id=&quot;HotSpot-包含的即时编译器：&quot;&gt;&lt;a href=&quot;#HotSpot-包含的即时编译器：&quot; c
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>一些简单的Git命令</title>
    <link href="http://yoursite.com/2018/10/21/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84Git%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/10/21/一些简单的Git命令/</id>
    <published>2018-10-21T02:21:31.000Z</published>
    <updated>2018-10-21T12:00:09.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="完整性"><a href="#完整性" class="headerlink" title="完整性"></a>完整性</h1><ul><li>Git 以校验和的方式检测数据完整性。</li><li>Git 中的 commit id 是校验和。</li></ul><h1 id="文件状态和工作区域"><a href="#文件状态和工作区域" class="headerlink" title="文件状态和工作区域"></a>文件状态和工作区域</h1><ul><li>工作区域：<ol><li>工作目录：写代码的区域。</li><li>暂存区：代码 add 后 commit 前所在的区域。</li><li>本地仓库：代码 commit 后所在的区域。</li></ol></li><li>文件状态：<ol><li>已修改：工作目录已修改，代码未 add。</li><li>已暂存：代码已 add，未 commit。</li><li>已提交：代码已 commit。</li></ol></li></ul><h1 id="用户身份"><a href="#用户身份" class="headerlink" title="用户身份"></a>用户身份</h1><ul><li><p>配置个人信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;example@email.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>查看个人信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure></li></ul><h1 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h1><ul><li><p>初始化本地仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></li><li><p>从远程仓库克隆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone ssh/https地址</span><br></pre></td></tr></table></figure></li></ul><h1 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h1><ul><li><p>添加文件到暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure></li><li><p>添加所有文件到暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure></li><li><p>提交暂存区文件到本地仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;say something&quot;</span><br></pre></td></tr></table></figure></li></ul><p>加 -m 表示直接用后面的字符串作为说明，否则跳转编辑器</p><ul><li><p>查看本地仓库提交历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure></li><li><p>查看文件状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><ul><li>Changes to be committed：已暂存、可提交文件</li><li>Untracked files：未暂存文件</li></ul></li><li><p>查看未暂存文件变更细节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure></li><li><p>查看已暂存文件变更细节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --staged</span><br></pre></td></tr></table></figure></li></ul><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><ul><li><p>回到上一个版本（硬回退）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure></li><li><p>回到上一个版本（软回退）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --soft HEAD^</span><br></pre></td></tr></table></figure></li></ul><ol><li>hard 移除仓库中的 commit，暂存区和工作区回到之前的状态。</li><li>soft 移除仓库中的 commit，暂存区和工作区不变。</li></ol><ul><li>查询版本提交记录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure></li></ul><p>①commit id ②执行的命令 ③描述</p><ul><li>回退到指定版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 提交Id</span><br></pre></td></tr></table></figure></li></ul><p>commit id 可以不填全部，git 自动查找。</p><h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h1><ul><li><p>撤销未添加到暂存区的修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout --文件</span><br></pre></td></tr></table></figure></li><li><p>撤销已添加到暂存区的修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD 文件</span><br></pre></td></tr></table></figure></li></ul><h1 id="删除相关操作"><a href="#删除相关操作" class="headerlink" title="删除相关操作"></a>删除相关操作</h1><ul><li><p>删除文件</p><ol><li><p>删除本地文件（文件管理器中删或用 <code>rm</code> 命令）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm 文件</span><br></pre></td></tr></table></figure></li><li><p>确认 git 删除工作区文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm 文件</span><br></pre></td></tr></table></figure></li><li><p>提交</p></li></ol></li><li><p>恢复文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout --文件</span><br></pre></td></tr></table></figure><ul><li>可以恢复未添加到暂存区的修改了的文件</li><li>可以恢复自删除的文件</li></ul></li></ul><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><ul><li><p>关联远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add 自定义远程仓库名 ssh/https地址</span><br></pre></td></tr></table></figure></li><li><p>第一次推送本地仓库到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u 远程仓库名 远程仓库分支名</span><br></pre></td></tr></table></figure></li><li><p>非第一次推送本地仓库到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push 远程仓库名 远程仓库分支</span><br></pre></td></tr></table></figure></li><li><p>从远程仓库拉取数据到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch 远程仓库名</span><br></pre></td></tr></table></figure></li><li><p>将从远程仓库拉取的数据和本地仓库合并</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge 本地分支名</span><br></pre></td></tr></table></figure></li><li><p>从远程仓库拉取数据并合并</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull 远程仓库名 远程分支名</span><br></pre></td></tr></table></figure></li></ul><ol><li>fetch 只拉取远程仓库数据，不更新本地仓库状态。</li><li>pull 拉取远程仓库数据并更新本地仓库状态到远程仓库最新状态。</li><li>pull = fetch + merge</li></ol><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><ul><li><p>创建分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch 分支名</span><br></pre></td></tr></table></figure></li><li><p>切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout 分支名</span><br></pre></td></tr></table></figure></li><li><p>创建并切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b 分支名</span><br></pre></td></tr></table></figure></li><li><p>查看分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure></li><li><p>合并分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch 分支名</span><br></pre></td></tr></table></figure></li><li><p>删除分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d 分支名</span><br></pre></td></tr></table></figure></li></ul><h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><ul><li>解决冲突后不能提交某个文件，只能提交全部文件</li></ul><h1 id="变基（写的不完整，无参考价值）"><a href="#变基（写的不完整，无参考价值）" class="headerlink" title="变基（写的不完整，无参考价值）"></a>变基（写的不完整，无参考价值）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase 分支名</span><br></pre></td></tr></table></figure><ul><li>rebase 失败先解决冲突再执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --continue</span><br></pre></td></tr></table></figure></li></ul><ol><li>变基抛弃原有提交，创建新的对应提交。</li><li>变基的提交历史是一条直线。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;完整性&quot;&gt;&lt;a href=&quot;#完整性&quot; class=&quot;headerlink&quot; title=&quot;完整性&quot;&gt;&lt;/a&gt;完整性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Git 以校验和的方式检测数据完整性。&lt;/li&gt;
&lt;li&gt;Git 中的 commit id 是校验和。&lt;/li&gt;
&lt;/u
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-15Java语法糖与Java编译器</title>
    <link href="http://yoursite.com/2018/10/20/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-15Java%E8%AF%AD%E6%B3%95%E7%B3%96%E4%B8%8EJava%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <id>http://yoursite.com/2018/10/20/笔记-深入拆解Java虚拟机-15Java语法糖与Java编译器/</id>
    <published>2018-10-20T11:02:34.000Z</published>
    <updated>2018-11-10T11:34:52.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动装箱（auto-boxing）与自动拆箱（auto-unboxing）"><a href="#自动装箱（auto-boxing）与自动拆箱（auto-unboxing）" class="headerlink" title="自动装箱（auto-boxing）与自动拆箱（auto-unboxing）"></a>自动装箱（auto-boxing）与自动拆箱（auto-unboxing）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> result = list.get(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上段代码对应的字节码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public int foo();</span><br><span class="line">  Code:</span><br><span class="line">     0: new java/util/ArrayList</span><br><span class="line">     3: dup</span><br><span class="line">     4: invokespecial java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">     7: astore_1</span><br><span class="line">     8: aload_1</span><br><span class="line">     9: iconst_0</span><br><span class="line">    10: invokestatic java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">    13: invokevirtual java/util/ArrayList.add:(Ljava/lang/Object;)Z</span><br><span class="line">    16: pop</span><br><span class="line">    17: aload_1</span><br><span class="line">    18: iconst_0</span><br><span class="line">    19: invokevirtual java/util/ArrayList.get:(I)Ljava/lang/Object;</span><br><span class="line">    22: checkcast java/lang/Integer</span><br><span class="line">    25: invokevirtual java/lang/Integer.intValue:()I</span><br><span class="line">    28: istore_2</span><br><span class="line">    29: iload_2</span><br><span class="line">    30: ireturn</span><br></pre></td></tr></table></figure><ul><li>向泛型参数为 Integer 的 ArrayList 添加 int 值，<strong>字节码中调用了 Integer.valueOf 方法</strong>。</li><li>从泛型参数为 Integer 的 ArrayList 取出元素，程序期待的是 int 值，<strong>字节码中调用了 Integer.intValue 方法</strong>。</li></ul><h1 id="泛型与类型擦除"><a href="#泛型与类型擦除" class="headerlink" title="泛型与类型擦除"></a>泛型与类型擦除</h1><ul><li>在字节码中，ArrayList 的 add 接受的参数类型是 Object，get 方法的返回类型是 Object。</li><li>get 方法<strong>强制向下转换类型</strong>。</li><li><strong>泛型信息</strong>在 JVM 中会<strong>全部擦除</strong>，为了兼容引入泛型之前的代码。</li><li>为限定继承类的泛型参数擦除为 Object，<strong>限定继承类</strong>的泛型参数<strong>擦除为所限定的类</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Number</span>&gt; </span>&#123;</span><br><span class="line"><span class="function">T <span class="title">foo</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上段代码字节码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">T foo(T);</span><br><span class="line">  descriptor: (Ljava/lang/Number;)Ljava/lang/Number;</span><br><span class="line">  flags: (0x0000)</span><br><span class="line">  Code:</span><br><span class="line">    stack=1, locals=2, args_size=2</span><br><span class="line">       0: aload_1</span><br><span class="line">       1: areturn</span><br><span class="line">  Signature: (TT;)TT;</span><br></pre></td></tr></table></figure><ul><li><strong>方法声明和方法签名（Signature）仍存在泛型参数信息</strong>，由 Java 编译器编译其他类时使用。</li></ul><h1 id="桥接方法"><a href="#桥接方法" class="headerlink" title="桥接方法"></a>桥接方法</h1><ul><li>桥接方法标识符包括 ACC_BRIDGE 和 ACC_SYNTHETIC（对于 Java 源代码不可见）。</li><li><strong>不能直接调用桥接方法，但可通过反射调用。</strong></li></ul><h2 id="泛型重写生成桥接方法"><a href="#泛型重写生成桥接方法" class="headerlink" title="泛型重写生成桥接方法"></a>泛型重写生成桥接方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Merchant</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">actionPrice</span><span class="params">(T customer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.0</span>d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIPOnlyMerchant</span> <span class="keyword">extends</span> <span class="title">Merchant</span>&lt;<span class="title">VIP</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">actionPrice</span><span class="params">(VIP customer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.0</span>d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>actionPrice 方法符合 Java 语言的方法重写。</li><li><p>不符合 JVM 方法重写的定义。<br>父类方法描述符(LCustomer)<br>子类方法描述符(LVIP)</p></li><li><p>为了<strong>保证编译的字节码能保留重写的语言</strong>，Java 编译器额外<strong>添加了桥接方法</strong>。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class VIPOnlyMerchant extends Merchant&lt;VIP&gt;</span><br><span class="line">...</span><br><span class="line">  public double actionPrice(VIP);</span><br><span class="line">    descriptor: (LVIP;)D</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">         0: dconst_0</span><br><span class="line">         1: dreturn</span><br><span class="line"></span><br><span class="line">  public double actionPrice(Customer);</span><br><span class="line">    descriptor: (LCustomer;)D</span><br><span class="line">    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC</span><br><span class="line">    Code:</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: aload_1</span><br><span class="line">         2: checkcast class VIP</span><br><span class="line">         5: invokevirtual actionPrice:(LVIP;)D</span><br><span class="line">         8: dreturn</span><br><span class="line"></span><br><span class="line">// 这个桥接方法等同于</span><br><span class="line">public double actionPrice(Customer customer) &#123;</span><br><span class="line">  return actionPrice((VIP) customer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>桥接方法在字节码层面重写父类方法，并通过强制类型转换调用子类方法。</li></ul><h2 id="子类定义与父类参数相同，返回类型为父类方法返回类型的子类生成桥接方法"><a href="#子类定义与父类参数相同，返回类型为父类方法返回类型的子类生成桥接方法" class="headerlink" title="子类定义与父类参数相同，返回类型为父类方法返回类型的子类生成桥接方法"></a>子类定义与父类参数相同，返回类型为父类方法返回类型的子类生成桥接方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class NaiveMerchant extends Merchant</span><br><span class="line">  public java.lang.Double actionPrice(Customer);</span><br><span class="line">    descriptor: (LCustomer;)Ljava/lang/Double;</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=2, args_size=2</span><br><span class="line">         0: dconst_0</span><br><span class="line">         1: invokestatic Double.valueOf:(D)Ljava/lang/Double;</span><br><span class="line">         4: areturn</span><br><span class="line"></span><br><span class="line">  public java.lang.Number actionPrice(Customer);</span><br><span class="line">    descriptor: (LCustomer;)Ljava/lang/Number;</span><br><span class="line">    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=2, args_size=2</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: aload_1</span><br><span class="line">         2: invokevirtual actionPrice:(LCustomer;)Ljava/lang/Double;</span><br><span class="line">         5: areturn</span><br></pre></td></tr></table></figure><ul><li>JVM 允许两个同名、同参数类型、不同返回类型的方法。</li></ul><h1 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>循环从 0 到末尾逐一访问数组元素。</p><h2 id="Iterable-对象"><a href="#Iterable-对象" class="headerlink" title="Iterable 对象"></a>Iterable 对象</h2><p>循环调用 hasNext 和 next 方法 遍历元素。</p><h1 id="字符串-switch"><a href="#字符串-switch" class="headerlink" title="字符串 switch"></a>字符串 switch</h1><ul><li>case 比较字符串的哈希值。</li><li>哈希值相同的字符串用 equals 比较。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://time.geekbang.org/column/article/13781" target="_blank" rel="noopener">https://time.geekbang.org/column/article/13781</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自动装箱（auto-boxing）与自动拆箱（auto-unboxing）&quot;&gt;&lt;a href=&quot;#自动装箱（auto-boxing）与自动拆箱（auto-unboxing）&quot; class=&quot;headerlink&quot; title=&quot;自动装箱（auto-boxing）与
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-14Java虚拟机是怎么实现synchronized的？</title>
    <link href="http://yoursite.com/2018/10/17/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-14Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0synchronized%E7%9A%84%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/10/17/笔记-深入拆解Java虚拟机-14Java虚拟机是怎么实现synchronized的？/</id>
    <published>2018-10-17T06:08:55.000Z</published>
    <updated>2018-11-10T11:35:07.959Z</updated>
    
    <content type="html"><![CDATA[<ul><li>声明 synchronized 的代码块，字节码包含 monitorenter 和 monitorexit 指令。</li><li>这两种指令会<strong>消耗</strong>操作数栈上的<strong>一个引用类型的元素</strong>。</li><li>这个元素是用来加解锁的锁对象。（synchronized 括号里的引用，实例方法是 this，静态方法是 class实例）。</li><li>用 synchronized 标记方法，字节码中方法的访问标记包括 ACC_SYNCHRONIZED。</li></ul><h1 id="monitorenter-和-monitorexit"><a href="#monitorenter-和-monitorexit" class="headerlink" title="monitorenter 和 monitorexit"></a>monitorenter 和 monitorexit</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>可以<strong>抽象</strong>地理解为<strong>每个锁对象</strong>有：</p><ol><li>一个锁<strong>计数器</strong></li><li>一个指向持有该锁的<strong>线程的指针</strong></li></ol><h2 id="执行-monitorenter"><a href="#执行-monitorenter" class="headerlink" title="执行 monitorenter"></a>执行 monitorenter</h2><ul><li><p>计数器为0</p><ul><li>说明没有被其他线程所持有。</li><li>锁对象的持有线程设置为当前线程。</li><li>计数器加 1。</li></ul></li><li><p>计数器不为0</p><ul><li>如果锁对象的持有当前线程，计数器加 1。</li><li>否则等待，直至锁释放。</li></ul></li></ul><h2 id="执行-monitorexit"><a href="#执行-monitorexit" class="headerlink" title="执行 monitorexit"></a>执行 monitorexit</h2><ul><li>锁对象的计数器减 1。</li><li>减为 0 时，锁被释放。</li></ul><h2 id="为什么采用计数器的方式？"><a href="#为什么采用计数器的方式？" class="headerlink" title="为什么采用计数器的方式？"></a>为什么采用计数器的方式？</h2><ul><li><strong>允许同一个线程重复获取同一把锁。</strong></li></ul><blockquote><p>HotSpot 虚拟机中具体的锁实现。</p></blockquote><h1 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h1><ul><li>JVM中<strong>最基础</strong>的锁实现。</li><li>阻塞加锁失败的线程，锁被释放时唤醒。</li><li>阻塞及唤醒依靠操作系统完成，<strong>开销大</strong>。</li></ul><h2 id="自旋状态"><a href="#自旋状态" class="headerlink" title="自旋状态"></a>自旋状态</h2><ul><li>为了尽量<strong>避免昂贵的线程阻塞、唤醒操作</strong>。</li><li>在线程<strong>进入阻塞状态之前</strong>，或被<strong>唤醒后竞争不到锁</strong>的情况下<strong>进入自旋状态</strong>。</li><li><strong>在处理器上空跑</strong>并且轮询锁是否被释放。</li><li>与线程阻塞相比，<strong>自旋状态可能会浪费大量的处理器资源</strong>。</li><li>JVM 不能根据等待时间的长短来选择自旋还是阻塞。</li><li>JVM 采用<strong>自适应自旋</strong>，根据以往自旋等待时能否获得锁，<strong>动态调整自旋时间</strong>（循环数目）。</li></ul><h3 id="自旋状态的副作用：不公平的锁机制"><a href="#自旋状态的副作用：不公平的锁机制" class="headerlink" title="自旋状态的副作用：不公平的锁机制"></a>自旋状态的副作用：<strong>不公平的锁机制</strong></h3><ul><li>阻塞状态的线程，没有办法立刻竞争被释放的锁。</li><li>自旋状态的线程，很有可能优先获得锁。</li></ul><h1 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h1><ul><li><strong>没有锁竞争的情况。</strong></li></ul><h2 id="怎样区分轻量级锁和重量级锁？"><a href="#怎样区分轻量级锁和重量级锁？" class="headerlink" title="怎样区分轻量级锁和重量级锁？"></a>怎样区分轻量级锁和重量级锁？</h2><p>对象头的标记字段（mark word）最后两位用来表示该对象的锁状态。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>00</td><td>轻量级锁</td></tr><tr><td>01</td><td>无锁或偏向锁</td></tr><tr><td>10</td><td>重量级锁</td></tr><tr><td>11</td><td>垃圾回收标记</td></tr></tbody></table><h2 id="加锁操作"><a href="#加锁操作" class="headerlink" title="加锁操作"></a>加锁操作</h2><p>判断是否是重量级锁</p><h3 id="判断为非重量级锁"><a href="#判断为非重量级锁" class="headerlink" title="判断为非重量级锁"></a>判断为非重量级锁</h3><ul><li>在当前线程的当前栈桢中划出一块空间作为该锁的锁记录。</li><li><strong>将锁对象的标记字段复制到锁记录中。</strong></li><li>JVM 尝试<strong>用 CAS 操作替换锁对象的标记字段</strong>。（不懂）<br>比较标记字段是否为X…X01<ul><li>是，替换为锁记录地址，成功获得锁，继续执行。</li><li>否<ul><li>线程重复获得同一把锁，JVM 将锁记录清理，代表锁被重复获取。</li><li><strong>其他线程持有锁，JVM 将该锁膨胀为重量级锁</strong>，阻塞该线程。</li></ul></li></ul></li></ul><h2 id="解锁操作"><a href="#解锁操作" class="headerlink" title="解锁操作"></a>解锁操作</h2><h3 id="锁记录值为-0"><a href="#锁记录值为-0" class="headerlink" title="锁记录值为 0"></a>锁记录值为 0</h3><p>重复进入同一把锁，直接返回。（不懂）</p><h3 id="锁记录值不为-0"><a href="#锁记录值不为-0" class="headerlink" title="锁记录值不为 0"></a>锁记录值不为 0</h3><p>JVM 尝试用 CAS 操作比较标记字段是否为当前锁记录地址</p><ul><li>是，替换为锁记录的值，锁释放。</li><li>否，表示锁已膨胀为重量级锁，进入重量级锁释放过程。</li></ul><h1 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h1><h2 id="加锁操作-1"><a href="#加锁操作-1" class="headerlink" title="加锁操作"></a>加锁操作</h2><ul><li>锁对象支持偏向锁。</li><li>JVM 通过 CAS 操作，将<strong>当前线程地址记录在锁对象的标记字段</strong>，将标记字段<strong>最后三位设为 101</strong>。</li></ul><h3 id="线程请求锁时"><a href="#线程请求锁时" class="headerlink" title="线程请求锁时"></a>线程请求锁时</h3><p>判断锁对象标记字段：</p><ol><li><strong>最后三位是否为 101</strong></li><li>是否<strong>包含当前线程的地址</strong></li><li>epoch 值是否<strong>和锁对象的类的 epoch 值相同</strong></li></ol><ul><li><p>都满足则当前线程持有该偏向锁，直接返回。</p></li><li><p>2 不满足，epoch 值相等时，JVM 需要撤销该偏向锁。</p></li><li><p>2 满足，epoch 值不等时，当前线程可以将该锁重偏向至自己。</p></li></ul><h2 id="epoch-值"><a href="#epoch-值" class="headerlink" title="epoch 值"></a>epoch 值</h2><ul><li>每个类维护一个 epoch 值。</li><li>设置偏向锁时，JVM 要将 epoch 值复制到锁对象标记字段中。</li><li><strong>撤销偏向锁</strong>要求持有偏向锁的<strong>线程到达安全点</strong>，再将偏向锁<strong>替换成轻量级锁</strong>。</li><li>某类锁对象<strong>撤销数超过一个阈值，JVM 宣布该类偏向锁失效</strong>。</li><li>宣布偏向锁失效时，JVM 将该类的 epoch 值加 1。</li><li>为了保证当前持有偏向锁并且已加锁的线程<strong>不丢锁</strong>，<ul><li>JVM <strong>遍历所有线程的 Java 栈</strong>，找出该类已加锁实例，</li><li>将标记字段的 epoch 值加 1（<strong>需要所有线程处于安全点状态</strong>）。</li></ul></li><li><strong>总撤销数超过另一个阈值</strong> JVM 认为<strong>这个类不再适合偏向锁</strong>。<ul><li>JVM 会<strong>撤销该类实例的偏向锁</strong>，</li><li>之后<strong>加锁直接设置轻量级锁</strong>。</li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://time.geekbang.org/column/article/13530" target="_blank" rel="noopener">https://time.geekbang.org/column/article/13530</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;声明 synchronized 的代码块，字节码包含 monitorenter 和 monitorexit 指令。&lt;/li&gt;
&lt;li&gt;这两种指令会&lt;strong&gt;消耗&lt;/strong&gt;操作数栈上的&lt;strong&gt;一个引用类型的元素&lt;/strong&gt;。&lt;/li&gt;

      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-13Java内存模型</title>
    <link href="http://yoursite.com/2018/08/31/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-13Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/08/31/笔记-深入拆解Java虚拟机-13Java内存模型/</id>
    <published>2018-08-31T06:44:23.000Z</published>
    <updated>2018-11-10T11:40:05.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编译器优化的重排序"><a href="#编译器优化的重排序" class="headerlink" title="编译器优化的重排序"></a>编译器优化的重排序</h1><ul><li>保证遵守 as-if-serial 属性。</li><li>操作之间存在数据依赖，不能调整顺序。</li></ul><h1 id="Java-内存模型与-happens-before-关系"><a href="#Java-内存模型与-happens-before-关系" class="headerlink" title="Java 内存模型与 happens-before 关系"></a>Java 内存模型与 happens-before 关系</h1><ul><li>用来描述两个操作的内存可见性。</li><li>操作 X happens-before 操作 Y，X 的结果对于 Y 可见。</li><li>happens-before 关系具有传递性。</li><li>解决这种数据竞争的关键：构造一个跨线程的 happens-before 关系。</li></ul><p>线程间的 happens-before 关系：</p><ol><li>解锁操作 happens-before 之后（时钟顺序）对同一把锁的加锁操作。</li><li>volatile 字段的写操作 happens-before 之后（时钟顺序）对同一字段的读操作。</li><li>线程的启动操作（Thread.starts()） happens-before 该线程的第一个操作。</li><li>线程的最后一个操作 happens-before 它的终止事件（Thread.isAlive() 或 Thread.join()）。</li><li>线程对其他线程的中断操作 happens-before 被中断线程所收到的中断事件（即被中断线程的 InterruptedException 异常，或者第三个线程针对被中断线程的 Thread.interrupted 或者 Thread.isInterrupted 调用）。</li><li>构造器中的最后一个操作 happens-before 析构器的第一个操作。</li></ol><h1 id="Java-内存模型的底层实现"><a href="#Java-内存模型的底层实现" class="headerlink" title="Java 内存模型的底层实现"></a>Java 内存模型的底层实现</h1><ul><li>通过内存屏障（memory barrier）禁止重排序。</li></ul><p>开不太懂，之后再看</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://time.geekbang.org/column/article/13484" target="_blank" rel="noopener">https://time.geekbang.org/column/article/13484</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编译器优化的重排序&quot;&gt;&lt;a href=&quot;#编译器优化的重排序&quot; class=&quot;headerlink&quot; title=&quot;编译器优化的重排序&quot;&gt;&lt;/a&gt;编译器优化的重排序&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;保证遵守 as-if-serial 属性。&lt;/li&gt;
&lt;li&gt;操作之间存
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-1112垃圾回收</title>
    <link href="http://yoursite.com/2018/08/29/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-1112%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://yoursite.com/2018/08/29/笔记-深入拆解Java虚拟机-1112垃圾回收/</id>
    <published>2018-08-29T07:50:47.000Z</published>
    <updated>2018-08-31T06:43:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何辨别对象是否死亡"><a href="#如何辨别对象是否死亡" class="headerlink" title="如何辨别对象是否死亡"></a>如何辨别对象是否死亡</h1><h2 id="引用计数法（reference-counting）"><a href="#引用计数法（reference-counting）" class="headerlink" title="引用计数法（reference counting）"></a>引用计数法（reference counting）</h2><ul><li>为每个对象添加一个引用计数器。</li><li>为 0 时死亡。</li></ul><p>缺点：</p><ol><li>需要<strong>额外的空间</strong>。</li><li>更新操作<strong>繁琐</strong>。</li><li><strong>无法处理循环引用对象</strong>（a 与 b 相互引用）。</li></ol><h2 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h2><p>GC Roots（由堆外指向堆内的引用）包括不限于：</p><ol><li>Java 方法栈桢中的局部变量。</li><li>已加载类的静态变量。</li><li>JNI handles。<strong>不懂</strong></li><li>已启动且未停止的 Java 线程。</li></ol><p>可达性分析算法：</p><ol><li>将一系列 GC Roots 作为初始的存活对象合集（live set）。</li><li>标记（mark）：从该合集出发，探索所有能够被该集合引用到的对象，将其加入到该集合中。</li><li>未被探索到的对象是死亡的，是可以回收的。</li></ol><p>需要解决的问题：</p><p>在多线程环境下，其他线程可能会更新已经访问过的对象中的引用，从而造成误报（将引用设置为 null）或者漏报（将引用设置为未被访问过的对象）。</p><h1 id="Stop-the-world"><a href="#Stop-the-world" class="headerlink" title="Stop-the-world"></a>Stop-the-world</h1><ul><li>停止其他非垃圾回收线程的工作，直到完成垃圾回收。</li><li>暂停时间（GC pause）。</li></ul><h1 id="安全点（safepoint）"><a href="#安全点（safepoint）" class="headerlink" title="安全点（safepoint）"></a>安全点（safepoint）</h1><blockquote><p>当 Java 虚拟机收到 Stop-the-world 请求，它便会等待所有的线程都到达安全点，才允许请求 Stop-the-world 的线程进行独占的工作。</p></blockquote><h2 id="本地代码的安全点"><a href="#本地代码的安全点" class="headerlink" title="本地代码的安全点"></a>本地代码的安全点</h2><ul><li>Java 程序通过 JNI 执行<strong>本地代码</strong>时，这段代码<strong>不访问 Java 对象、调用 Java 方法或者返回至原 Java 方法</strong>。</li><li><strong>API 入口处进行安全点检测</strong>（safepoint poll）。</li></ul><h2 id="解释执行字节码的安全点"><a href="#解释执行字节码的安全点" class="headerlink" title="解释执行字节码的安全点"></a>解释执行字节码的安全点</h2><ul><li><strong>字节码与字节码之间</strong>。</li><li>有安全点请求时，<strong>执行一条字节码进行一次安全点检测</strong>。</li></ul><h2 id="执行即时编译器生成的机器码"><a href="#执行即时编译器生成的机器码" class="headerlink" title="执行即时编译器生成的机器码"></a>执行即时编译器生成的机器码</h2><ul><li>生成机器码时，<strong>即时编译器插入安全点检测</strong>。</li><li>HotSpot 虚拟机：在生成代码的方法出口、非计数循环的循环回边（back-edge）处插入。</li></ul><h2 id="阻塞的线程属于安全点。"><a href="#阻塞的线程属于安全点。" class="headerlink" title="阻塞的线程属于安全点。"></a>阻塞的线程属于安全点。</h2><h1 id="垃圾回收的三种方式"><a href="#垃圾回收的三种方式" class="headerlink" title="垃圾回收的三种方式"></a>垃圾回收的三种方式</h1><h2 id="清除（sweep）"><a href="#清除（sweep）" class="headerlink" title="清除（sweep）"></a>清除（sweep）</h2><blockquote><p>把死亡对象所占据的内存标记为空闲内存，记录在一个空闲列表（free list）中。</p></blockquote><p><img src="http://pcrioz2ch.bkt.clouddn.com/JVM/11/sweep.png" alt="image"></p><p>缺点：</p><ol><li>造成<strong>内存碎片</strong>。</li><li>堆中对象必须是连续分布的，可能出现总空闲内存足够，无法分配的极端情况。</li><li>分配<strong>效率较低</strong>。</li></ol><h2 id="压缩（compact）"><a href="#压缩（compact）" class="headerlink" title="压缩（compact）"></a>压缩（compact）</h2><blockquote><p>把存活的对象聚集到内存区域的起始位置，留下一段连续的内存空间。</p></blockquote><p><img src="http://pcrioz2ch.bkt.clouddn.com/JVM/11/compact.png" alt="image"></p><p>缺点：</p><ol><li>压缩算法有<strong>性能开销</strong>。</li></ol><h2 id="复制（copy）"><a href="#复制（copy）" class="headerlink" title="复制（copy）"></a>复制（copy）</h2><blockquote><p>把内存区域分为两等分，分别用两个指针 from 和 to 来维护，只是用 from 指针指向的内存区域来分配内存。当发生垃圾回收时，把存活的对象复制到 to 指针指向的内存区域中，交换 from 指针和 to 指针的内容。</p></blockquote><p><img src="http://pcrioz2ch.bkt.clouddn.com/JVM/11/copy.png" alt="image"></p><p>缺点：</p><p>1.堆空间的使用<strong>效率极其低下</strong>。</p><p>12未更新</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://time.geekbang.org/column/article/13091" target="_blank" rel="noopener">https://time.geekbang.org/column/article/13091</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何辨别对象是否死亡&quot;&gt;&lt;a href=&quot;#如何辨别对象是否死亡&quot; class=&quot;headerlink&quot; title=&quot;如何辨别对象是否死亡&quot;&gt;&lt;/a&gt;如何辨别对象是否死亡&lt;/h1&gt;&lt;h2 id=&quot;引用计数法（reference-counting）&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-10Java对象的内存分布</title>
    <link href="http://yoursite.com/2018/08/29/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-10Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/"/>
    <id>http://yoursite.com/2018/08/29/笔记-深入拆解Java虚拟机-10Java对象的内存分布/</id>
    <published>2018-08-29T01:38:58.000Z</published>
    <updated>2018-08-29T02:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-新建对象的方式"><a href="#Java-新建对象的方式" class="headerlink" title="Java 新建对象的方式"></a>Java 新建对象的方式</h1><ul><li>new 语句</li><li>反射</li><li>Object.clone方法</li><li>反序列化</li><li>Unsafe.allocateInstance方法</li></ul><h1 id="压缩指针"><a href="#压缩指针" class="headerlink" title="压缩指针"></a>压缩指针</h1><h2 id="对象头（object-header）"><a href="#对象头（object-header）" class="headerlink" title="对象头（object header）"></a>对象头（object header）</h2><ul><li>每个 Java 对象都有。</li><li>由<strong>标记字段、类型指针</strong>构成。</li><li>标记字段：存储 Java 虚拟机有关该对象的运行数据（如哈希码、GC 信息、锁信息）。</li><li>类型指针：指向该对象的类。</li><li>64 位Java虚拟机中，对象头占 16 个字节。</li></ul><h2 id="压缩指针-1"><a href="#压缩指针-1" class="headerlink" title="压缩指针"></a>压缩指针</h2><ul><li>开启压缩指针：-XX:+UseCompressedOops（默认开启）。</li><li><strong>将堆中原本 64 位的 Java 对象指针压缩成 32 位。</strong></li><li>类型指针也被压缩成 32 位，<strong>对象头的大小从 16 字节降至 12 字节。</strong></li><li>还可以作用于<strong>引用类型的字段</strong>，<strong>引用类型数组</strong>。</li></ul><h1 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h1><ul><li>虚拟机选项 -XX:ObjectAlignmentInBytes，默认值为 8。</li><li>默认情况，堆中对象（包括字段之间）起始地址要对齐至 8 的倍数。</li><li>浪费掉的空间称之为对象间的填充（padding）。</li><li>32 位压缩指针可以寻址到 2 的 35 次方个字节（32GB 地址空间，超过 32GB 会关闭压缩指针）。</li><li>压缩指针解引用：左移 3 位，再加上一个固定偏移量。</li><li>字段内存对齐的一个原因：<strong>让字段只出现在同一 CPU 的缓存行中</strong>。<strong>不懂</strong></li></ul><h1 id="字段重排列"><a href="#字段重排列" class="headerlink" title="字段重排列"></a>字段重排列</h1><ul><li>Java 虚拟机重新分配字段的顺序，达到内存对齐</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://time.geekbang.org/column/article/13081" target="_blank" rel="noopener">https://time.geekbang.org/column/article/13081</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-新建对象的方式&quot;&gt;&lt;a href=&quot;#Java-新建对象的方式&quot; class=&quot;headerlink&quot; title=&quot;Java 新建对象的方式&quot;&gt;&lt;/a&gt;Java 新建对象的方式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;new 语句&lt;/li&gt;
&lt;li&gt;反射&lt;/li&gt;

      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-0809JVM是怎么实现invokedynamic的？</title>
    <link href="http://yoursite.com/2018/08/10/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-0809JVM%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0invokedynamic%E7%9A%84%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/08/10/笔记-深入拆解Java虚拟机-0809JVM是怎么实现invokedynamic的？/</id>
    <published>2018-08-10T07:07:18.000Z</published>
    <updated>2018-08-29T01:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="invokedynamic"><a href="#invokedynamic" class="headerlink" title="invokedynamic"></a>invokedynamic</h1><ul><li>Java 7 引入的新指令</li><li>调用机制抽象出调用点的概念</li><li>允许将调用点链接至任意符合条件的方法上</li></ul><h1 id="MethodHandle（方法句柄）"><a href="#MethodHandle（方法句柄）" class="headerlink" title="MethodHandle（方法句柄）"></a>MethodHandle（方法句柄）</h1><ul><li>Java 7 引入</li><li>是一个强类型的，能被直接执行的引用</li><li>可以指向静态方法、实例方法、构造器、字段</li></ul><h2 id="方法句柄的类型（MethodType）"><a href="#方法句柄的类型（MethodType）" class="headerlink" title="方法句柄的类型（MethodType）"></a>方法句柄的类型（MethodType）</h2><ul><li>由参数类型、返回类型组成</li><li>确认方法句柄是否适配的唯一关键</li><li>不关心方法的类名或方法名</li></ul><h2 id="方法句柄的创建"><a href="#方法句柄的创建" class="headerlink" title="方法句柄的创建"></a>方法句柄的创建</h2><p>通过 MethodHandles.Lookup 类</p><ul><li>使用反射的 Method 类查找</li><li>Lookup.findStatic 查找调用 invokestatic 的方法</li><li>Lookup.findVirtual 查找调用 invokevirtual 和 invokeinterface 的方法</li><li>Lookup.findSpecial 查找调用 invokespecial 的方法</li></ul><h2 id="方法句柄的权限"><a href="#方法句柄的权限" class="headerlink" title="方法句柄的权限"></a>方法句柄的权限</h2><ul><li>权限检查在创建阶段完成</li><li>实际调用过程中不检查</li><li>取决于 Lookup 对象创建位置（不是方法句柄创建位置）</li></ul><h2 id="方法句柄的操作"><a href="#方法句柄的操作" class="headerlink" title="方法句柄的操作"></a>方法句柄的操作</h2><h3 id="invokeExact"><a href="#invokeExact" class="headerlink" title="invokeExact"></a>invokeExact</h3><ul><li>严格匹配参数类型（需要显示向上转型）</li><li>@PolymorphicSignature 根据传入参数的声明类型来生成方法描述符（而不是目标方法）</li></ul><h3 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h3><ul><li>自动适配参数类型</li><li>会调用 MethodHandle.asType 方法生成一个适配器方法句柄</li></ul><h3 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h3><p>通过生成另一个充当适配器的方法句柄来实现</p><p>捕获类型的 Lambda 表达式用增操作实现</p><p>增操作可以实现方法的柯里化</p><h2 id="方法句柄的实现"><a href="#方法句柄的实现" class="headerlink" title="方法句柄的实现"></a>方法句柄的实现</h2><p>HotSpot 虚拟机中方法句柄调用的具体实现，只讨论DirectMethodHandle</p><h3 id="invokeExact-1"><a href="#invokeExact-1" class="headerlink" title="invokeExact"></a>invokeExact</h3><ul><li>调用至一个共享的、与方法句柄类型相关的特殊适配器中</li><li>适配器是一个 LambdaForm</li></ul><h2 id="方法句柄的缺点"><a href="#方法句柄的缺点" class="headerlink" title="方法句柄的缺点"></a>方法句柄的缺点</h2><ul><li>与反射一样是简介调用</li><li>无法内联</li></ul><p><strong>未更新09</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;invokedynamic&quot;&gt;&lt;a href=&quot;#invokedynamic&quot; class=&quot;headerlink&quot; title=&quot;invokedynamic&quot;&gt;&lt;/a&gt;invokedynamic&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Java 7 引入的新指令&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-07JVM是如何实现反射的？</title>
    <link href="http://yoursite.com/2018/08/06/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-07JVM%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%B0%84%E7%9A%84%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/08/06/笔记-深入拆解Java虚拟机-07JVM是如何实现反射的？/</id>
    <published>2018-08-06T06:33:36.000Z</published>
    <updated>2018-08-15T12:44:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反射调用的实现"><a href="#反射调用的实现" class="headerlink" title="反射调用的实现"></a>反射调用的实现</h1><h2 id="Methond-invoke"><a href="#Methond-invoke" class="headerlink" title="Methond.invoke"></a>Methond.invoke</h2><p>委派给MethodAccessor接口处理。</p><p>MethodAccessor两个具体实现：</p><ol><li>本地方法实现反射调用</li><li>委派模式</li></ol><h2 id="委派实现"><a href="#委派实现" class="headerlink" title="委派实现"></a>委派实现</h2><ul><li>每个Method实例的<strong>第一次反射调用</strong>会生成一个委派实现。</li><li>委派的具体实现是一个<strong>本地实现</strong>。</li><li>Java的反射调用机制还设立了另一种动态生成字节码的<strong>动态实现</strong>。</li><li>采用委派实现，是为了能够在本地实现以及动态实现中切换。</li></ul><h3 id="动态实现"><a href="#动态实现" class="headerlink" title="动态实现"></a>动态实现</h3><ul><li><p><strong>运行效率比本地实现要快20倍。</strong><br>因为动态实现无需经过Java到C++再到Java的切换。</p></li><li><p>由于<strong>生成字节码十分耗时</strong>，仅<strong>调用一次</strong>的话，反而是<strong>本地实现要快上3到4倍</strong>。</p></li></ul><h3 id="Inflation"><a href="#Inflation" class="headerlink" title="Inflation"></a>Inflation</h3><p>Java虚拟机设置了一个阈值15（可以通过 -Dsun.reflect.inflationThreshold= 来调整）。<br>当某个反射调用的方法调用次数在 15 之下时，采用本地实现。<br>当达到 15 时，便开始动态生成字节码，并将委派实现的委派对象切换至动态实现，这个过程称之为Inflation。</p><p>反射调用的Inflation机制是可以通过参数（-Dsun.reflect.noInflation=true）关闭。<br>反射调用一开始便会直接生成动态实现，而不会使用委派实现或者本地实现。</p><h1 id="反射调用的开销"><a href="#反射调用的开销" class="headerlink" title="反射调用的开销"></a>反射调用的开销</h1><h2 id="反射api性能开销"><a href="#反射api性能开销" class="headerlink" title="反射api性能开销"></a>反射api性能开销</h2><ul><li>Class.getMethod会遍历该类的公有方法。如果没有匹配到，遍历父类的公有方法。</li><li>以getMethod为代表的查找方法操作，会返回查找得到结果的一份拷贝。<br><strong>避免在热点代码中使用返回Method数组的方法，减少不必要的堆空间消耗。</strong></li></ul><h2 id="反射本身性能开销"><a href="#反射本身性能开销" class="headerlink" title="反射本身性能开销"></a>反射本身性能开销</h2><h3 id="Method-invoke是一个变长参数方法。"><a href="#Method-invoke是一个变长参数方法。" class="headerlink" title="Method.invoke是一个变长参数方法。"></a>Method.invoke是一个变长参数方法。</h3><p>Java编译器会在方法调用处生成一个长度为传入参数个数的Object数组，并将传入参数一一存储进该数组中。</p><h3 id="Java编译器会对传入的基本类型参数自动装箱。"><a href="#Java编译器会对传入的基本类型参数自动装箱。" class="headerlink" title="Java编译器会对传入的基本类型参数自动装箱。"></a>Java编译器会对传入的基本类型参数自动装箱。</h3><p>Java 缓存了 [-128, 127] 中所有整数所对应的 Integer 对象。<br>需要自动装箱的整数在这个范围之内时，返回缓存的 Integer，否则需要新建一个Integer对象。</p><p>解决方法：</p><ul><li><strong>扩大缓存范围</strong>（对应参数-Djava.lang.Integer.IntegerCache.high=128）。</li><li><strong>在外部缓存</strong>自动装箱得到的Integer对象。</li></ul><p><strong>上面两条除了带来性能开销外，还可能占用堆内存，使得 GC 更加频繁。</strong></p><h3 id="权限检查带来的开销"><a href="#权限检查带来的开销" class="headerlink" title="权限检查带来的开销"></a>权限检查带来的开销</h3><ul><li>关闭权限检查。<br>setAccessible(true)</li></ul><h3 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h3><ul><li>没有方法内联优化</li><li>逃逸分析不起效</li></ul><p>具体代码具体分析。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://time.geekbang.org/column/article/12192" target="_blank" rel="noopener">https://time.geekbang.org/column/article/12192</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反射调用的实现&quot;&gt;&lt;a href=&quot;#反射调用的实现&quot; class=&quot;headerlink&quot; title=&quot;反射调用的实现&quot;&gt;&lt;/a&gt;反射调用的实现&lt;/h1&gt;&lt;h2 id=&quot;Methond-invoke&quot;&gt;&lt;a href=&quot;#Methond-invoke&quot; cla
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-【工具篇】常用工具介绍</title>
    <link href="http://yoursite.com/2018/08/05/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E3%80%90%E5%B7%A5%E5%85%B7%E7%AF%87%E3%80%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/08/05/笔记-深入拆解Java虚拟机-【工具篇】常用工具介绍/</id>
    <published>2018-08-05T06:41:13.000Z</published>
    <updated>2018-08-15T12:45:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javap：查阅Java字节码"><a href="#javap：查阅Java字节码" class="headerlink" title="javap：查阅Java字节码"></a>javap：查阅Java字节码</h1><blockquote><p>javap是一个能够将class文件反汇编成人类可读格式的工具。</p></blockquote><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-p</td><td>追加打印私有字段和方法</td></tr><tr><td>-v</td><td>尽可能打印所有信息</td></tr><tr><td>-c</td><td>只打印方法</td></tr><tr><td>-g</td></tr></tbody></table><h2 id="v选项输出"><a href="#v选项输出" class="headerlink" title="-v选项输出"></a>-v选项输出</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><table><thead><tr><th>字段</th><th>作用</th></tr></thead><tbody><tr><td>minor version: 0，major version: 54</td><td>class文件的版本号</td></tr><tr><td>flags: (0x0021) ACC_PUBLIC, ACC_SUPER</td><td>该类的访问权限</td></tr><tr><td>this_class: #7</td><td>该类名字</td></tr><tr><td>super_class: #8</td><td>父类名字</td></tr><tr><td>interfaces: 0</td><td>实现接口数目</td></tr><tr><td>fields: 4</td><td>字段数目</td></tr><tr><td>methods: 2</td><td>方法数目</td></tr><tr><td>attributes: 1</td><td>属性数目</td></tr></tbody></table><ul><li><p>属性：class文件所携带的辅助信息（class文件的源文件的名称）。<br>这类信息通常被用于 Java 虚拟机的验证和运行，以及 Java 程序的调试，一般无须深入了解。</p></li><li><p>class文件的版本号：编译生成该class文件时所用的JRE版本。<br>由较新的JRE版本中的javac编译而成的class文件，不能在旧版本的JRE上跑，否则，会出现异常（java.lang.UnsupportedClassVersionError）。</p></li></ul><h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><ul><li>每一项都有一个对应的索引（如 #1）。</li><li>可能引用其他的常量池项（#1 = Methodref #8.#23）。</li></ul><h3 id="字段区域"><a href="#字段区域" class="headerlink" title="字段区域"></a>字段区域</h3><table><thead><tr><th>字段</th><th>作用</th></tr></thead><tbody><tr><td>descriptor: I</td><td>字段的类型</td></tr><tr><td>flags: (0x0002) ACC_PRIVATE</td><td>访问权限</td></tr></tbody></table><ul><li>声明为static final的基本类型或者字符串字段，字段区域包括它的常量值。</li></ul><h3 id="方法区域"><a href="#方法区域" class="headerlink" title="方法区域"></a>方法区域</h3><ul><li>方法描述符</li><li>访问权限</li><li>代码区域</li></ul><h4 id="代码区域"><a href="#代码区域" class="headerlink" title="代码区域"></a>代码区域</h4><h5 id="开头声明"><a href="#开头声明" class="headerlink" title="开头声明"></a>开头声明</h5><table><thead><tr><th>字段</th><th>作用</th></tr></thead><tbody><tr><td>stack=2</td><td>操作数栈</td></tr><tr><td>locals=3</td><td>局部变量数目最大值</td></tr><tr><td>args_size=1</td><td>接收参数的个数</td></tr></tbody></table><ul><li>局部变量指的是字节码中的局部变量。</li><li>后面接着的是字节码，每条字节码均标注了对应的偏移量（bytecode index，BCI）。</li></ul><h5 id="异常表"><a href="#异常表" class="headerlink" title="异常表"></a>异常表</h5><ul><li>使用偏移量定位每个异常处理器所监控的范围（由 from 到 to 的代码区域）。</li><li>异常处理器的起始位置（target）。</li><li>声明所捕获的异常类型（type）。<br>any指代任意异常类型。</li></ul><h5 id="行数表"><a href="#行数表" class="headerlink" title="行数表"></a>行数表</h5><ul><li>Java源程序到字节码偏移量的映射。</li></ul><h6 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h6><ul><li>Java程序中每个局部变量的名字、类型以及作用域。</li></ul><p>注：行数表和局部变量表均属于调试信息。Java虚拟机不要求class文件必备这些信息。</p><h5 id="字节码操作数栈映射表"><a href="#字节码操作数栈映射表" class="headerlink" title="字节码操作数栈映射表"></a>字节码操作数栈映射表</h5><ul><li>字节码跳转后操作数栈的分布情况。<br>一般被Java虚拟机用于验证所加载的类，和即时编译相关的一些操作，正常情况下，无须深入了解。</li></ul><h1 id="OpenJDK项目Code-Tools：实用小工具集"><a href="#OpenJDK项目Code-Tools：实用小工具集" class="headerlink" title="OpenJDK项目Code Tools：实用小工具集"></a>OpenJDK项目Code Tools：实用小工具集</h1><h2 id="ASMTools"><a href="#ASMTools" class="headerlink" title="ASMTools"></a>ASMTools</h2><h3 id="反汇编操作命令"><a href="#反汇编操作命令" class="headerlink" title="反汇编操作命令"></a>反汇编操作命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jdis.Main Foo.class &gt; Foo.jasm</span><br></pre></td></tr></table></figure><h3 id="汇编操作命令"><a href="#汇编操作命令" class="headerlink" title="汇编操作命令"></a>汇编操作命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jasm.Main Foo.jasm</span><br></pre></td></tr></table></figure><h2 id="JOL"><a href="#JOL" class="headerlink" title="JOL"></a>JOL</h2><h3 id="查阅Java虚拟机中对象的内存分布"><a href="#查阅Java虚拟机中对象的内存分布" class="headerlink" title="查阅Java虚拟机中对象的内存分布"></a>查阅Java虚拟机中对象的内存分布</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar /path/to/jol-cli-0.9-full.jar internals java.util.HashMap</span><br><span class="line">$ java -jar /path/to/jol-cli-0.9-full.jar estimates java.util.HashMap</span><br></pre></td></tr></table></figure><h1 id="ASM：Java字节码框架"><a href="#ASM：Java字节码框架" class="headerlink" title="ASM：Java字节码框架"></a>ASM：Java字节码框架</h1><ul><li>ASM既可以生成新的class文件，也可以修改已有的class文件。</li><li>辅助类ASMifier，接收一个 class文件，输出一段生成该class文件原始字节数组的代码。</li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tryBlock;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> catchBlock;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> finallyBlock;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> methodExit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tryBlock = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            catchBlock = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            finallyBlock = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        methodExit = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后用javap查阅字节码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">$ javac Foo.java</span><br><span class="line">$ javap -p -v Foo</span><br><span class="line">Classfile ../Foo.class</span><br><span class="line">  Last modified ..; size 541 bytes</span><br><span class="line">  MD5 checksum 3828cdfbba56fea1da6c8d94fd13b20d</span><br><span class="line">  Compiled from &quot;Foo.java&quot;</span><br><span class="line">public class Foo</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 54</span><br><span class="line">  flags: (0x0021) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #7                          // Foo</span><br><span class="line">  super_class: #8                         // java/lang/Object</span><br><span class="line">  interfaces: 0, fields: 4, methods: 2, attributes: 1</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #8.#23         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = Fieldref           #7.#24         // Foo.tryBlock:I</span><br><span class="line">   #3 = Fieldref           #7.#25         // Foo.finallyBlock:I</span><br><span class="line">   #4 = Class              #26            // java/lang/Exception</span><br><span class="line">   #5 = Fieldref           #7.#27         // Foo.catchBlock:I</span><br><span class="line">   #6 = Fieldref           #7.#28         // Foo.methodExit:I</span><br><span class="line">   #7 = Class              #29            // Foo</span><br><span class="line">   #8 = Class              #30            // java/lang/Object</span><br><span class="line">   #9 = Utf8               tryBlock</span><br><span class="line">  #10 = Utf8               I</span><br><span class="line">  #11 = Utf8               catchBlock</span><br><span class="line">  #12 = Utf8               finallyBlock</span><br><span class="line">  #13 = Utf8               methodExit</span><br><span class="line">  #14 = Utf8               &lt;init&gt;</span><br><span class="line">  #15 = Utf8               ()V</span><br><span class="line">  #16 = Utf8               Code</span><br><span class="line">  #17 = Utf8               LineNumberTable</span><br><span class="line">  #18 = Utf8               test</span><br><span class="line">  #19 = Utf8               StackMapTable</span><br><span class="line">  #20 = Class              #31            // java/lang/Throwable</span><br><span class="line">  #21 = Utf8               SourceFile</span><br><span class="line">  #22 = Utf8               Foo.java</span><br><span class="line">  #23 = NameAndType        #14:#15        // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #24 = NameAndType        #9:#10         // tryBlock:I</span><br><span class="line">  #25 = NameAndType        #12:#10        // finallyBlock:I</span><br><span class="line">  #26 = Utf8               java/lang/Exception</span><br><span class="line">  #27 = NameAndType        #11:#10        // catchBlock:I</span><br><span class="line">  #28 = NameAndType        #13:#10        // methodExit:I</span><br><span class="line">  #29 = Utf8               Foo</span><br><span class="line">  #30 = Utf8               java/lang/Object</span><br><span class="line">  #31 = Utf8               java/lang/Throwable</span><br><span class="line">&#123;</span><br><span class="line">  private int tryBlock;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: (0x0002) ACC_PRIVATE</span><br><span class="line"></span><br><span class="line">  private int catchBlock;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: (0x0002) ACC_PRIVATE</span><br><span class="line"></span><br><span class="line">  private int finallyBlock;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: (0x0002) ACC_PRIVATE</span><br><span class="line"></span><br><span class="line">  private int methodExit;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: (0x0002) ACC_PRIVATE</span><br><span class="line"></span><br><span class="line">  public Foo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line"></span><br><span class="line">  public void test();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=3, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: iconst_0</span><br><span class="line">         2: putfield      #2                  // Field tryBlock:</span><br><span class="line">         5: aload_0</span><br><span class="line">         6: iconst_2</span><br><span class="line">         7: putfield      #3                  // Field finallyBlock:I</span><br><span class="line">        10: goto          35</span><br><span class="line">        13: astore_1</span><br><span class="line">        14: aload_0</span><br><span class="line">        15: iconst_1</span><br><span class="line">        16: putfield      #5                  // Field catchBlock:I</span><br><span class="line">        19: aload_0</span><br><span class="line">        20: iconst_2</span><br><span class="line">        21: putfield      #3                  // Field finallyBlock:I</span><br><span class="line">        24: goto          35</span><br><span class="line">        27: astore_2</span><br><span class="line">        28: aload_0</span><br><span class="line">        29: iconst_2</span><br><span class="line">        30: putfield      #3                  // Field finallyBlock:I</span><br><span class="line">        33: aload_2</span><br><span class="line">        34: athrow</span><br><span class="line">        35: aload_0</span><br><span class="line">        36: iconst_3</span><br><span class="line">        37: putfield      #6                  // Field methodExit:I</span><br><span class="line">        40: return</span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             0     5    13   Class java/lang/Exception</span><br><span class="line">             0     5    27   any</span><br><span class="line">            13    19    27   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 9: 0</span><br><span class="line">        line 13: 5</span><br><span class="line">        line 14: 10</span><br><span class="line">        line 10: 13</span><br><span class="line">        line 11: 14</span><br><span class="line">        line 13: 19</span><br><span class="line">        line 14: 24</span><br><span class="line">        line 13: 27</span><br><span class="line">        line 14: 33</span><br><span class="line">        line 15: 35</span><br><span class="line">        line 16: 40</span><br><span class="line">      StackMapTable: number_of_entries = 3</span><br><span class="line">        frame_type = 77 /* same_locals_1_stack_item */</span><br><span class="line">          stack = [ class java/lang/Exception ]</span><br><span class="line">        frame_type = 77 /* same_locals_1_stack_item */</span><br><span class="line">          stack = [ class java/lang/Throwable ]</span><br><span class="line">        frame_type = 7 /* same */</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;Foo.java&quot;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://time.geekbang.org/column/article/12423" target="_blank" rel="noopener">https://time.geekbang.org/column/article/12423</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;javap：查阅Java字节码&quot;&gt;&lt;a href=&quot;#javap：查阅Java字节码&quot; class=&quot;headerlink&quot; title=&quot;javap：查阅Java字节码&quot;&gt;&lt;/a&gt;javap：查阅Java字节码&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;javap
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yoursite.com/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
</feed>
