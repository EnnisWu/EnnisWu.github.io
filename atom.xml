<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ennis Wu</title>
  
  <subtitle>ARTPOP = artistic revolution through the potential of pop.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ennis.info/"/>
  <updated>2019-05-03T13:34:34.013Z</updated>
  <id>http://blog.ennis.info/</id>
  
  <author>
    <name>Ennis L.M. Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LayoutInflater中inflate方法各参数作用（二）</title>
    <link href="http://blog.ennis.info/2019/05/03/LayoutInflater%E4%B8%ADinflate%E6%96%B9%E6%B3%95%E5%90%84%E5%8F%82%E6%95%B0%E4%BD%9C%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://blog.ennis.info/2019/05/03/LayoutInflater中inflate方法各参数作用（二）/</id>
    <published>2019-05-03T12:40:47.000Z</published>
    <updated>2019-05-03T13:34:34.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="View-inflate-和-LayoutInflater-inflate"><a href="#View-inflate-和-LayoutInflater-inflate" class="headerlink" title="View.inflate 和 LayoutInflater.inflate"></a>View.inflate 和 LayoutInflater.inflate</h1><p>View.inflate 实际上上只是简单的包装了 LayoutInflater.inflate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> View <span class="title">inflate</span><span class="params">(Context context, @LayoutRes <span class="keyword">int</span> resource, ViewGroup root)</span> </span>&#123;</span><br><span class="line">    LayoutInflater factory = LayoutInflater.from(context);</span><br><span class="line">    <span class="keyword">return</span> factory.inflate(resource, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LayoutInflater-inflate-两个参数和三个参数的区别"><a href="#LayoutInflater-inflate-两个参数和三个参数的区别" class="headerlink" title="LayoutInflater.inflate 两个参数和三个参数的区别"></a>LayoutInflater.inflate 两个参数和三个参数的区别</h1><h2 id="两个参数"><a href="#两个参数" class="headerlink" title="两个参数"></a>两个参数</h2><p>两个参数的方法实际上也只是简单调用了三个参数的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(@LayoutRes <span class="keyword">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inflate(resource, root, root != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当 ViewGroup 传入 null 时调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inflate(resource, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><ul><li>当 ViewGroup 传入非 null 时调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inflate(resource, root, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h2 id="三个参数"><a href="#三个参数" class="headerlink" title="三个参数"></a>三个参数</h2><h3 id="ViewGroup-传入-null"><a href="#ViewGroup-传入-null" class="headerlink" title="ViewGroup 传入 null"></a>ViewGroup 传入 null</h3><ul><li>View 没有父布局</li><li>View 没有 LayoutParams</li><li>返回该 View</li><li>attachToRoot 参数无效</li></ul><h3 id="ViewGroup-传入非-null"><a href="#ViewGroup-传入非-null" class="headerlink" title="ViewGroup 传入非 null"></a>ViewGroup 传入非 null</h3><h4 id="attachToRoot-为-true"><a href="#attachToRoot-为-true" class="headerlink" title="attachToRoot 为 true"></a>attachToRoot 为 true</h4><ul><li>View 添加到父布局</li><li>View 设置 LayoutParams 参数</li><li>返回父布局</li></ul><h4 id="attachToRoot-为-true-1"><a href="#attachToRoot-为-true-1" class="headerlink" title="attachToRoot 为 true"></a>attachToRoot 为 true</h4><ul><li>View 没有父布局</li><li>View 设置 LayoutParams 参数</li><li>返回该 View</li></ul><h1 id="ViewGroup-最好传入非-null-的情况"><a href="#ViewGroup-最好传入非-null-的情况" class="headerlink" title="ViewGroup 最好传入非 null 的情况"></a>ViewGroup 最好传入非 null 的情况</h1><p>如果在知道父布局的情况下，ViewGroup 最好传入父布局而不是 null，因为 View 的 LayoutParams 参数始终需要通过父布局来确定。</p><p>当调用 ViewGroup.addView 时，如果添加的 View 的 LayoutParams 为 null，会调用 generateDefaultLayoutParams 方法生成一个宽高都包裹的 LayoutParams，这可能并不是我们想要的效果，因为在 xml 中指定的宽高等属性将失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View child, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot add a null child view to a ViewGroup"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    LayoutParams params = child.getLayoutParams();</span><br><span class="line">    <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">        params = generateDefaultLayoutParams();</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"generateDefaultLayoutParams() cannot return null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addView(child, index, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="attachToRoot-最好传入-true-的情况"><a href="#attachToRoot-最好传入-true-的情况" class="headerlink" title="attachToRoot 最好传入 true 的情况"></a>attachToRoot 最好传入 true 的情况</h1><ul><li>自定义组件</li></ul><h1 id="attachToRoot-必须传入-false-的情况"><a href="#attachToRoot-必须传入-false-的情况" class="headerlink" title="attachToRoot 必须传入 false 的情况"></a>attachToRoot 必须传入 false 的情况</h1><p>否则会抛出异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: The specified child already has a parent. You must call removeView() on the child&apos;s parent first.</span><br></pre></td></tr></table></figure><h2 id="不负责-View-的展示时，attachToRoot-必须传入-false"><a href="#不负责-View-的展示时，attachToRoot-必须传入-false" class="headerlink" title="不负责 View 的展示时，attachToRoot 必须传入 false"></a>不负责 View 的展示时，attachToRoot 必须传入 false</h2><ul><li>RecyclerView#onCreateViewHolder</li></ul><p>由 RecyclerView 控制展示 ViewHolder 的 View</p><ul><li>Fragment#onCreateView</li></ul><p>由 FragmentManager 控制显示 Fragment</p><h2 id="View-已有父布局时，attachToRoot-必须传入-false"><a href="#View-已有父布局时，attachToRoot-必须传入-false" class="headerlink" title="View 已有父布局时，attachToRoot 必须传入 false"></a>View 已有父布局时，attachToRoot 必须传入 false</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/u012702547/article/details/52628453" target="_blank" rel="noopener">https://blog.csdn.net/u012702547/article/details/52628453</a><br><a href="https://www.jianshu.com/p/342890fcf5c9" target="_blank" rel="noopener">https://www.jianshu.com/p/342890fcf5c9</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;View-inflate-和-LayoutInflater-inflate&quot;&gt;&lt;a href=&quot;#View-inflate-和-LayoutInflater-inflate&quot; class=&quot;headerlink&quot; title=&quot;View.inflate 和 Lay
      
    
    </summary>
    
      <category term="Android视图" scheme="http://blog.ennis.info/categories/Android%E8%A7%86%E5%9B%BE/"/>
    
    
      <category term="Android" scheme="http://blog.ennis.info/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>转-Android类加载</title>
    <link href="http://blog.ennis.info/2019/03/18/%E8%BD%AC-Android%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    <id>http://blog.ennis.info/2019/03/18/转-Android类加载/</id>
    <published>2019-03-18T11:11:04.000Z</published>
    <updated>2019-03-18T12:49:48.997Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="https://juejin.im/post/5c31c3ebf265da614e2c3b68" target="_blank" rel="noopener">https://juejin.im/post/5c31c3ebf265da614e2c3b68</a></p><h1 id="JVM-类加载机制"><a href="#JVM-类加载机制" class="headerlink" title="JVM 类加载机制"></a>JVM 类加载机制</h1><p>JVM 将描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型。</p><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><blockquote><p>类从被加载到虚拟机内存中开始，到卸载出内存为止。</p></blockquote><p>整个生命周期包括 7 个阶段：<strong>加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）</strong>。</p><p>验证、准备、解析3个部分统称为连接（Linking）。</p><p><img src="/images/posts/android/类加载/class_lifecycle.jpg" alt="各阶段发生顺序" title="各阶段发生顺序"></p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><ul><li><p><strong>对于任意一个类，需要由加载它的类加载器和这个类本身一同确立其在 JVM 中的唯一性。</strong></p></li><li><p>每一个类加载器，都拥有一个独立的类名称空间。</p></li></ul><blockquote><p>比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个 Class 文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。 </p></blockquote><h2 id="JDK-8-及之前的双亲委派模型"><a href="#JDK-8-及之前的双亲委派模型" class="headerlink" title="JDK 8 及之前的双亲委派模型"></a>JDK 8 及之前的双亲委派模型</h2><ul><li><p>Java 应用程序一般由 3 种类加载器互相配合进行加载。</p></li><li><p>如果有必要，可以自定义的类加载器。</p></li></ul><p><img src="/images/posts/android/类加载/jvm_classloader.jpg" alt="类加载器之间的关系" title="类加载器之间的关系"></p><ul><li><p>这种层次关系称为类加载器的双亲委派模型（Parents Delegation Model）。</p></li><li><p><strong>双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应当有父类加载器。</strong></p></li><li><p><strong>父子关系一般不会以继承（Inheritance）的关系来实现，而是都使用组合（Composition）关系来复用父加载器的代码。</strong></p></li></ul><h3 id="双亲委派模型的工作过程"><a href="#双亲委派模型的工作过程" class="headerlink" title="双亲委派模型的工作过程"></a>双亲委派模型的工作过程</h3><ol><li><p>一个类加载器收到类加载的请求。</p></li><li><p><strong>把这个请求委派给父类加载器去完成。</strong></p></li><li><p>父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）。</p></li><li><p>子加载器尝试自己加载。</p></li></ol><h3 id="启动类加载器（Bootstrap-ClassLoader）"><a href="#启动类加载器（Bootstrap-ClassLoader）" class="headerlink" title="启动类加载器（Bootstrap ClassLoader）"></a>启动类加载器（Bootstrap ClassLoader）</h3><ul><li><p>加载以下类库到 JVM 内存</p><ul><li><p>存放在 ＜JAVA_HOME＞\lib 目录中的</p></li><li><p>或者被 -Xbootclasspath 参数所指定的路径中的</p></li><li><p>并且是虚拟机识别的类库</p></li></ul></li><li><p>无法被 Java 程序直接引用。</p></li><li><p>把加载请求委派给引导类加载器，直接使用 null 代替。</p></li></ul><h3 id="扩展类加载器（Extension-ClassLoader）"><a href="#扩展类加载器（Extension-ClassLoader）" class="headerlink" title="扩展类加载器（Extension ClassLoader）"></a>扩展类加载器（Extension ClassLoader）</h3><ul><li><p>由 sun.misc.Launcher $ExtClassLoader 实现。</p></li><li><p>加载以下类库到 JVM 内存</p><ul><li><p>存放在＜JAVA_HOME＞\lib\ext目录中的</p></li><li><p>或者被 java.ext.dirs 系统变量所指定的路径中的所有类库</p></li></ul></li><li><p>开发者可以直接使用扩展类加载器。</p></li></ul><h3 id="应用程序类加载器（Application-ClassLoader）"><a href="#应用程序类加载器（Application-ClassLoader）" class="headerlink" title="应用程序类加载器（Application ClassLoader）"></a>应用程序类加载器（Application ClassLoader）</h3><blockquote><p>也称为系统类加载器</p></blockquote><ul><li><p>由 sun.misc.Launcher $App-ClassLoader 实现。</p></li><li><p>加载以下类库到 JVM 内存</p><ul><li>用户类路径（ClassPath）上所指定的类库</li></ul></li><li><p>开发者可以直接使用这个类加载器。</p></li><li><p>如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p></li></ul><h3 id="JDK-9-双亲委派模型的更改"><a href="#JDK-9-双亲委派模型的更改" class="headerlink" title="JDK 9 双亲委派模型的更改"></a>JDK 9 双亲委派模型的更改</h3><ul><li><p>Java9 引入了模块系统，并且略微更改了上述的类加载器。</p></li><li><p>扩展类加载器被改名为平台类加载器（platform class loader）。</p></li><li><p>Java SE中除了少数几个关键模块，比如说 java.base 是由启动类加载器加载之外，其他的模块均由平台类加载器所加载。</p></li></ul><h1 id="Android-类加载机制"><a href="#Android-类加载机制" class="headerlink" title="Android 类加载机制"></a>Android 类加载机制</h1><ul><li><p><strong>本质上 Android 和传统的 JVM 是一样的。</strong></p><ul><li><p>需要通过类加载器将目标类加载到内存</p></li><li><p>类加载器之间符合双亲委派模型</p></li><li><p>类有对应的生命周期</p></li></ul></li><li><p>基于移动设备的特点，如内存以及电量等诸多方面跟一般的 PC 设备都有本质的区别，Google 开发了更符合移动设备的用于执行 Java 代码的虚拟机，即 Dalvik 和 ART。</p></li><li><p>Android 5.0 开始采用 ART 虚拟机替代 Dalvik。</p></li><li><p><strong>ART 从 dex 字节码加载类。将多个 Class 文件合并成一个 classes.dex 文件。</strong></p></li></ul><p><img src="/images/posts/android/类加载/android_classloader.jpg" alt="类加载器关系图" title="类加载器关系图"></p><ul><li><p>在 8.0 之前</p><ul><li><p>DexClassLoader：能够加载未安装的 apk</p></li><li><p>PathClassLoader：只能加载系统中已经安装过的 apk</p></li></ul></li><li><p>从 8.0 开始</p><ul><li><p>PathClassLoader 也可以加载未安装的 apk</p></li><li><p>PathClassLoader 可以完全替代 DexClassLoader</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自：&lt;a href=&quot;https://juejin.im/post/5c31c3ebf265da614e2c3b68&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/5c31c3ebf265da614e2c3b
      
    
    </summary>
    
      <category term="Android" scheme="http://blog.ennis.info/categories/Android/"/>
    
    
      <category term="Android" scheme="http://blog.ennis.info/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java并发之synchronized</title>
    <link href="http://blog.ennis.info/2019/02/18/Java%E5%B9%B6%E5%8F%91%E4%B9%8Bsynchronized/"/>
    <id>http://blog.ennis.info/2019/02/18/Java并发之synchronized/</id>
    <published>2019-02-18T06:24:12.000Z</published>
    <updated>2019-03-30T06:54:33.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="锁机制的特性"><a href="#锁机制的特性" class="headerlink" title="锁机制的特性"></a>锁机制的特性</h1><ul><li>互斥性</li><li>可见性</li></ul><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><h2 id="修饰代码块"><a href="#修饰代码块" class="headerlink" title="修饰代码块"></a>修饰代码块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(object) &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(类.class) &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h2><ul><li>成员方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(该类.class) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="锁的是对象还是代码？"><a href="#锁的是对象还是代码？" class="headerlink" title="锁的是对象还是代码？"></a>锁的是对象还是代码？</h1><ul><li><strong>synchronized 锁的是对象</strong>，线程只有拿到了锁对象才能执行 synchronized 那段代码，否则阻塞等待。</li></ul><p>也就是说，如果锁对象是 this，那么同步机制仅对该对象有效。</p><ul><li><p>线程拿到锁对象后，<strong>其他线程可以执行非 synchronized 代码</strong>。</p></li><li><p>同时访问 static synchronized 方法和 synchronized 方法可以并行。</p></li></ul><p>前者锁对象是 Class 对象，后者锁对象是 this，锁对象不同，两个方法可以并行。</p><h2 id="如果想锁全局怎么办"><a href="#如果想锁全局怎么办" class="headerlink" title="如果想锁全局怎么办"></a>如果想锁全局怎么办</h2><ul><li><strong>锁住该类对应的 Class 对象。</strong></li></ul><p>Class 类比较特殊，每个类都会有一个对应的 Class 对象且唯一，由 JVM 维护。</p><ul><li>提供一个公用的锁对象。（例如声明为 static 的字段）</li></ul><h1 id="synchronized-的性质"><a href="#synchronized-的性质" class="headerlink" title="synchronized 的性质"></a>synchronized 的性质</h1><h2 id="可重入性"><a href="#可重入性" class="headerlink" title="可重入性"></a>可重入性</h2><ul><li><p><strong>同一线程的外层函数获得锁之后，内层函数可以直接再次获取该锁。</strong></p></li><li><p>可避免死锁、提升封装性。</p></li></ul><p>线程从 A 方法进入 B 方法时不需要释放锁后重新申请，可直接获得锁对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">methodB();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>同一个方法是可重入的。</p></li><li><p><strong>可重入不要求是同一个方法。</strong></p></li><li><p><strong>可重入不要求是同一个类中的。</strong></p></li></ul><h2 id="不可中断性"><a href="#不可中断性" class="headerlink" title="不可中断性"></a>不可中断性</h2><ul><li><p>如果锁对象被其他线程获得，只能阻塞等待。</p></li><li><p>如果锁对象永远不被释放，只能永远等待。</p></li></ul><h1 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h1><ul><li><p><strong>锁对象不能为 null。</strong></p></li><li><p><strong>synchronized 关键字不能被继承。</strong></p></li></ul><p>父类中的 synchronized 修饰方法，子类重写该方法时，默认情况不同步，必须显示的使用 synchronized 关键字。</p><ul><li><p>抽象方法不能使用 synchronized 关键字。</p></li><li><p>构造方法不能使用 synchronized 关键字，但可以使用 <code>synchronized(this) {}</code>。</p></li><li><p>synchronized 有系统开销，尽量减小锁的粒度（作用域范围）。</p></li><li><p>避免死锁。</p></li></ul><h1 id="synchronized-实现原理（字节码）"><a href="#synchronized-实现原理（字节码）" class="headerlink" title="synchronized 实现原理（字节码）"></a>synchronized 实现原理（字节码）</h1><blockquote><p><a href="/2018/10/17/笔记-深入拆解Java虚拟机-14Java虚拟机是怎么实现synchronized的？">详细实现原理</a></p></blockquote><ul><li><p>同步块使用 monitorenter 和 moniterexit 指令。</p></li><li><p>同步方法使用修饰符 ACC_SYNCHRONIZED 。</p></li><li><p>同步本质上都是通过监视器（monitor）提供支持。</p></li><li><p>所有对象都有一个自己的监视器（monitor）。</p></li><li><p>本地内存中共享变量副本发生变化后，解锁之前将本地内存中共享变量的值刷新到主存。</p></li><li><p>其他线程获取到锁后，去主内存中读取该共享变量的新值。</p></li></ul><h2 id="可重入性原理"><a href="#可重入性原理" class="headerlink" title="可重入性原理"></a>可重入性原理</h2><ul><li><p>锁对象监视器计数为 0 时，线程进入监视器，并设置计数器 为 1。（monitorenter）</p></li><li><p>线程重入监视器时，计数器 +1。（monitorenter）</p></li><li><p>线程退出监视器时，计数器 -1。（monitorexit）</p></li><li><p>如果监视器与其他线程关联，该线程阻塞等待，直到监视器计数器为 0。</p></li></ul><h1 id="synchronized-的缺陷"><a href="#synchronized-的缺陷" class="headerlink" title="synchronized 的缺陷"></a>synchronized 的缺陷</h1><ul><li><p><strong>效率低</strong>：试图获得锁时<strong>不能设定超时</strong>，<strong>不能中断</strong>。</p></li><li><p><strong>不灵活</strong>：加锁和解锁的<strong>时机和条件单一</strong>。</p></li><li><p><strong>无法知道是否成功获取到锁。</strong></p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/594a24defe88c2006aa01f1c" target="_blank" rel="noopener">https://juejin.im/post/594a24defe88c2006aa01f1c</a></p><p><a href="https://blog.csdn.net/xiao__gui/article/details/8188833" target="_blank" rel="noopener">https://blog.csdn.net/xiao__gui/article/details/8188833</a></p><p><a href="https://www.jianshu.com/p/a499d13ca702" target="_blank" rel="noopener">https://www.jianshu.com/p/a499d13ca702</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;锁机制的特性&quot;&gt;&lt;a href=&quot;#锁机制的特性&quot; class=&quot;headerlink&quot; title=&quot;锁机制的特性&quot;&gt;&lt;/a&gt;锁机制的特性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;互斥性&lt;/li&gt;
&lt;li&gt;可见性&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;用法&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Java" scheme="http://blog.ennis.info/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.ennis.info/tags/Java/"/>
    
      <category term="面试" scheme="http://blog.ennis.info/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Java基础" scheme="http://blog.ennis.info/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java多线程" scheme="http://blog.ennis.info/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Android在子线程中更新UI</title>
    <link href="http://blog.ennis.info/2019/02/17/Android%E5%9C%A8%E5%AD%90%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%9B%B4%E6%96%B0UI/"/>
    <id>http://blog.ennis.info/2019/02/17/Android在子线程中更新UI/</id>
    <published>2019-02-17T02:21:05.000Z</published>
    <updated>2019-03-24T07:37:35.489Z</updated>
    
    <content type="html"><![CDATA[<p>源码版本 SDK 28</p><p>Android 中控件都是线程不安全的，Google <strong>规范</strong>只能在主线程中更新 UI，在子线程中发送网络请求。假如在子线程中更新 UI，会抛出异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android.view.ViewRootImpl$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.</span><br><span class="line">        at android.view.ViewRootImpl.checkThread(ViewRootImpl.java:7753)</span><br></pre></td></tr></table></figure><p>但如果运行下面这段代码，你会发现程序完美运行，没有任何问题，为什么这时却又可以在子线程更新 UI 了呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    Log.d(<span class="string">"子线程更新UI"</span>, <span class="string">"onCreate"</span>);</span><br><span class="line">    Log.d(<span class="string">"子线程更新UI"</span>, Thread.currentThread().getId()</span><br><span class="line">            + Thread.currentThread().getName());</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    textView = findViewById(R.id.text_view);</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Log.d(<span class="string">"子线程更新UI"</span>, Thread.currentThread().getId()</span><br><span class="line">                    + Thread.currentThread().getName());</span><br><span class="line">            textView.setText(String.valueOf(System.currentTimeMillis()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们将子线程 sleep 1 秒呢，这时便抛出了上述不能更新 UI 的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    Log.d(<span class="string">"子线程更新UI"</span>, <span class="string">"onCreate"</span>);</span><br><span class="line">    Log.d(<span class="string">"子线程更新UI"</span>, Thread.currentThread().getId()</span><br><span class="line">            + Thread.currentThread().getName());</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    textView = findViewById(R.id.text_view);</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            Log.d(<span class="string">"子线程更新UI"</span>, Thread.currentThread().getId()</span><br><span class="line">                    + Thread.currentThread().getName());</span><br><span class="line">            textView.setText(String.valueOf(System.currentTimeMillis()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="为什么在-onCreate-中在子线程可以更新-UI"><a href="#为什么在-onCreate-中在子线程可以更新-UI" class="headerlink" title="为什么在 onCreate 中在子线程可以更新 UI"></a>为什么在 onCreate 中在子线程可以更新 UI</h1><p>TextView.setText 的调用过程是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TextView.setText </span><br><span class="line">-&gt; TextView.checkForRelayout</span><br><span class="line">-&gt; View.invalidate </span><br><span class="line">-&gt; View.invalidateInternal </span><br><span class="line">-&gt; ViewGroup.invalidateChild</span><br><span class="line">-&gt; ViewParent.invalidateChildInParent <span class="comment">//这里会不断Loop去取上一个结点的mParent</span></span><br><span class="line">-&gt; ViewRootImpl.invalidateChildInParent <span class="comment">//DecorView的mParent是ViewRootImpl</span></span><br><span class="line">-&gt; ViewRootImpl.checkThread <span class="comment">//在这里执行checkThread，如果非UI线程则抛出异常</span></span><br></pre></td></tr></table></figure><h2 id="ViewRootImpl-checkThread"><a href="#ViewRootImpl-checkThread" class="headerlink" title="ViewRootImpl.checkThread"></a>ViewRootImpl.checkThread</h2><p>检查线程的逻辑是<strong>检查当前线程是否为创建 ViewRootImpl 对象的线程</strong>，因为一般情况 ViewRootImpl 对象由系统在主线程中创建，<strong>即一般情况检查是否为主线程</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mThread != Thread.currentThread()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CalledFromWrongThreadException(</span><br><span class="line">                <span class="string">"Only the original thread that created a view hierarchy can touch its views."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewRootImpl</span><span class="params">(Context context, Display display)</span> </span>&#123;</span><br><span class="line">    mThread = Thread.currentThread();</span><br></pre></td></tr></table></figure><h2 id="View-invalidateInternal"><a href="#View-invalidateInternal" class="headerlink" title="View.invalidateInternal"></a>View.invalidateInternal</h2><p><code>View.invalidateInternal</code> 方法中有这样一段，它会判断 mAttachInfo 和 mParent 均不为空时才会调用 <code>ViewGroup.invalidateChild</code> ，onCreate 时 View 的 mAttachInfo 字段还未被赋值，此时为 null，所以<strong>此时更新 UI 未执行到 ViewRootImpl.checkThread 方法，未检查线程，所以更新 UI 成功</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">final</span> AttachInfo ai = mAttachInfo;</span><br><span class="line"><span class="keyword">final</span> ViewParent p = mParent;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; ai != <span class="keyword">null</span> &amp;&amp; l &lt; r &amp;&amp; t &lt; b) &#123;</span><br><span class="line">    <span class="keyword">final</span> Rect damage = ai.mTmpInvalRect;</span><br><span class="line">    damage.set(l, t, r, b);</span><br><span class="line">    p.invalidateChild(<span class="keyword">this</span>, damage);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="mAttachInfo-什么时候被赋值？"><a href="#mAttachInfo-什么时候被赋值？" class="headerlink" title="mAttachInfo 什么时候被赋值？"></a>mAttachInfo 什么时候被赋值？</h1><p>当我们将子线程 sleep 一定时间后更新 UI 发现抛出异常，最简单的解释就是 View 的 mAttachInfo 字段已被赋值。</p><p>那 mAttachInfo 是何时被赋值的？</p><p>ViewRootImpl 对根节点 DecorView <strong>执行 performTraversals 时</strong>，调用 dispatchAttachedToWindow 对所有 View 赋值 mAttachInfo。（类似 measure，layout，draw 的递归调用）。</p><p>而 ViewRootImpl 执行 performTraversals 是<strong>在 Activity.onResume 之后</strong>，所以当子线程试图更新 UI 时，如果在 performTraversals 之前更新 UI 是可以成功的，当 mAttachInfo 字段已被赋值后便会抛出异常。</p><p>我们可以通过打印日志验证</p><p><img src="/images/posts/android/UI/子线程/logcat1.png" alt=""></p><h1 id="在子线程中更新-UI"><a href="#在子线程中更新-UI" class="headerlink" title="在子线程中更新 UI"></a>在子线程中更新 UI</h1><p>由上述可知<strong>子线程中可以更新 UI</strong>，如下面这段代码就可以完美运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runOnChildThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Looper.prepare();</span><br><span class="line">            <span class="keyword">final</span> TextView textView = <span class="keyword">new</span> MyTextView(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">            Log.d(<span class="string">"子线程更新UI"</span>, Thread.currentThread().getId()</span><br><span class="line">                    + Thread.currentThread().getName() + <span class="string">"创建TextView"</span>);</span><br><span class="line">            textView.setText(<span class="string">"子线程"</span> + System.currentTimeMillis());</span><br><span class="line">            textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    Log.d(<span class="string">"子线程更新UI"</span>, Thread.currentThread().getId()</span><br><span class="line">                            + Thread.currentThread().getName() + <span class="string">"点击TextView"</span>);</span><br><span class="line">                    textView.setText(<span class="string">"子线程"</span> + System.currentTimeMillis());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            WindowManager.LayoutParams layoutParams = <span class="keyword">new</span> WindowManager.LayoutParams();</span><br><span class="line">            <span class="comment">//设置为透明，默认效果是黑色</span></span><br><span class="line">            layoutParams.format = PixelFormat.TRANSPARENT;</span><br><span class="line">            layoutParams.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">            layoutParams.width = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">            <span class="comment">//设置window透传，也就是当前view所在的window不阻碍底层的window获得触摸事件</span></span><br><span class="line">            layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</span><br><span class="line">                    | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;</span><br><span class="line">            MainActivity.<span class="keyword">this</span>.getWindowManager().addView(textView, layoutParams);</span><br><span class="line">            Looper.loop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以打印日志验证，点击 TextView 时，UI 在子线程中更新。</p><p><img src="/images/posts/android/UI/子线程/logcat2.png" alt=""></p><p>当子线程满足以下条件时便可以在子线程中更新 UI</p><ol><li><p><strong>创建子线程的根视图</strong></p></li><li><p><strong>根视图添加到 WindowManager</strong></p></li><li><p><strong>创建子线程的 Looper</strong></p></li></ol><h1 id="实际项目请在主线程中更新-UI！！！"><a href="#实际项目请在主线程中更新-UI！！！" class="headerlink" title="实际项目请在主线程中更新 UI！！！"></a><strong>实际项目请在主线程中更新 UI！！！</strong></h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.zhihu.com/question/24764972" target="_blank" rel="noopener">https://www.zhihu.com/question/24764972</a></p><p><a href="https://ivanljt.github.io/blog/2017/08/16/Android%20%E4%B8%AD%E5%AD%90%E7%BA%BF%E7%A8%8B%E7%9C%9F%E7%9A%84%E4%B8%8D%E8%83%BD%E6%9B%B4%E6%96%B0UI%E5%90%97/" target="_blank" rel="noopener">https://ivanljt.github.io/blog/2017/08/16/Android%20%E4%B8%AD%E5%AD%90%E7%BA%BF%E7%A8%8B%E7%9C%9F%E7%9A%84%E4%B8%8D%E8%83%BD%E6%9B%B4%E6%96%B0UI%E5%90%97/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;源码版本 SDK 28&lt;/p&gt;
&lt;p&gt;Android 中控件都是线程不安全的，Google &lt;strong&gt;规范&lt;/strong&gt;只能在主线程中更新 UI，在子线程中发送网络请求。假如在子线程中更新 UI，会抛出异常&lt;/p&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
      <category term="Android" scheme="http://blog.ennis.info/categories/Android/"/>
    
    
      <category term="Android" scheme="http://blog.ennis.info/tags/Android/"/>
    
      <category term="AndroidUI" scheme="http://blog.ennis.info/tags/AndroidUI/"/>
    
  </entry>
  
  <entry>
    <title>HashSet为什么要使用Object对象填充value而不是null</title>
    <link href="http://blog.ennis.info/2019/02/16/HashSet%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8Object%E5%AF%B9%E8%B1%A1%E5%A1%AB%E5%85%85value%E8%80%8C%E4%B8%8D%E6%98%AFnull/"/>
    <id>http://blog.ennis.info/2019/02/16/HashSet为什么要使用Object对象填充value而不是null/</id>
    <published>2019-02-16T15:25:02.000Z</published>
    <updated>2019-03-16T06:36:43.034Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道 HashSet 内部使用 HashMap 实现，HashSet 的元素存储在 HashMap 的 key 中（唯一），value 使用了一个 Object 对象填充。为什么 HashSet 不使用 null 去填充 value 呢？</p><p>以下所有原代码基于 JDK 1.10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><h1 id="从-remove-的角度"><a href="#从-remove-的角度" class="headerlink" title="从 remove 的角度"></a>从 remove 的角度</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.remove(o)==PRESENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>HashSet 使用 HashMap 的 <code>remove(Object) : Object</code> 方法移除元素，如果使用 null 作为 value 填充，其返回值始终为 null，因为当存在该 key 并移除成功使返回原 value 为 null，当不存在该 key 时返回 null ，即<strong>无法判断是否移除成功</strong>。</p></li><li><p>HashMap 存在 <code>remove(Object, Object) : boolean</code> 方法，但该方法在 JDK 1.8 才出现。并且该方法相对于上一个方法更加耗时。</p></li></ol><h1 id="从-add-的角度"><a href="#从-add-的角度" class="headerlink" title="从 add 的角度"></a>从 add 的角度</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>HashSet 使用 HashMap 的 <code>put(Object, Object) : Object</code> 方法添加元素，但该方法无法判断是否添加成功。</p><ul><li><p>HashSet 的 add 方法添加元素时若该元素之前未被添加则返回 true，若该元素之前已被添加则返回 false。</p></li><li><p>HashMap 的 put 添加键值对时若该键值对的 key 未被添加则返回 null，若该键值对的 key 已被添加则返回原 value。</p></li><li><p>即当使用 null 作为 value 填充，其返回值始终为 null，<strong>无法判断是否添加成功</strong>。</p></li></ul></li><li><p>可以使用 HashMap 的 <code>containsKey(Object) : boolean</code>    方法加以条件判断，但这样会更加耗时。并且若添加一个之前未被添加的元素需要遍历整个 HashMap。而添加元素是一个使用频繁的方法，尤其是添加新元素更为频繁，每次都加以判断并不是一个明智的选择。</p></li></ol><h1 id="从消耗内存的角度"><a href="#从消耗内存的角度" class="headerlink" title="从消耗内存的角度"></a>从消耗内存的角度</h1><p>HashSet 使用的填充对象 PRESENT 用 static 修饰，所有 HashSet 的所有元素都使用该对象作为 value 填充，并不会消耗多大内存，可以忽略不计。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>综上，HashSet 使用一个 Object 对象而不是 null 作为 value 填充 HashMap 在时间上效率会更优越，并且消耗的内存可以忽略不计。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们知道 HashSet 内部使用 HashMap 实现，HashSet 的元素存储在 HashMap 的 key 中（唯一），value 使用了一个 Object 对象填充。为什么 HashSet 不使用 null 去填充 value 呢？&lt;/p&gt;
&lt;p&gt;以下所有原代码基
      
    
    </summary>
    
      <category term="Java集合" scheme="http://blog.ennis.info/categories/Java%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://blog.ennis.info/tags/Java/"/>
    
      <category term="面试" scheme="http://blog.ennis.info/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Java基础" scheme="http://blog.ennis.info/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java集合" scheme="http://blog.ennis.info/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>HashMap的相关问题</title>
    <link href="http://blog.ennis.info/2019/02/16/HashMap%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.ennis.info/2019/02/16/HashMap的相关问题/</id>
    <published>2019-02-16T14:35:53.000Z</published>
    <updated>2019-03-16T06:35:21.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap-扩容机制"><a href="#HashMap-扩容机制" class="headerlink" title="HashMap 扩容机制"></a>HashMap 扩容机制</h1><h2 id="扩容时机"><a href="#扩容时机" class="headerlink" title="扩容时机"></a>扩容时机</h2><h3 id="基于-JDK-1-7"><a href="#基于-JDK-1-7" class="headerlink" title="基于 JDK 1.7"></a>基于 JDK 1.7</h3><ol><li><p><strong>添加元素前容器元素的个数 >= 阈值</strong>（<code>size &gt;= threshold</code>）。</p></li><li><p>当前要添加元素所在<strong>数组（桶）的位置（index）不等于null</strong>。</p><p> 也就是说发生了 hash 冲突。</p></li><li><p>以上两个条件都满足时触发 HashMap 扩容。</p></li></ol><h3 id="基于-JDK-1-10"><a href="#基于-JDK-1-10" class="headerlink" title="基于 JDK 1.10"></a>基于 JDK 1.10</h3><ol><li><strong>添加元素后容器的元素个数 > 阈值</strong>（<code>++size &gt; threshold</code>）</li></ol><h3 id="thresold-说明"><a href="#thresold-说明" class="headerlink" title="thresold 说明"></a>thresold 说明</h3><ol><li><p>threshold = 数组（桶）的长度。</p></li><li><p>当扩容到最大值时，threshold = int 最大值。</p></li><li><p>使用提供初始值的构造方法时，threshold = 初始值最接近的 2 的 n 次幂的值。</p></li></ol><h2 id="扩容大小"><a href="#扩容大小" class="headerlink" title="扩容大小"></a>扩容大小</h2><ol><li><p>扩容大小为当前数组（桶）的 <strong>2 倍</strong>（HashMap 中数组的大小始终为 2 的 n 次幂）。</p></li><li><p>扩容时触发 rehash ，也就是重新计算每个元素的位置。</p></li><li><p>经过 rehash 后，<strong>元素在原位置或者在原位置移动 2 次幂的位置</strong>。</p></li></ol><h2 id="原代码"><a href="#原代码" class="headerlink" title="原代码"></a>原代码</h2><p>以下原代码基于 JDK 1.7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * HashMap 添加节点 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash        当前key生成的hashcode </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key         要添加到 HashMap 的key </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value       要添加到 HashMap 的value </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bucketIndex 桶，也就是这个要添加 HashMap 里的这个数据对应到数组的位置下标 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//size：The number of key-value mappings contained in this map.  </span></span><br><span class="line">    <span class="comment">//threshold：The next size value at which to resize (capacity * load factor)  </span></span><br><span class="line">    <span class="comment">//数组扩容条件：1.已经存在的key-value mappings的个数大于等于阈值  </span></span><br><span class="line">    <span class="comment">//             2.底层数组的bucketIndex坐标处不等于null  </span></span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;  </span><br><span class="line">        resize(<span class="number">2</span> * table.length);<span class="comment">//扩容之后，数组长度变了  </span></span><br><span class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;<span class="comment">//为什么要再次计算一下hash值呢？  </span></span><br><span class="line">        bucketIndex = indexFor(hash, table.length);<span class="comment">//扩容之后，数组长度变了，在数组的下标跟数组长度有关，得重算。  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    createEntry(hash, key, value, bucketIndex);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 这地方就是链表出现的地方，有2种情况 </span></span><br><span class="line"><span class="comment"> * 1，原来的桶bucketIndex处是没值的，那么就不会有链表出来啦 </span></span><br><span class="line"><span class="comment"> * 2，原来这地方有值，那么根据Entry的构造函数，把新传进来的key-value mapping放在数组上，原来的就挂在这个新来的next属性上了 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;  </span><br><span class="line">    HashMap.Entry&lt;K, V&gt; e = table[bucketIndex];  </span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> HashMap.Entry&lt;&gt;(hash, key, value, e);  </span><br><span class="line">    size++;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;   <span class="comment">//传入新的容量</span></span><br><span class="line">    Entry[] oldTable = table;    <span class="comment">//引用扩容前的Entry数组</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;  <span class="comment">//扩容前的数组大小如果已经达到最大(2^30)了</span></span><br><span class="line">        threshold = Integer.MAX_VALUE; <span class="comment">//修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];  <span class="comment">//初始化一个新的Entry数组</span></span><br><span class="line">    transfer(newTable);                         <span class="comment">//！！将数据转移到新的Entry数组里</span></span><br><span class="line">    table = newTable;                           <span class="comment">//HashMap的table属性引用新的Entry数组</span></span><br><span class="line">    threshold = (<span class="keyword">int</span>) (newCapacity * loadFactor);<span class="comment">//修改阈值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;</span><br><span class="line">    Entry[] src = table;                   <span class="comment">//src引用了旧的Entry数组</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123; <span class="comment">//遍历旧的Entry数组</span></span><br><span class="line">        Entry&lt;K, V&gt; e = src[j];             <span class="comment">//取得旧Entry数组的每个元素</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            src[j] = <span class="keyword">null</span>;<span class="comment">//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再引用任何对象）</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                Entry&lt;K, V&gt; next = e.next;</span><br><span class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity); <span class="comment">//！！重新计算每个元素在数组中的位置</span></span><br><span class="line">                e.next = newTable[i]; <span class="comment">//标记[1]</span></span><br><span class="line">                newTable[i] = e;      <span class="comment">//将元素放在数组上</span></span><br><span class="line">                e = next;             <span class="comment">//访问下一个Entry链上的元素</span></span><br><span class="line">            &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下原代码基于 JDK 1.10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment"> * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment"> * value is replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &#123;<span class="doctag">@code</span> key&#125;, or</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> null&#125; if there was no mapping for &#123;<span class="doctag">@code</span> key&#125;.</span></span><br><span class="line"><span class="comment"> *         (A &#123;<span class="doctag">@code</span> null&#125; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &#123;<span class="doctag">@code</span> null&#125; with &#123;<span class="doctag">@code</span> key&#125;.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment"> * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment"> * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment"> * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment"> * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HashMap-插入链表时是头插还是尾插"><a href="#HashMap-插入链表时是头插还是尾插" class="headerlink" title="HashMap 插入链表时是头插还是尾插"></a>HashMap 插入链表时是头插还是尾插</h1><p>其实这个问题很简单，只需要观察 HashMap 的 Node 节点类的字段。</p><p>Node 类仅保存了它的下一个节点，也就是说这个<strong>链表是单向的</strong>，并且只保存了头节点，所以肯定是<strong>头插法</strong>性能较高。</p><h1 id="LinkedHashMap-是怎样实现有序的"><a href="#LinkedHashMap-是怎样实现有序的" class="headerlink" title="LinkedHashMap 是怎样实现有序的"></a>LinkedHashMap 是怎样实现有序的</h1><p>我们知道 HashMap 中保存的元素是无序的，并且 HashMap 不保证其元素的位置不变，而 Map 接口的另一个实现类 LinkedHashMap 则可以保证其遍历时以添加的顺序返回，那它是怎样实现的？</p><blockquote><p>注意 LinkedHashMap 不可以随机访问，其内部元素仍无序，只是通过迭代器遍历时返回顺序与添加顺序相同。</p></blockquote><p>以下代码基于 JDK 1.10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//其余方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LinkedHashMap 直接继承于 HashMap，其源代码非常短，仅对 HashMap 做了少量更改。LinkedHashMap 中的节点 Node 也直接继承于 HashMap 中的节点 Node。</p><p>从节点代码中我们可以了解到 LinkHashMap 中节点添加了前驱、后继两个新字段，其他不变。</p><p>正如官方文档所说 <strong>LinkedHashMap 是哈希表和双向链表的实现</strong>。</p><p><img src="/images/posts/Java/Collection/linkedhashmap.png" alt="LinkedHashMap 数据结构"></p><p><a href="https://yikun.github.io/2015/04/02/Java-LinkedHashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">图片来自</a></p><h1 id="HashMap-与-HashTable-的区别"><a href="#HashMap-与-HashTable-的区别" class="headerlink" title="HashMap 与 HashTable 的区别"></a>HashMap 与 HashTable 的区别</h1><h2 id="继承不同"><a href="#继承不同" class="headerlink" title="继承不同"></a>继承不同</h2><p>HashMap 与 HashTable 都实现了 Map 接口，但是 HashMap 直接继承于 AbstractMap 类，HashTable 直接继承于 Dictionary 类。</p><h2 id="迭代器不同"><a href="#迭代器不同" class="headerlink" title="迭代器不同"></a>迭代器不同</h2><p>HashMap 与 HashTable 的迭代器都实现了 Iterator 接口，但是 HashTable 的迭代器还实现了 Enumeration 接口。</p><h2 id="线程安全不同"><a href="#线程安全不同" class="headerlink" title="线程安全不同"></a>线程安全不同</h2><p>HashMap 是线程不安全的，而 HashTable 是线程安全的。</p><p>在单线程情况下，HashMap 效率高于 HashTable。</p><h2 id="哈希算法不同"><a href="#哈希算法不同" class="headerlink" title="哈希算法不同"></a>哈希算法不同</h2><p>HashMap 中元素的 hash 值使用 key 的 hashcode 值经过一定的算法计算得到。以减少哈希冲突。</p><p><strong>HashTable 中元素的 hash 值直接使用 key 的 hashcode 值。</strong></p><h2 id="允不允许-null-值不同"><a href="#允不允许-null-值不同" class="headerlink" title="允不允许 null 值不同"></a>允不允许 null 值不同</h2><p><strong>HashMap 可以使用 null 作为键和值。HashTable 均不允许。</strong></p><h2 id="扩容大小不同"><a href="#扩容大小不同" class="headerlink" title="扩容大小不同"></a>扩容大小不同</h2><p>HashMap 扩容为原数组（桶）的 2 倍，HashTable 扩容为原数组（桶）的 2 倍 + 1。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><p><a href="https://www.cnblogs.com/chengxiao/p/6059914.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxiao/p/6059914.html</a><br><a href="https://blog.csdn.net/qq_27093465/article/details/52270519" target="_blank" rel="noopener">https://blog.csdn.net/qq_27093465/article/details/52270519</a><br><a href="https://blog.csdn.net/mgl934973491/article/details/60466487" target="_blank" rel="noopener">https://blog.csdn.net/mgl934973491/article/details/60466487</a><br><a href="https://blog.csdn.net/u014532901/article/details/78936283" target="_blank" rel="noopener">https://blog.csdn.net/u014532901/article/details/78936283</a><br><a href="https://yikun.github.io/2015/04/02/Java-LinkedHashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">https://yikun.github.io/2015/04/02/Java-LinkedHashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HashMap-扩容机制&quot;&gt;&lt;a href=&quot;#HashMap-扩容机制&quot; class=&quot;headerlink&quot; title=&quot;HashMap 扩容机制&quot;&gt;&lt;/a&gt;HashMap 扩容机制&lt;/h1&gt;&lt;h2 id=&quot;扩容时机&quot;&gt;&lt;a href=&quot;#扩容时机&quot; cla
      
    
    </summary>
    
      <category term="Java集合" scheme="http://blog.ennis.info/categories/Java%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://blog.ennis.info/tags/Java/"/>
    
      <category term="面试" scheme="http://blog.ennis.info/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Java基础" scheme="http://blog.ennis.info/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java集合" scheme="http://blog.ennis.info/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Java内部类中private的探讨</title>
    <link href="http://blog.ennis.info/2019/02/15/Java%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%ADprivate%E7%9A%84%E6%8E%A2%E8%AE%A8/"/>
    <id>http://blog.ennis.info/2019/02/15/Java内部类中private的探讨/</id>
    <published>2019-02-15T03:48:23.000Z</published>
    <updated>2019-03-16T06:44:56.582Z</updated>
    
    <content type="html"><![CDATA[<p>Java 内部类一直是一个很特殊的类，它与外部类和该外部类的其他内部类总有着千丝万缕的联系，本文讨论的是内部类中的 private 修饰符。</p><p>以下测试基于下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> outer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outer</span><span class="params">(<span class="keyword">int</span> outer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.outer = outer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessInnerPrivateMethod</span><span class="params">(Inner inner)</span> </span>&#123;</span><br><span class="line">        inner.privateMethod(<span class="number">1</span>, <span class="number">1.1</span>, <span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Inner inner)</span> </span>&#123;</span><br><span class="line">        System.out.println(inner.inner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateMethod</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> inner;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">(<span class="keyword">int</span> inner)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.inner = inner;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessOuterPrivateMethod</span><span class="params">(Outer outer)</span> </span>&#123;</span><br><span class="line">            outer.privateMethod(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Outer outer)</span> </span>&#123;</span><br><span class="line">            System.out.println(outer.outer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateMethod</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b, <span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">parseExecutable</span><span class="params">(Executable executable)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(Modifier.toString(executable.getModifiers())).append(<span class="string">" "</span>);</span><br><span class="line">        sb.append(executable.getName()).append(<span class="string">"("</span>);</span><br><span class="line">        <span class="keyword">for</span> (Parameter parameter : executable.getParameters()) &#123;</span><br><span class="line">            sb.append(parameter.getType().getSimpleName()).append(<span class="string">" "</span>).append(parameter.getName()).append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.delete(sb.length() - <span class="number">2</span>, sb.length());</span><br><span class="line">        sb.append(<span class="string">"): "</span>);</span><br><span class="line">        sb.append(executable.getAnnotatedReturnType().getType().getTypeName());</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printExecutables</span><span class="params">(Executable[] executables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Executable executable : executables) &#123;</span><br><span class="line">            System.out.println(parseExecutable(executable));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">parseField</span><span class="params">(Field field)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(Modifier.toString(field.getModifiers())).append(<span class="string">" "</span>);</span><br><span class="line">        sb.append(field.getType().getSimpleName()).append(<span class="string">" "</span>);</span><br><span class="line">        sb.append(field.getName());</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFields</span><span class="params">(Field[] fields)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(parseField(field));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class&lt;Outer&gt; outerClass = Outer.class;</span><br><span class="line">        Class&lt;Outer.Inner&gt; innerClass = Outer.Inner.class;</span><br><span class="line"></span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer(<span class="number">0</span>);</span><br><span class="line">        Outer.Inner inner = outer.new Inner(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"外部类的方法"</span>);</span><br><span class="line">        printExecutables(outerClass.getDeclaredMethods());</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"内部类的构造方法"</span>);</span><br><span class="line">        printExecutables(innerClass.getDeclaredConstructors());</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"内部类的方法"</span>);</span><br><span class="line">        printExecutables(innerClass.getDeclaredMethods());</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"内部类的字段"</span>);</span><br><span class="line">        printFields(innerClass.getDeclaredFields());</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">外部类的方法</span><br><span class="line">static access$200(Outer arg0, String arg1): void</span><br><span class="line">static access$300(Outer arg0): int</span><br><span class="line">public print(Inner arg0): void</span><br><span class="line">public accessInnerPrivateMethod(Inner arg0): void</span><br><span class="line">private privateMethod(String arg0): void</span><br><span class="line"></span><br><span class="line">内部类的构造方法</span><br><span class="line">public Outer$Inner(Outer arg0, int arg1): Outer$Inner</span><br><span class="line"></span><br><span class="line">内部类的方法</span><br><span class="line">static access$100(Inner arg0): int</span><br><span class="line">static access$000(Inner arg0, int arg1, double arg2, char arg3): void</span><br><span class="line">public print(Outer arg0): void</span><br><span class="line">public accessOuterPrivateMethod(Outer arg0): void</span><br><span class="line">private priviteMethod(int arg0, double arg1, char arg2): void</span><br><span class="line"></span><br><span class="line">内部类的字段</span><br><span class="line">private int inner</span><br><span class="line">final Outer this$0</span><br></pre></td></tr></table></figure><h1 id="内部类为什么可以直接访问外部类的字段和方法"><a href="#内部类为什么可以直接访问外部类的字段和方法" class="headerlink" title="内部类为什么可以直接访问外部类的字段和方法"></a>内部类为什么可以直接访问外部类的字段和方法</h1><ul><li><strong>内部类对象的创建依赖外部类对象。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Outer outer = <span class="keyword">new</span> Outer(<span class="number">0</span>);</span><br><span class="line">Outer.Inner inner = outer.new Inner(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>从反射的结果可以看出生成的内部类</p><ul><li><strong>构造方法添加了一个外部类的参数。</strong></li><li><strong>添加了一个外部类的字段。</strong></li></ul><p>实际上<strong>内部类的对象“隐式“引用了外部类对象</strong>，所以可以直接访问外部类的字段和方法。</p><h1 id="private-在外部类与内部类中的访问限制"><a href="#private-在外部类与内部类中的访问限制" class="headerlink" title="private 在外部类与内部类中的访问限制"></a>private 在外部类与内部类中的访问限制</h1><ul><li><strong>外部类可以访问内部类的 private 字段和方法</strong>。</li><li><strong>内部类可以访问外部类的 private 字段和方法</strong>。</li></ul><p>从反射的结果可以看出外部类与内部类均添加了 2 个 static 的 access 方法，如果你会反编译的话，通过反编译的结果可以看出实际上这些 access 方法会返回相应 private 字段的值或者调用相应 private 方法，<strong>内部类与外部类之间访问 private 字段和方法实际上通过调用这些 static 方法间接访问</strong>。</p><h1 id="内部类与内部类"><a href="#内部类与内部类" class="headerlink" title="内部类与内部类"></a>内部类与内部类</h1><ul><li><strong>同一个外部类的内部类之间可以访问 private 字段和方法。</strong></li></ul><p>原理同上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 内部类一直是一个很特殊的类，它与外部类和该外部类的其他内部类总有着千丝万缕的联系，本文讨论的是内部类中的 private 修饰符。&lt;/p&gt;
&lt;p&gt;以下测试基于下面的代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="Java" scheme="http://blog.ennis.info/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.ennis.info/tags/Java/"/>
    
      <category term="Java基础" scheme="http://blog.ennis.info/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>View绘制流程</title>
    <link href="http://blog.ennis.info/2019/02/14/View%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
    <id>http://blog.ennis.info/2019/02/14/View绘制流程/</id>
    <published>2019-02-14T06:45:07.000Z</published>
    <updated>2019-03-30T07:31:13.320Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="http://blog.csdn.net/guolin_blog/article/details/16330267" target="_blank" rel="noopener">http://blog.csdn.net/guolin_blog/article/details/16330267</a></p><p>每个 View 的绘制都会经过 measure（测量）、layout（布局）、draw（绘图）3 个流程。</p><p>系统的绘制流程从 ViewRootImpl.performTraversals 开始。</p><h1 id="测量"><a href="#测量" class="headerlink" title="测量"></a>测量</h1><ul><li>测量从 ViewRootImpl.performTraversals 开始。</li><li>measure 方法接收两个参数，widthMeasureSpec 和 heightMeasureSpec。</li><li><strong>measure 方法用 final 修饰，不允许子类重写。</strong></li><li><strong>measure 可能被多次调用。</strong></li><li>真正测量 View 大小的是 onMeasure 方法，会在 measure 方法中调用。</li><li><strong>若要改变默认的测量流程需要重写 onMeasure 方法。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class="line">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onMearsure 默认通过调用 getDefaultSize 方法获取大小，然后调用 setMeasuredDimension 设定测量的大小。</p><ul><li><strong>调用 setMeasuredDimension 方法后可以通过 getMeasuredWidth 和 getMeasuredHeight 获取 View 测量出的宽高。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = size;</span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class="line">        result = size;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">        result = specSize;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>measureSpec 通过 measure 方法传入。</p><p>ViewGroup 可能包含子 View，每个 View 都要调用 measure。</p><p>ViewGroup 定义了 measureChildren 和 measureChild 方法，依次调用子 View 的 measure 方法触发测量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildren</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = mChildrenCount;</span><br><span class="line">    <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        <span class="keyword">final</span> View child = children[i];</span><br><span class="line">        <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</span><br><span class="line">            measureChild(child, widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ViewGroup 通过调用 getChildMeasureSpec 方法计算子 View 的 MeasureSpec。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChild</span><span class="params">(View child, <span class="keyword">int</span> parentWidthMeasureSpec,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> parentHeightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> LayoutParams lp = child.getLayoutParams();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</span><br><span class="line">            mPaddingLeft + mPaddingRight, lp.width);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</span><br><span class="line">            mPaddingTop + mPaddingBottom, lp.height);</span><br><span class="line"></span><br><span class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MeasureSpec"><a href="#MeasureSpec" class="headerlink" title="MeasureSpec"></a>MeasureSpec</h2><ul><li>值由 specSize 和 specMode 共同组成。</li><li>specSize 记录大小，specMode 记录规格。</li><li>通过 MeasureSpec.makeMeasureSpec 方法组装 MeasureSpec。</li><li>通过 MeasureSpec.getMode 方法和 MeasureSpec.getSize 方法拆分。</li></ul><blockquote><p>specMode 的三种类型  </p><ol><li>EXACTLY<br>表示父视图希望子视图的大小应该是由specSize的值来决定的，系统默认会按照这个规则来设置子视图的大小，开发人员当然也可以按照自己的意愿设置成任意的大小。  </li><li>AT_MOST<br>表示子视图最多只能是specSize中指定的大小，开发人员应该尽可能小得去设置这个视图，并且保证不会超过specSize。系统默认会按照这个规则来设置子视图的大小，开发人员当然也可以按照自己的意愿设置成任意的大小。  </li><li>UNSPECIFIED<br>表示开发人员可以将视图按照自己的意愿设置成任意的大小，没有任何限制。这种情况比较少见，不太会用到。  </li></ol></blockquote><ul><li>父 View 经过计算得出 widthMeasureSpec 和 heightMeasureSpec 后传给子 View。</li><li>根 View 通过 ViewRootImpl.getRootMeasureSpec 方法获得 widthMeasureSpec 和 heightMeasureSpec。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//截取自 ViewRootImpl.performTraversals 方法</span></span><br><span class="line"><span class="keyword">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</span><br><span class="line"><span class="keyword">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRootMeasureSpec</span><span class="params">(<span class="keyword">int</span> windowSize, <span class="keyword">int</span> rootDimension)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> measureSpec;</span><br><span class="line">    <span class="keyword">switch</span> (rootDimension) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</span><br><span class="line">        <span class="comment">// Window can't resize. Force root view to be windowSize.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.WRAP_CONTENT:</span><br><span class="line">        <span class="comment">// Window can resize. Set max size for root view.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// Window wants to be an exact size. Force root view to be that size.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> measureSpec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>rootDimension 参数等于 MATCH_PARENT 时，MeasureSpec 的 specMode 等于 EXACTLY。</li><li>rootDimension 参数等于 WRAP_CONTENT 时，MeasureSpec 的 specMode 等于 AT_MOST。</li><li>rootDimension 参数等于 MATCH_PARENT 或 WRAP_CONTENT 时，specSize 都等于 windowSize，也就是根视图总是会充满全屏。</li></ul><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><ul><li>ViewRoot.performTraversals 方法在测量结束开始布局。</li><li>layout 方法接收 4 个参数，表示左、上、右、下 4 个位置的坐标。</li><li>layout 方法会判断 View 大小是否发生变化，确定是否需要重绘。</li><li><strong>layout 可能被多次调用。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> changed = isLayoutModeOptical(mParent) ?</span><br><span class="line">                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</span><br></pre></td></tr></table></figure><ul><li>真正实现布局的是 onLayout 方法。</li><li><strong>View.onLayout 是空方法，ViewGroup.onLayout 是抽象方法。</strong></li><li><strong>onLayout 方法结束后可以通过 getWidth 和 getHeight 方法获取 View 的宽高。</strong></li></ul><h2 id="getWidth-getHeight-与-getMeasureWidth-getMeasureHeight"><a href="#getWidth-getHeight-与-getMeasureWidth-getMeasureHeight" class="headerlink" title="getWidth / getHeight 与 getMeasureWidth / getMeasureHeight"></a>getWidth / getHeight 与 getMeasureWidth / getMeasureHeight</h2><ul><li>getMeasureWidth / getMeasureHeight 的值通过 setMeasuredDimension 方法设置。</li><li>getWidth / getHeight 的值通过坐标相减计算得出。</li></ul><h1 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h1><ul><li>ViewRoot.performTraversals 方法在布局结束开始绘图。</li><li>draw 方法接收一个 Canvas 对象的参数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> privateFlags = mPrivateFlags;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> dirtyOpaque = (privateFlags &amp; PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &amp;&amp;</span><br><span class="line">                (mAttachInfo == <span class="keyword">null</span> || !mAttachInfo.mIgnoreDirtyState);</span><br><span class="line">        mPrivateFlags = (privateFlags &amp; ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Draw traversal performs several drawing steps which must be executed</span></span><br><span class="line"><span class="comment">         * in the appropriate order:</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *      1. Draw the background</span></span><br><span class="line"><span class="comment">         *      2. If necessary, save the canvas' layers to prepare for fading</span></span><br><span class="line"><span class="comment">         *      3. Draw view's content</span></span><br><span class="line"><span class="comment">         *      4. Draw children</span></span><br><span class="line"><span class="comment">         *      5. If necessary, draw the fading edges and restore layers</span></span><br><span class="line"><span class="comment">         *      6. Draw decorations (scrollbars for instance)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 1, draw the background, if needed</span></span><br><span class="line">        <span class="keyword">int</span> saveCount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!dirtyOpaque) &#123;</span><br><span class="line">            drawBackground(canvas);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// skip step 2 &amp; 5 if possible (common case)</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;</span><br><span class="line">        <span class="keyword">boolean</span> horizontalEdges = (viewFlags &amp; FADING_EDGE_HORIZONTAL) != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> verticalEdges = (viewFlags &amp; FADING_EDGE_VERTICAL) != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!verticalEdges &amp;&amp; !horizontalEdges) &#123;</span><br><span class="line">            <span class="comment">// Step 3, draw the content</span></span><br><span class="line">            <span class="keyword">if</span> (!dirtyOpaque) onDraw(canvas);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Step 4, draw the children</span></span><br><span class="line">            dispatchDraw(canvas);</span><br><span class="line"></span><br><span class="line">            drawAutofilledHighlight(canvas);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Overlay is part of the content and draws beneath Foreground</span></span><br><span class="line">            <span class="keyword">if</span> (mOverlay != <span class="keyword">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</span><br><span class="line">                mOverlay.getOverlayView().dispatchDraw(canvas);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Step 6, draw decorations (foreground, scrollbars)</span></span><br><span class="line">            onDrawForeground(canvas);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Step 7, draw the default focus highlight</span></span><br><span class="line">            drawDefaultFocusHighlight(canvas);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (debugDraw()) &#123;</span><br><span class="line">                debugDrawFocus(canvas);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// we're done...</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Here we do the full fledged routine...</span></span><br><span class="line"><span class="comment">         * (this is an uncommon case where speed matters less,</span></span><br><span class="line"><span class="comment">         * this is why we repeat some of the tests that have been</span></span><br><span class="line"><span class="comment">         * done above)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//完整流程省略</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>绘制流程共有 6 个步骤，其中第 2 步和第 5 步可跳过。</strong></p><ol><li>绘制背景。</li><li>如有必要，保存图层以准备褪色。</li><li>绘制 View 的内容。</li><li>绘制子 View。</li><li>如有必要，绘制淡化边缘和恢复图层。</li><li>绘制装饰。（如滚动条）</li></ol></li><li><p><strong>绘制内容在 onDraw 方法，对应第 3 步。</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自：&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/16330267&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/guolin_blog/ar
      
    
    </summary>
    
      <category term="Android" scheme="http://blog.ennis.info/categories/Android/"/>
    
    
      <category term="Android" scheme="http://blog.ennis.info/tags/Android/"/>
    
      <category term="View" scheme="http://blog.ennis.info/tags/View/"/>
    
      <category term="面试" scheme="http://blog.ennis.info/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-36SubstrateVM：AOT编译框架</title>
    <link href="http://blog.ennis.info/2018/12/19/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-36SubstrateVM%EF%BC%9AAOT%E7%BC%96%E8%AF%91%E6%A1%86%E6%9E%B6/"/>
    <id>http://blog.ennis.info/2018/12/19/笔记-深入拆解Java虚拟机-36SubstrateVM：AOT编译框架/</id>
    <published>2018-12-19T02:54:30.000Z</published>
    <updated>2019-01-26T13:26:29.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOT（Ahead-Of-Time）编译"><a href="#AOT（Ahead-Of-Time）编译" class="headerlink" title="AOT（Ahead-Of-Time）编译"></a>AOT（Ahead-Of-Time）编译</h1><ul><li><strong>程序运行之前，将字节码转换为机器码的过程。</strong></li><li>编译后可以需要链接至托管环境中的动态共享库，也可以是独立运行的可执行文件。</li><li>狭义的 AOT 编译针对的目标代码是可以被即时编译的代码。</li><li>可以简单地理解为类似 GCC 的静态编译器。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>无须在运行时耗费 CPU 资源进行即时编译。</li><li>程序能在<strong>启动时就达到理想的性能</strong>。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>无法得知程序运行时的信息。</li><li>无法进行基于类层次分析的完全虚方法内联。（不懂）</li><li>无法进行基于程序 profile 的投机性优化。（不懂）</li><li><strong>影响程序的峰值性能。</strong></li></ul><h1 id="jaotc"><a href="#jaotc" class="headerlink" title="jaotc"></a><a href="http://openjdk.java.net/jeps/295" target="_blank" rel="noopener">jaotc</a></h1><blockquote><p>Java 9 引入的实验性 AOT 编译工具。</p></blockquote><ul><li>借助 Graal 编译器，将类文件转换为机器码，存放在生成的动态共享库中。</li><li><strong>在方法调用时切入</strong>，能够去优化至解释执行。</li><li>由于 JVM 可能通过 Java agent 或者 C agent 改动加载的字节码，或者这份 AOT 编译生成的机器码针对的是旧版本的 Java 类，因此它<strong>需要额外的验证机制</strong>，来保证即将链接的机器码的语义与对应的 Java 类的语义是一致的。</li></ul><h2 id="类指纹（class-fingerprinting）"><a href="#类指纹（class-fingerprinting）" class="headerlink" title="类指纹（class fingerprinting）"></a>类指纹（class fingerprinting）</h2><ul><li>在动态共享库中保存被编译的 Java 类的摘要信息。</li><li>JVM 比较摘要信息和已加载的 Java 类。</li><li>不匹配则舍弃。</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li><strong>编译 java.base module</strong>（Java 核心类库中最为基础的类）。</li><li>这些类可能被应用程序调用，但频率未必高到能触发即时编译。</li><li>将它们<strong>提前编译为机器码</strong>，<strong>避免</strong>在执行即时编译生成的机器码时，因为调用到这些基础类，而需要<strong>切换至解释执行的性能惩罚</strong>。</li></ul><h1 id="SubstrateVM-的设计与实现"><a href="#SubstrateVM-的设计与实现" class="headerlink" title="SubstrateVM 的设计与实现"></a>SubstrateVM 的设计与实现</h1><blockquote><p>设计初衷是提供一个高启动性能、低内存开销，并且能够无缝衔接 C 代码的 Java 运行时。</p></blockquote><h2 id="SubstrateVM-的限制"><a href="#SubstrateVM-的限制" class="headerlink" title="SubstrateVM 的限制"></a>SubstrateVM 的限制</h2><blockquote><p><a href="https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md" target="_blank" rel="noopener">文档</a></p></blockquote><ul><li><strong>脱离 HotSpot 虚拟机，拥有独立运行时</strong>（包含异常处理，同步，线程管理，内存管理（垃圾回收）和 JNI 等组件）。</li><li><strong>要求目标程序是封闭的，不能动态加载其他类库等。</strong></li><li>探索整个编译空间，通过静态分析推算所有虚方法调用的目标方法。</li><li>将所有可能执行到的方法都纳入编译范围，避免实现解释执行器。</li><li>主要用于 JVM 语言的 AOT 编译。</li><li>Truffle 语言实现可以在 SubstrateVM 上运行，但不会 AOT 编译。</li></ul><h2 id="native-image-generator"><a href="#native-image-generator" class="headerlink" title="native image generator"></a>native image generator</h2><ul><li>是一个 Java 程序。</li><li>包含 AOT 编译逻辑。</li><li>采用指针分析（points-to analysis），从程序入口出发，探索所有可达代码。</li><li>执行初始化代码。</li><li>最终生成可执行文件时，将已初始化的堆保存至一个堆快照之中。</li></ul><h2 id="SubstrateVM-运行时"><a href="#SubstrateVM-运行时" class="headerlink" title="SubstrateVM 运行时"></a>SubstrateVM 运行时</h2><ul><li>精简运行时，经过 AOT 编译的目标程序将跑在该运行时之上。</li><li>直接从目标程序开始运行，无须进行 JVM 初始化。</li></ul><h1 id="SubstrateVM-的启动时间与内存开销"><a href="#SubstrateVM-的启动时间与内存开销" class="headerlink" title="SubstrateVM 的启动时间与内存开销"></a>SubstrateVM 的启动时间与内存开销</h1><ul><li><strong>启动时间和内存开销非常少。</strong></li><li>适合嵌入其他系统中。</li></ul><h1 id="Metropolis-项目"><a href="#Metropolis-项目" class="headerlink" title="Metropolis 项目"></a><a href="http://openjdk.java.net/projects/metropolis/" target="_blank" rel="noopener">Metropolis 项目</a></h1><blockquote><p>实现<strong>“Java-on-Java”</strong>的目标。</p></blockquote><p>Oracle 的架构师 John Rose 提出的使用 Java 开发 Java 虚拟机的好处：</p><ol><li>能够完全控制编译 Java 虚拟机时所使用的优化技术。</li><li>能够与 C++ 语言的更新解耦合。</li><li>能够减轻开发人员以及维护人员的负担。</li><li>能够以更为敏捷的方式实现 Java 的新功能。</li></ol><ul><li><a href="https://www.jikesrvm.org/" target="_blank" rel="noopener">JikesRVM 项目</a>和<a href="https://github.com/beehive-lab/Maxine-VM" target="_blank" rel="noopener">Maxine VM 项目</a>已用 Java 完整地实现了一套 Java 虚拟机（后者的即时编译器 C1X 是 Graal 编译器的前身）。</li><li>Java-on-Java 技术通常会干扰应用程序的垃圾回收、即时编译优化。</li><li>严重影响 JVM 的启动性能。</li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/41582" target="_blank" rel="noopener">https://time.geekbang.org/column/article/41582</a></p></blockquote><h1 id="深入拆解Java虚拟机完结"><a href="#深入拆解Java虚拟机完结" class="headerlink" title="深入拆解Java虚拟机完结"></a>深入拆解Java虚拟机完结</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AOT（Ahead-Of-Time）编译&quot;&gt;&lt;a href=&quot;#AOT（Ahead-Of-Time）编译&quot; class=&quot;headerlink&quot; title=&quot;AOT（Ahead-Of-Time）编译&quot;&gt;&lt;/a&gt;AOT（Ahead-Of-Time）编译&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://blog.ennis.info/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://blog.ennis.info/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-35Truffle：语言实现框架</title>
    <link href="http://blog.ennis.info/2018/12/16/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-35Truffle%EF%BC%9A%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%A1%86%E6%9E%B6/"/>
    <id>http://blog.ennis.info/2018/12/16/笔记-深入拆解Java虚拟机-35Truffle：语言实现框架/</id>
    <published>2018-12-16T03:28:43.000Z</published>
    <updated>2019-01-26T13:26:29.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语言实现"><a href="#语言实现" class="headerlink" title="语言实现"></a>语言实现</h1><h2 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a><a href="https://en.wikipedia.org/wiki/Compiled_language" target="_blank" rel="noopener">编译型语言</a></h2><ul><li>实现一门新编程语言的传统做法是<strong>实现一个编译器</strong>。</li><li>编译器分为前端和后端：<ul><li>前端：负责词法分析、语法分析、类型检查和中间代码生成。</li><li>后端：负责编译优化和目标代码生成。</li></ul></li><li>另一种做法是将新语言<strong>编译成某种已知语言</strong>，或者已知的中间形式（如Java 字节码）。</li><li>可以直接享用 JVM 自带的各项优化（即时编译、自动内存管理等等）。</li></ul><h2 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a><a href="https://en.wikipedia.org/wiki/Interpreted_language" target="_blank" rel="noopener">解释型语言</a></h2><ul><li>无须编译步骤，依赖于<strong>解释执行器</strong>进行<strong>解析并执行</strong>。</li><li>通常将其包装在虚拟机里（实现如即时编译、垃圾回收等其他组件）。</li><li>理想情况下，希望不同的语言实现中复用这些组件，只要实现解释执行器。</li></ul><h1 id="Truffle-项目简介"><a href="#Truffle-项目简介" class="headerlink" title="Truffle 项目简介"></a>Truffle 项目简介</h1><ul><li><strong>用 Java 写的语言实现框架。</strong></li><li>基于 Truffle 的语言可以享用由 Truffle 提供的各项运行时优化。需实现：<ul><li>用 Java 实现词法分析</li><li>语法分析</li><li>针对语法分析所生成的抽象语法树（Abstract Syntax Tree，AST）的解释执行器</li></ul></li><li><strong>可以运行在任何 JVM 上。</strong></li><li>如果 Truffle 运行在附带了 Graal 编译器的 Java 虚拟机之上，它将调用 Graal 编译器所提供的 API，<strong>主动触发对 Truffle 语言的即时编译</strong>，将对 AST 的解释执行转换为执行即时编译后的机器码。</li><li><strong>对于解释型语言</strong>，经由 Graal 编译器加速的 Truffle 语言解释器的<strong>性能十分优越</strong>。</li><li><strong>对于拥有专业即时编译器语言，仍处于追赶者的位置。</strong></li></ul><h1 id="Partial-Evaluation"><a href="#Partial-Evaluation" class="headerlink" title="Partial Evaluation"></a>Partial Evaluation</h1><ul><li>将 P: I -&gt; O 转化为 P’: ID -&gt; O</li><li>P’ 是 P 的特化（Specialization）。</li></ul><table><thead><tr><th>符号</th><th>含义</th><th>对应关系</th></tr></thead><tbody><tr><td>P</td><td>程序</td><td>Truffle 语言的解释执行器</td></tr><tr><td>P’</td><td>等价的另一段程序</td><td>通过 Partial Evaluation 特化为P’</td></tr><tr><td>I</td><td>输入</td><td></td></tr><tr><td>IS</td><td>已知常量</td><td>Truffle 语言写的程序</td></tr><tr><td>ID</td><td>未知变量</td><td></td></tr><tr><td>O</td><td>输出</td></tr></tbody></table><ul><li>可以利用 Graal 编译器将 P’ 编译为二进制码。</li></ul><h1 id="节点重写（node-rewriting）"><a href="#节点重写（node-rewriting）" class="headerlink" title="节点重写（node rewriting）"></a>节点重写（node rewriting）</h1><ul><li>动态语言中，需要在运行时动态确定操作数的具体类型。</li><li>在运行时选择语义的节点，不利于即时编译，严重影响到程序的性能。</li><li>Truffle 语言解释器会收集每个 AST 节点所代表的操作的类型，<strong>在即时编译时作出 profile 的特化</strong>（specialization）。</li><li>在即时编译过后，如果运行过程中发现<strong>实际类型和假设类型不同</strong>，会<strong>去优化</strong>返回至解释执行状态，并且<strong>重新收集 AST 节点的类型信息</strong>。</li></ul><h1 id="Polyglot"><a href="#Polyglot" class="headerlink" title="Polyglot"></a>Polyglot</h1><ul><li><strong>允许在同一段代码中混用不同的编程语言。</strong></li><li>Truffle 语言之间能够<strong>共用对象</strong>（与其他 Polyglot 框架的区别）。</li><li>Truffle 的 Polyglot 在<strong>切换语言</strong>时，<strong>性能开销非常小</strong>，甚至<strong>零开销</strong>。</li><li>通过 Polyglot API 来实现。</li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/41347" target="_blank" rel="noopener">https://time.geekbang.org/column/article/41347</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;语言实现&quot;&gt;&lt;a href=&quot;#语言实现&quot; class=&quot;headerlink&quot; title=&quot;语言实现&quot;&gt;&lt;/a&gt;语言实现&lt;/h1&gt;&lt;h2 id=&quot;编译型语言&quot;&gt;&lt;a href=&quot;#编译型语言&quot; class=&quot;headerlink&quot; title=&quot;编译型语言&quot;&gt;
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://blog.ennis.info/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://blog.ennis.info/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-34Graal：用Java编译Java</title>
    <link href="http://blog.ennis.info/2018/12/15/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-34Graal%EF%BC%9A%E7%94%A8Java%E7%BC%96%E8%AF%91Java/"/>
    <id>http://blog.ennis.info/2018/12/15/笔记-深入拆解Java虚拟机-34Graal：用Java编译Java/</id>
    <published>2018-12-15T05:49:51.000Z</published>
    <updated>2019-01-26T13:26:29.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GraalVM"><a href="#GraalVM" class="headerlink" title="GraalVM"></a>GraalVM</h1><blockquote><p>GraalVM 是一个高性能的、支持多种编程语言的执行环境。它既可以在传统的 OpenJDK 上运行，也可以通过 AOT（Ahead-Of-Time）编译成可执行文件单独运行，甚至可以集成至数据库中运行。</p></blockquote><blockquote><p>除此之外，它还移除了编程语言之间的边界，并且支持通过即时编译技术，将混杂了不同的编程语言的代码编译到同一段二进制码之中，从而实现不同语言之间的无缝切换。</p></blockquote><h1 id="Graal-编译器"><a href="#Graal-编译器" class="headerlink" title="Graal 编译器"></a>Graal 编译器</h1><blockquote><p>用 Java 写就的即时编译器，它从 Java 9u 开始便被集成自 JDK 中，作为实验性质的即时编译器。</p></blockquote><ul><li>启用时将替换掉 HotSpot 中的 C2 编译器。</li><li>响应原本 C2 负责的编译请求。</li></ul><h1 id="Graal-和-Java-虚拟机的交互"><a href="#Graal-和-Java-虚拟机的交互" class="headerlink" title="Graal 和 Java 虚拟机的交互"></a>Graal 和 Java 虚拟机的交互</h1><p>即时编译器与 JVM 的交互可以分为三个方面：</p><ol><li>响应编译请求。</li><li>获取编译所需的元数据（如类、方法、字段）和反映程序执行状态的 profile。</li><li>将生成的二进制码部署至代码缓存（code cache）里。</li></ol><ul><li>传统情况，<strong>即时编译器是与 JVM 紧耦合</strong>。</li><li>更改即时编译器需要重新编译整个 JVM。</li><li>引入 <a href="http://openjdk.java.net/jeps/243" target="_blank" rel="noopener">JVM 编译器接口</a>（JVM Compiler Interface，JVMCI）解耦合 JVM 和 Graal。</li><li><strong>Java 程序可以直接调用 Graal</strong>，编译并部署指定方法（因为JVMCI）。</li><li>Graal 的单元测试和 Truffle 语言实现框架基于上述技术。</li></ul><h1 id="Graal-和-C2-的区别"><a href="#Graal-和-C2-的区别" class="headerlink" title="Graal 和 C2 的区别"></a>Graal 和 C2 的区别</h1><ul><li>Graal 由 <strong>Java 编写</strong>，C2 由 C++ 编写。</li><li>Graal <strong>更加模块化，更容易开发与维护</strong>。</li><li>Graal 中被证实有效的部分逃逸分析（partial escape analysis）未被移植到 C2 中。</li><li>Graal 的<strong>内联算法对新语法、新语言更加友好</strong>。</li></ul><h1 id="Graal-的实现"><a href="#Graal-的实现" class="headerlink" title="Graal 的实现"></a>Graal 的实现</h1><ul><li>编译过程分为前端和后端。</li><li><strong>前端</strong>实现<strong>平台无关</strong>的优化（如方法内联），和小部分平台相关的优化。</li><li><strong>后端</strong>实现大部分<strong>平台相关</strong>优化（如寄存器分配），和<strong>生成机器码</strong>。</li><li>前端的 IR 称为 High-level IR（HIR）（如Sea-of-Nodes IR），后端的 IR 称为 Low-level IR（LIR）。</li><li>前端由一个个单独的优化阶段（optimization phase）构成。</li><li>前端编译阶段除了少数几个关键的之外，其余均可以通过配置选项开启或关闭。</li><li><strong>Graal 比 C2 更加激进</strong>，设计上<strong>十分青睐基于假设的优化手段</strong>。</li><li>Graal 支持自定义假设，和直接与去优化节点相关联。</li><li>Graal 实现高性能的 intrinsic 方法相对简单。</li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Q：GraalVM 和 JVM 是什么关系？</p><p>A：可以将 GraalVM 看成泛指带 Graal 编译器的虚拟机。</p><hr><p>Q：<strong>可不可以把 profile 和编译的机器码保存到磁盘</strong>，在代码和运行平台不变的情况下，下次启动（或部署多实例）的时候直接装载这部分数据？这算作是一种系统预热的可行性方案吗？</p><p>A：<strong>已经有这种做法</strong>，但同时需要承担 profile 不能反映当前执行状态的风险。</p><hr><p>Q：<strong>Graal 自身的及时编译是调用 Graal 自身吗？如果这么做会不会出现无穷递归？</strong></p><p>A：默认情况下，<strong>由 C1 编译Graal。调用 Graal 编译 Graal 并不会造成无穷递归。</strong>因为 JVM 里有解释执行器，能够执行 Graal 代码。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/41245" target="_blank" rel="noopener">https://time.geekbang.org/column/article/41245</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GraalVM&quot;&gt;&lt;a href=&quot;#GraalVM&quot; class=&quot;headerlink&quot; title=&quot;GraalVM&quot;&gt;&lt;/a&gt;GraalVM&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;GraalVM 是一个高性能的、支持多种编程语言的执行环境。它既可以在传统
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://blog.ennis.info/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://blog.ennis.info/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-3031Java虚拟机的监控及诊断工具</title>
    <link href="http://blog.ennis.info/2018/12/13/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-3031Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%9B%91%E6%8E%A7%E5%8F%8A%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/"/>
    <id>http://blog.ennis.info/2018/12/13/笔记-深入拆解Java虚拟机-3031Java虚拟机的监控及诊断工具/</id>
    <published>2018-12-13T07:25:33.000Z</published>
    <updated>2019-01-26T13:26:29.156Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>随便看看了解下就好。</p></blockquote><h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><h2 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h2><blockquote><p>打印所有正在运行的 Java 进程的相关信息。<a href="https://docs.oracle.com/en/java/javase/11/tools/jps.html" target="_blank" rel="noopener">帮助文档</a></p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>默认</td><td>打印 Java 进程 ID 和主类名</td></tr><tr><td>-l</td><td>打印模块名和包名</td></tr><tr><td>-v</td><td>打印传递给 JVM 的参数</td></tr><tr><td>-m</td><td>打印传递给主类的参数</td></tr></tbody></table><ul><li>如果某 Java 进程关闭了默认开启的 UsePerfData 参数 jps 命令和 jstat 命令无法探知该 Java 进程。</li></ul><h2 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h2><blockquote><p>打印目标 Java 进程的性能数据。包括多条子命令。<a href="https://docs.oracle.com/en/java/javase/11/tools/jstat.html" target="_blank" rel="noopener">帮助文档</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ jstat -options</span><br><span class="line">-class</span><br><span class="line">-compiler</span><br><span class="line">-gc</span><br><span class="line">-gccapacity</span><br><span class="line">-gccause</span><br><span class="line">-gcmetacapacity</span><br><span class="line">-gcnew</span><br><span class="line">-gcnewcapacity</span><br><span class="line">-gcold</span><br><span class="line">-gcoldcapacity</span><br><span class="line">-gcutil</span><br><span class="line">-printcompilation</span><br></pre></td></tr></table></figure><table><thead><tr><th>子命令</th><th>作用</th></tr></thead><tbody><tr><td>-class</td><td>打印类加载相关数据</td></tr><tr><td>-compiler</td><td>打印即时编译相关数据</td></tr><tr><td>-printcompilation</td><td>同上</td></tr><tr><td>-gc 前缀</td><td>打印垃圾回收相关数据</td></tr></tbody></table><ul><li>-t 参数，打印进程的启动时间。</li><li>默认情况 jstat 只打印一次性能数据。</li><li>可以配置为每隔一段时间打印一次（直至进程终止或达到最大次数）。</li></ul><h2 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h2><blockquote><p>分析 JVM 堆中的对象。包括多条子命令。<a href="https://docs.oracle.com/en/java/javase/11/tools/jmap.html" target="_blank" rel="noopener">帮助文档</a></p></blockquote><table><thead><tr><th>子命令</th><th>作用</th></tr></thead><tbody><tr><td>-clstats</td><td>打印被加载类的信息</td></tr><tr><td>-finalizerinfo</td><td>打印所有待 finalize 的对象</td></tr><tr><td>-histo</td><td>统计各个类的实例数目以及占用内存</td></tr><tr><td>-histo:live</td><td>只统计堆中的存活对象</td></tr><tr><td>-dump</td><td>导出堆的快照</td></tr><tr><td>-dump:live</td><td>只保存堆中的存活对象</td></tr></tbody></table><h2 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h2><blockquote><p>查看进程的参数。<a href="https://docs.oracle.com/en/java/javase/11/tools/jinfo.html" target="_blank" rel="noopener">帮助文档</a></p></blockquote><ul><li>可以修改进程的“manageable”虚拟机参数。</li></ul><h2 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h2><blockquote><p>打印进程中各个线程的栈轨迹和线程所持有的锁。<a href="https://docs.oracle.com/en/java/javase/11/tools/jstack.html" target="_blank" rel="noopener">帮助文档</a></p></blockquote><ul><li>死锁检测。</li></ul><h2 id="jcmd"><a href="#jcmd" class="headerlink" title="jcmd"></a>jcmd</h2><blockquote><p>替代除了 jstat 之外的所有命令。<a href="https://docs.oracle.com/en/java/javase/11/tools/jcmd.html" target="_blank" rel="noopener">帮助文档</a></p></blockquote><h1 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h1><h2 id="eclipse-MAT"><a href="#eclipse-MAT" class="headerlink" title="eclipse MAT"></a>eclipse MAT</h2><blockquote><p>解析二进制快照工具。</p></blockquote><ul><li><p>获取二级制快照的方式</p><ol><li>使用 Attach API</li><li>新建一个 JVM 运行 Attach API</li><li>使用 jmap</li></ol></li><li><p>进程启用 DisableAttachMechanism 参数时</p><ol><li>不显示</li><li>不显示</li><li>运行时报错</li></ol></li><li><p>计算对象占据内存的<a href="https://help.eclipse.org/mars/topic/org.eclipse.mat.ui.help/concepts/shallowretainedheap.html?cp=46_2_1" target="_blank" rel="noopener">两种方式</a></p><ol><li>Shallow heap：对象自身所占据的内存。</li><li>Retained heap：对象不再被引用时，垃圾回收器所能回收的总内存，包括对象自身所占据的内存，和仅能够通过该对象引用到的其他对象所占据的内存。</li></ol></li><li><p>直方图（histogram）：展示各个类的实例数目和实例的堆总和。</p></li><li><p>支配树（dominator tree）：按照每个对象 Retained heap 的大小排列支配树。</p></li><li><p>自动匹配内存泄漏常见模式，汇报潜在内存泄漏问题。<a href="https://help.eclipse.org/mars/topic/org.eclipse.mat.ui.help/tasks/runningleaksuspectreport.html?cp=46_3_1" target="_blank" rel="noopener">帮助文档</a> <a href="http://memoryanalyzer.blogspot.com/2008/05/automated-heap-dump-analysis-finding.html" target="_blank" rel="noopener">博客</a></p></li></ul><h2 id="Java-Mission-Control"><a href="#Java-Mission-Control" class="headerlink" title="Java Mission Control"></a>Java Mission Control</h2><blockquote><p>JVM 上的性能监控工具。包含一个 GUI 客户端，众多用来收集 JVM 性能数据的插件，虚拟机内置的高效 profiling 工具 Java Flight Recorder（JFR）。</p></blockquote><ul><li>JFR 的性能开销很小，默认配置下平均低于 1%。</li><li>JFR 能够直接访问虚拟机内的数据，不会影响虚拟机的优化。</li><li>适用于生产环境下满负荷运行的 Java 程序。</li><li>JFR 记录运行过程中发生的一系列事件（包括 Java 和 JVM）。</li></ul><table><thead><tr><th>事件类型</th><th>说明</th></tr></thead><tbody><tr><td>瞬时事件（Instant Event）</td><td>关心发生与否，如异常、线程启动</td></tr><tr><td>持续事件（Duration Event）</td><td>关心持续时间，如垃圾回收</td></tr><tr><td>计时事件（Timed Event）</td><td>时长超出指定阈值的持续事件</td></tr><tr><td>取样事件（Sample Event）</td><td>周期性取样的事件，如方法抽样</td></tr></tbody></table><ul><li>JFR 的取样事件比其他工具更加精确。</li><li>JFR 的 3 种启用方式<ol><li>命令行中使用 -XX:StartFlightRecording= 参数。</li><li>使用 jcmd 的 JFR.* 子命令。</li><li>使用 JMC 的 JFR 插件。</li></ol></li></ul><h2 id="VisualVM"><a href="#VisualVM" class="headerlink" title="VisualVM"></a>VisualVM</h2><blockquote><p><a href="https://visualvm.github.io/index.html" target="_blank" rel="noopener">https://visualvm.github.io/index.html</a></p></blockquote><h2 id="JITWatch"><a href="#JITWatch" class="headerlink" title="JITWatch"></a>JITWatch</h2><blockquote><p><a href="https://github.com/AdoptOpenJDK/jitwatch" target="_blank" rel="noopener">https://github.com/AdoptOpenJDK/jitwatch</a></p></blockquote><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/40821" target="_blank" rel="noopener">https://time.geekbang.org/column/article/40821</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;随便看看了解下就好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;命令行&quot;&gt;&lt;a href=&quot;#命令行&quot; class=&quot;headerlink&quot; title=&quot;命令行&quot;&gt;&lt;/a&gt;命令行&lt;/h1&gt;&lt;h2 id=&quot;jps&quot;&gt;&lt;a href=&quot;#j
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://blog.ennis.info/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://blog.ennis.info/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-33JavaAgent与字节码注入</title>
    <link href="http://blog.ennis.info/2018/12/08/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-33JavaAgent%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E6%B3%A8%E5%85%A5/"/>
    <id>http://blog.ennis.info/2018/12/08/笔记-深入拆解Java虚拟机-33JavaAgent与字节码注入/</id>
    <published>2018-12-08T08:01:16.000Z</published>
    <updated>2019-01-26T13:26:29.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="premain-方法"><a href="#premain-方法" class="headerlink" title="premain 方法"></a>premain 方法</h1><ul><li><strong>在 main 方法前执行的方法。</strong></li><li>JVM 能识别的 premain 方法参数类型是 String</li></ul><h2 id="以-Java-agent-方式运行-premain-方法"><a href="#以-Java-agent-方式运行-premain-方法" class="headerlink" title="以 Java agent 方式运行 premain 方法"></a>以 Java agent 方式运行 premain 方法</h2><ul><li>方法一：打包成 jar 包，在的 MANIFEST.MF 配置文件中，指定的 Premain-class。</li><li>方法二：通过 Attach API 远程加载。<ul><li>不会先于 main 方法执行。</li><li>取决于调用 Attach API 的时机。</li><li>运行不再是 premain 方法，而是 agentmain 方法。</li><li>更新 jar 包的 manifest 文件，包含 Agent-Class 配置。</li></ul></li><li>JVM 不限制 Java agent 的数量。</li></ul><h1 id="字节码注入"><a href="#字节码注入" class="headerlink" title="字节码注入"></a>字节码注入</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.*;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAgent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String args, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class="line">        instrumentation.addTransformer(<span class="keyword">new</span> MyTransformer());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTransformer</span> <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined,</span><br><span class="line">                                ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">            <span class="comment">//打印该数组的前四个字节，也就是 Java class 文件的魔数（magic number）0xCAFEBABE。</span></span><br><span class="line">            System.out.printf(<span class="string">"Loaded %s: 0x%X%X%X%X\n"</span>, className, classfileBuffer[<span class="number">0</span>], classfileBuffer[<span class="number">1</span>],</span><br><span class="line">                    classfileBuffer[<span class="number">2</span>], classfileBuffer[<span class="number">3</span>]);</span><br><span class="line">            <span class="comment">//如果返回 null 或抛出异常，JVM 使用原来的 byte 数组完成类加载工作。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Instrumentation</code> 接口：注册类加载时间拦截器。</li><li><code>ClassFileTransformer</code> 接口：拦截器需要实现，重写 transform 方法。</li><li><code>transform</code> 方法：<ul><li><code>byte[]</code> 参数：正在被加载的类的字节码。</li><li><code>byte[]</code> 返回值：更新过后的类的字节码。</li></ul></li></ul><h2 id="redefine-和-retransform（不懂，怎么实现？）"><a href="#redefine-和-retransform（不懂，怎么实现？）" class="headerlink" title="redefine 和 retransform（不懂，怎么实现？）"></a>redefine 和 retransform（不懂，怎么实现？）</h2><ul><li>要求传入所需类实例。</li></ul><h3 id="redefine"><a href="#redefine" class="headerlink" title="redefine"></a>redefine</h3><blockquote><p>舍弃原本的字节码，并替换成由用户提供的 byte 数组。</p></blockquote><ul><li><strong>比较危险，一般用于修复出错了的字节码。</strong></li></ul><h3 id="retransform"><a href="#retransform" class="headerlink" title="retransform"></a>retransform</h3><blockquote><p>针对所传入的类，重新调用所有已注册的 ClassFileTransformer 的 transform 方法。</p></blockquote><ul><li>使用 retransform <strong>注入已加载但未注入的类</strong>。</li></ul><p>在执行 premain 或者 agentmain 方法前，JVM 早已加载了不少类，这些类的加载事件并没有被拦截。</p><ul><li>定义了多个 Java agent，多个注入的情况下，移除部分注入。</li></ul><h1 id="JVMTI-agent（不懂）"><a href="#JVMTI-agent（不懂）" class="headerlink" title="JVMTI agent（不懂）"></a>JVMTI agent（不懂）</h1><blockquote><p>JVMTI 是一个事件驱动的工具实现接口。</p></blockquote><ul><li>Java agent 通过 JVMTI agent（C agent）实现。</li><li>在 C agent 加载后的入口方法 Agent_OnLoad 注册各个事件的钩子（hook）方法。</li><li>JVM 触发这些事件时，调用对应的钩子方法。</li></ul><p>为 JVMTI 中的 ClassFileLoadHook 事件设置钩子，在 C 层面拦截所有的类加载事件。</p><p><a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html#EventIndex" target="_blank" rel="noopener">关于 JVMTI 的其他事件</a></p><h1 id="基于字节码注入的-profiler"><a href="#基于字节码注入的-profiler" class="headerlink" title="基于字节码注入的 profiler"></a>基于字节码注入的 profiler</h1><ul><li>实现代码覆盖工具，或者各式各样的 profiler。</li><li>在某一程序行为的周围，注入某运行时类方法的调用，表示该程序行为正要发生或已经发生。</li><li>需排除对 JDK 类和运行时类的注入（可能造成死循环调用）。</li><li>设置一个线程私有标识位，区分应用代码上下文和注入代码上下文。（不懂）</li><li>借助自定义类加载器来隔离命名空间。</li><li>观察者效应（observer effect）对所收集的数据造成的影响。</li><li>使用字节码注入开发 profiler 时，需要辩证地看待所收集的数据。</li><li>仅表示在被注入的情况下程序的执行状态，不是没有注入情况下的程序执行状态。</li></ul><h1 id="面向方面（切面）编程（AOP）"><a href="#面向方面（切面）编程（AOP）" class="headerlink" title="面向方面（切面）编程（AOP）"></a>面向方面（切面）编程（AOP）</h1><ul><li>字节码注入实现。</li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Q：如何注入方法出口。除了正常执行路径之外，还需考虑异常执行路径。</p><p>A：不用管有没有 catch 块，有没有 throw，直接给所有代码罩一个 catch any 的异常处理就行了。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/41186" target="_blank" rel="noopener">https://time.geekbang.org/column/article/41186</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;premain-方法&quot;&gt;&lt;a href=&quot;#premain-方法&quot; class=&quot;headerlink&quot; title=&quot;premain 方法&quot;&gt;&lt;/a&gt;premain 方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在 main 方法前执行的方法。&lt;/strong
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://blog.ennis.info/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://blog.ennis.info/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-27注解处理器</title>
    <link href="http://blog.ennis.info/2018/12/06/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-27%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <id>http://blog.ennis.info/2018/12/06/笔记-深入拆解Java虚拟机-27注解处理器/</id>
    <published>2018-12-06T10:17:16.000Z</published>
    <updated>2019-01-26T13:26:29.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解处理器（annotation-processor）"><a href="#注解处理器（annotation-processor）" class="headerlink" title="注解处理器（annotation processor）"></a>注解处理器（annotation processor）</h1><ul><li>可以为 Java 编译器<strong>添加编译规则</strong>。</li><li>可以<strong>修改</strong>已有的 Java <strong>源文件</strong>。</li><li>可以<strong>生成</strong>新的 Java <strong>源文件</strong>。</li></ul><h1 id="注解处理器的原理"><a href="#注解处理器的原理" class="headerlink" title="注解处理器的原理"></a>注解处理器的原理</h1><h2 id="Java-编译器的工作流程"><a href="#Java-编译器的工作流程" class="headerlink" title="Java 编译器的工作流程"></a>Java 编译器的工作流程</h2><p><img src="/images/posts/JVM/27/compilation_process.png" alt="compilation_process"></p><ol><li><strong>将源文件解析为抽象语法树。</strong></li><li><strong>调用已注册的注解处理器。</strong></li><li><strong>生成字节码。</strong></li></ol><ul><li>2 调用注解处理器生成了新的源文件将重复 1、2。</li></ul><h2 id="实现注解处理器"><a href="#实现注解处理器" class="headerlink" title="实现注解处理器"></a>实现注解处理器</h2><h3 id="Processor-接口"><a href="#Processor-接口" class="headerlink" title="Processor 接口"></a>Processor 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不用构造器</span></span><br><span class="line">    <span class="comment">//注解处理器的实例通过反射生成</span></span><br><span class="line">    <span class="comment">//注解处理器类需要定义一个无参数构造器</span></span><br><span class="line">    <span class="comment">//注解处理器通常不声明任何构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放注解处理器的初始化代码</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回注解处理器所支持的注解类型</span></span><br><span class="line">    <span class="comment">//注解类型用字符串形式表示</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回该处理器支持的 Java 版本</span></span><br><span class="line">    <span class="comment">//通常版本与 Java 编译器版本一致</span></span><br><span class="line">    <span class="function">SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//注解处理方法</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//剩余方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JDK 提供了一个实现 Processor 接口的抽象类 AbstractProcessor。</p><blockquote><p>该抽象类实现了 init、getSupportedAnnotationTypes 和 getSupportedSourceVersion方法。<br>它的子类可以通过 @SupportedAnnotationTypes 和 @SupportedSourceVersion 注解来声明所支持的注解类型以及 Java 版本。</p></blockquote></blockquote><ul><li>所有的<strong>注解处理器类需要实现 Processor 接口</strong>。</li></ul><h3 id="注册-Java-编译器的插件"><a href="#注册-Java-编译器的插件" class="headerlink" title="注册 Java 编译器的插件"></a>注册 Java 编译器的插件</h3><ul><li>方法一：直接使用 javac 命令的 -processor 参数。</li><li>方法二：将注解处理器编译生成的 class 文件压缩入 jar 包中，在 jar 包配置文件中记录该注解处理器的包名及类名。</li></ul><p>启动 Java 编译器时，会寻找 classpath 路径上的 jar 包是否包含上述配置文件，并自动注册其中记录的注解处理器。</p><ul><li>方法三：在 IDE 中配置注解处理器。</li></ul><h1 id="利用注解处理器修改已有的源码"><a href="#利用注解处理器修改已有的源码" class="headerlink" title="利用注解处理器修改已有的源码"></a>利用注解处理器修改已有的源码</h1><blockquote><p>注解处理器并不能真正地修改已有源代码。这里指的是修改由 Java 源代码生成的抽象语法树，在其中修改已有树节点或者插入新的树节点，从而使生成的字节码发生变化。</p></blockquote><ul><li><strong>修改抽象语法树</strong>涉及 Java 编译器的内部 API，<strong>可能随着版本变更失效</strong>。</li></ul><h1 id="利用注解处理器生成新的源码"><a href="#利用注解处理器生成新的源码" class="headerlink" title="利用注解处理器生成新的源码"></a>利用注解处理器生成新的源码</h1><ul><li>通过 Filer.createSourceFile 方法获得一个文件的概念。</li><li>并通过 PrintWriter 将具体的内容写入。</li></ul><h1 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h1><ul><li><a href="https://docs.oracle.com/javase/10/docs/api/javax/lang/model/element/package-summary.html" target="_blank" rel="noopener">Element 类 API 3</a></li><li><a href="http://notatube.blogspot.com/2010/11/project-lombok-trick-explained.html" target="_blank" rel="noopener">修改抽象语法树 API</a><ul><li><a href="http://jnb.ociweb.com/jnb/jnbJan2010.html#controversy" target="_blank" rel="noopener">Lombok 的回应</a></li></ul></li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/40189" target="_blank" rel="noopener">https://time.geekbang.org/column/article/40189</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;注解处理器（annotation-processor）&quot;&gt;&lt;a href=&quot;#注解处理器（annotation-processor）&quot; class=&quot;headerlink&quot; title=&quot;注解处理器（annotation processor）&quot;&gt;&lt;/a&gt;注解处理器
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://blog.ennis.info/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://blog.ennis.info/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-32JNI的运行机制</title>
    <link href="http://blog.ennis.info/2018/12/05/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-32JNI%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>http://blog.ennis.info/2018/12/05/笔记-深入拆解Java虚拟机-32JNI的运行机制/</id>
    <published>2018-12-05T08:27:03.000Z</published>
    <updated>2019-01-26T13:26:29.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-无法表达的场景"><a href="#Java-无法表达的场景" class="headerlink" title="Java 无法表达的场景"></a>Java 无法表达的场景</h1><ul><li>使用汇编语言提升关键代码的性能。</li><li>调用 Java 核心类库无法提供的，某个体系架构或者操作系统特有的功能。</li><li>牺牲可移植性，在 Java 代码中调用 C/C++ 代码实现。</li></ul><p>这种跨语言调用，需要借助 Java Native Interface 机制。</p><h1 id="native-方法的链接"><a href="#native-方法的链接" class="headerlink" title="native 方法的链接"></a>native 方法的链接</h1><ul><li>动态链接库的名字以 lib 为前缀，以 .dylib 或 .so 为扩展名。</li><li>通过 <code>System.loadLibrary(&quot;---&quot;)</code> 方法加载 lib—.dylib。</li><li>如果库不在当前路径下，可以配置 java.library.path 参数指向路径（JVM 启动时）。</li></ul><h2 id="JVM-自动查找符合默认命名规范的-C-函数并链接"><a href="#JVM-自动查找符合默认命名规范的-C-函数并链接" class="headerlink" title="JVM 自动查找符合默认命名规范的 C 函数并链接"></a>JVM 自动查找符合默认命名规范的 C 函数并链接</h2><ul><li><code>javac -h</code> 命令可以根据 native 方法声明，自动生成包含符合命名规范的 C 函数的头文件。</li></ul><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul><li>函数都要以Java_为前缀，后跟完整的包名和方法名。<ul><li>路径中 / 转换为 _</li><li>原方法名中 _ 转换为 _1</li></ul></li><li>有重载 native 方法时，自动链接对象时的考虑参数类型。</li><li>重载方法函数名在原本基础上追加 __ 以及方法描述符作为后缀。</li><li>方法描述符的特殊符号会被替换。<ul><li>引用类型中 ; 替换为 _2</li><li>数组类型中 [ 替换为 _3</li></ul></li></ul><h2 id="在-C-代码中主动链接"><a href="#在-C-代码中主动链接" class="headerlink" title="在 C 代码中主动链接"></a>在 C 代码中主动链接</h2><ul><li>对 C 函数名没有要求。</li><li>通常使用一个名为 registerNatives 的 native 方法，按照第一种链接方式定义所能自动链接的 C 函数。在该函数中，手动链接该类的其他 native 方法。</li><li>需要在其他 native 方法被调用之前完成链接。</li><li>通常在类的初始化方法里调用该 registerNatives 方法。</li></ul><h1 id="JNI-的-API"><a href="#JNI-的-API" class="headerlink" title="JNI 的 API"></a>JNI 的 API</h1><ul><li><strong>C 代码中可以使用 Java 的语言特性</strong>（如 instanceof，通过特殊的 JNI 函数实现）。</li></ul><h2 id="JNIEnv"><a href="#JNIEnv" class="headerlink" title="JNIEnv"></a>JNIEnv</h2><ul><li>JVM 会将所有 JNI 函数的函数指针聚合到一个名为 JNIEnv 的数据结构中。</li><li><strong>JNIEnv 线程私有</strong>，每个线程都拥有一个 JNIEnv。</li><li>规定 C 代码<strong>不能共享 JNIEnv 给其他线程</strong>，否则 JNI 函数无法保证正确性。</li></ul><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><ol><li>给 JNI 函数提供一个单独命名空间。</li><li>允许 JVM 通过更改函数指针替换 JNI 函数的具体实现。</li></ol><h2 id="Java-类型与本地类型"><a href="#Java-类型与本地类型" class="headerlink" title="Java 类型与本地类型"></a>Java 类型与本地类型</h2><ul><li>JNI 会<strong>将 Java 层面的基本类型以及引用类型映射为另一套可供 C 代码使用的数据结构</strong>。</li></ul><p>基本类型对应关系：</p><table><thead><tr><th>Java 类型</th><th>c 数据结构</th><th>位（bit）</th></tr></thead><tbody><tr><td>boolean</td><td>jboolean</td><td>8, unsigned</td></tr><tr><td>byte</td><td>jbyte</td><td>8</td></tr><tr><td>char</td><td>jchar</td><td>16, unsigned</td></tr><tr><td>short</td><td>jshort</td><td>16</td></tr><tr><td>int</td><td>jint</td><td>32</td></tr><tr><td>long</td><td>jlong</td><td>64</td></tr><tr><td>float</td><td>jfloat</td><td>32</td></tr><tr><td>double</td><td>jdouble</td><td>64</td></tr><tr><td>void</td><td>void</td><td>n/a</td></tr></tbody></table><p>引用类型对应数据结构的继承关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">jobject</span><br><span class="line">|- jclass (java.lang.Class objects)</span><br><span class="line">|- jstring (java.lang.String objects)</span><br><span class="line">|- jthrowable (java.lang.Throwable objects)</span><br><span class="line">|- jarray (arrays)</span><br><span class="line">   |- jobjectArray (object arrays)</span><br><span class="line">   |- jbooleanArray (boolean arrays)</span><br><span class="line">   |- jbyteArray (byte arrays)</span><br><span class="line">   |- jcharArray (char arrays)</span><br><span class="line">   |- jshortArray (short arrays)</span><br><span class="line">   |- jintArray (int arrays)</span><br><span class="line">   |- jlongArray (long arrays)</span><br><span class="line">   |- jfloatArray (float arrays)</span><br><span class="line">   |- jdoubleArray (double arrays)</span><br></pre></td></tr></table></figure><ul><li>JNI 访问字段类似反射 API。</li></ul><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><ul><li><strong>调用 JNI 函数时，JVM 便已生成异常实例，并缓存在内存中。</strong></li><li>不会显式地跳转至异常处理器或者调用者中，而是继续执行接下来的 C 代码。</li><li>从可能触发异常的 JNI 函数返回时，需要<strong>通过 JNI 函数 ExceptionOccurred 检查是否发生了异常</strong>，并且作出相应的处理。</li><li>如果无须抛出该异常，需要<strong>通过 JNI 函数 ExceptionClear 显式地清空已缓存的异常</strong>。</li></ul><h1 id="局部引用（Local-Reference）与全局引用（Global-Reference）"><a href="#局部引用（Local-Reference）与全局引用（Global-Reference）" class="headerlink" title="局部引用（Local Reference）与全局引用（Global Reference）"></a>局部引用（Local Reference）与全局引用（Global Reference）</h1><ul><li>C 代码中可以访问所传入的引用类型参数。</li><li>可以通过 JNI 函数创建新的 Java 对象。</li><li>JVM 需要一种机制告知垃圾回收算法不要回收 C 代码中可能引用到的 Java 对象。</li><li>垃圾回收算法会将被<strong>局部引用</strong>和<strong>全局引用</strong>指向的对象标记为<strong>不可回收</strong>。</li><li>无论是传入的引用类型参数，还是通过 JNI 函数（除NewGlobalRef及NewWeakGlobalRef之外）返回的引用类型对象，都属于局部引用。</li><li><strong>从 C 函数中返回至 Java 方法中，局部引用将失效</strong>。</li><li>不能缓存局部引用，以供另一 C 线程或下一次 native 方法调用时使用。</li><li>通过 JNI 函数 NewGlobalRef，将该局部引用转换为全局引用。</li><li>通过 JNI 函数 DeleteGlobalRef 消除全局引用。</li><li>C 函数运行时间极其长时，应该考虑通过 JNI 函数DeleteLocalRef，消除不再使用的局部引用。</li></ul><h1 id="句柄（handle）"><a href="#句柄（handle）" class="headerlink" title="句柄（handle）"></a>句柄（handle）</h1><blockquote><p>句柄指的是内存中 Java 对象的指针的指针。</p><blockquote><p>垃圾回收器可能会移动对象在内存中的位置，JVM 需要另一种机制保证局部引用或者全局引用将正确地指向移动过后的对象。HotSpot 虚拟机是通过句柄（handle）来完成。</p></blockquote></blockquote><ul><li><strong>局部引用和全局引用都是句柄。</strong></li><li>局部引用句柄的两种存储方式<ol><li>在本地方法栈帧中：主要用于存放 C 函数所接收的来自 Java 层面的引用类型参数。</li><li>在线程私有的句柄块：主要用于存放 C 函数中创建的局部引用。</li></ol></li><li>从 C 函数返回至 Java 方法时，<strong>本地方法栈帧</strong>中的句柄将会被<strong>自动清除</strong>。</li><li><strong>线程私有句柄块</strong>需要 JVM <strong>显式清理</strong>。</li></ul><h1 id="JNI-调用的额外性能开销"><a href="#JNI-调用的额外性能开销" class="headerlink" title="JNI 调用的额外性能开销"></a>JNI 调用的额外性能开销</h1><ul><li><strong>进入 C 函数时对引用类型参数的句柄化。</strong></li><li><strong>调整参数位置</strong>（C 调用和 Java 调用传参的方式不一样）。</li><li><strong>从 C 函数返回时清理线程私有句柄块。</strong></li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/40839" target="_blank" rel="noopener">https://time.geekbang.org/column/article/40839</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-无法表达的场景&quot;&gt;&lt;a href=&quot;#Java-无法表达的场景&quot; class=&quot;headerlink&quot; title=&quot;Java 无法表达的场景&quot;&gt;&lt;/a&gt;Java 无法表达的场景&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用汇编语言提升关键代码的性能。&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://blog.ennis.info/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://blog.ennis.info/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-2829基准测试框架JMH</title>
    <link href="http://blog.ennis.info/2018/12/04/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-2829%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6JMH/"/>
    <id>http://blog.ennis.info/2018/12/04/笔记-深入拆解Java虚拟机-2829基准测试框架JMH/</id>
    <published>2018-12-04T09:12:22.000Z</published>
    <updated>2019-01-26T13:26:29.148Z</updated>
    
    <content type="html"><![CDATA[<p>通过 <code>System.nanoTime</code> 或者 <code>System.currentTimeMillis</code> 来测量程序所花费的时间过于理性化，忽略了 Java 虚拟机、操作系统，硬件系统所带来的影响。</p><h1 id="性能测试的坑"><a href="#性能测试的坑" class="headerlink" title="性能测试的坑"></a>性能测试的坑</h1><h2 id="Java-虚拟机的影响"><a href="#Java-虚拟机的影响" class="headerlink" title="Java 虚拟机的影响"></a>Java 虚拟机的影响</h2><ul><li>Java 虚拟机堆空间的自适配</li><li>即时编译</li><li>循环展开</li><li>等</li></ul><h2 id="操作系统和硬件系统的影响"><a href="#操作系统和硬件系统的影响" class="headerlink" title="操作系统和硬件系统的影响"></a>操作系统和硬件系统的影响</h2><ul><li>电源管理策略</li><li>CPU 缓存</li><li>分支预测器</li><li>超线程技术</li><li>等</li></ul><h1 id="JMH（Java-Microbenchmark-Harness）"><a href="#JMH（Java-Microbenchmark-Harness）" class="headerlink" title="JMH（Java Microbenchmark Harness）"></a>JMH（Java Microbenchmark Harness）</h1><blockquote><p> OpenJDK 中的开源项目。是一个面向 Java 语言或者其他 Java 虚拟机语言的性能基准测试框架。</p></blockquote><ul><li>JMH 内置许多功能来控制即时编译器的优化。</li><li>其他影响性能评测的因素也提供了不少策略降低影响，甚至彻底解决。</li></ul><h1 id="如何使用-JMH"><a href="#如何使用-JMH" class="headerlink" title="如何使用 JMH"></a>如何使用 JMH</h1><p><a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br><a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/40275" target="_blank" rel="noopener">https://time.geekbang.org/column/article/40275</a><br><a href="https://time.geekbang.org/column/article/40281" target="_blank" rel="noopener">https://time.geekbang.org/column/article/40281</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过 &lt;code&gt;System.nanoTime&lt;/code&gt; 或者 &lt;code&gt;System.currentTimeMillis&lt;/code&gt; 来测量程序所花费的时间过于理性化，忽略了 Java 虚拟机、操作系统，硬件系统所带来的影响。&lt;/p&gt;
&lt;h1 id=&quot;性能测试的
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://blog.ennis.info/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://blog.ennis.info/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-26向量化</title>
    <link href="http://blog.ennis.info/2018/12/03/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-26%E5%90%91%E9%87%8F%E5%8C%96/"/>
    <id>http://blog.ennis.info/2018/12/03/笔记-深入拆解Java虚拟机-26向量化/</id>
    <published>2018-12-03T02:25:32.000Z</published>
    <updated>2019-01-26T13:26:29.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SIMD"><a href="#SIMD" class="headerlink" title="SIMD"></a>SIMD</h1><table><thead><tr><th>寄存器名称</th><th>所属指令集</th><th>位数</th><th>备注</th></tr></thead><tbody><tr><td>XMM 寄存器</td><td>SSE（Streaming SIMD Extensions）指令集</td><td>128 位</td><td></td></tr><tr><td>YMM 寄存器</td><td>AVX（Advanced Vector Extensions）指令集</td><td>256 位</td><td>XMM升级版</td></tr><tr><td>ZMM 寄存器</td><td>AVX512 指令集</td><td>512 位</td><td>YMM升级版</td></tr></tbody></table><p><img src="/images/posts/JVM/26/registers.png" alt="registers"></p><p>原本使用 XMM 寄存器的指令，使用 YMM 寄存器的低 128 位。</p><p>支持 AVX512 指令集的 CPU 都比较贵，目前在生产环境中很少见到。</p><p>HotSpot 虚拟机更新了不少基于 AVX512 指令集以及 ZMM 寄存器的优化。</p><blockquote><p>单指令流多数据流（Single Instruction Multiple Data，SIMD）：即通过单条指令操控多组数据的计算操作。这些指令称之为 SIMD 指令。</p></blockquote><ul><li><p>SIMD 指令将上述寄存器中的<strong>值看成多个整数或者浮点数组成的向量</strong>，进行<strong>批量计算</strong>。</p><p>  <img src="/images/posts/JVM/26/XMM_register.png" alt="XMM_register"></p><ul><li>128 位 XMM 寄存器里的值可以看成 16 个 byte 值组成的向量，或者 8 个 short 值组成的向量，4 个 int 值组成的向量，两个 long 值组成的向量。</li></ul></li><li><p>SIMD 指令PADDB、PADDW、PADDD以及PADDQ，将分别实现 byte 值、short 值、int 值或者 long 值的向量加法。</p></li></ul><p><img src="/images/posts/JVM/26/PADDD.png" alt="PADDD"></p><ul><li>SIMD 指令也被看成 <strong>CPU 指令级别的并行</strong>。</li></ul><h1 id="使用-SIMD-指令的-HotSpot-Intrinsic"><a href="#使用-SIMD-指令的-HotSpot-Intrinsic" class="headerlink" title="使用 SIMD 指令的 HotSpot Intrinsic"></a>使用 SIMD 指令的 HotSpot Intrinsic</h1><ul><li><p>SIMD 指令虽然非常高效，但是<strong>使用很麻烦</strong>。</p></li><li><p>不同的 CPU 所支持的 SIMD 指令可能不同。</p></li><li><p><strong>Java 程序无法像 C++ 程序那样</strong>，直接<strong>使用由 Intel 提供的</strong>，将被替换为具体 SIMD 指令的 <strong>intrinsic 方法</strong>。</p></li><li><p><strong>HotSpot 虚拟机提供 Java 层面的 intrinsic 方法</strong>，这些 intrinsic 方法的语义要<strong>比单个 SIMD 指令复杂得多</strong>。</p></li><li><p>使用 SIMD 指令的 HotSpot intrinsic 是虚拟机开发人员根据其语义定制的，因而性能相当优越。</p></li><li><p>由于<strong>开发及维护成本较高</strong>，这种类型的 intrinsic 屈指可数。</p></li><li><p><strong>intrinsic 方法只能做到点覆盖</strong>，在多数情况下，应用程序不会用到这些 intrinsic 的语义，却又存在向量化优化的机会（借助自动向量化）。</p></li></ul><h1 id="自动向量化（auto-vectorization）"><a href="#自动向量化（auto-vectorization）" class="headerlink" title="自动向量化（auto vectorization）"></a>自动向量化（auto vectorization）</h1><ul><li><p>即时编译器的自动向量化将针对<strong>能够展开的计数循环，进行向量化优化</strong>。</p></li><li><p><a href="/2018/11/24/笔记-深入拆解Java虚拟机-25循环优化/#计数循环需满足的-4-个条件">计数循环的判定</a></p></li><li><p>自动向量化的条件较为苛刻。</p></li><li><p><strong>C2 支持的整数向量化操作不多</strong>（加法，减法，按位与、或、异或，以及批量移位和批量乘法）。</p></li><li><p>C2 支持<strong>向量点积的自动向量化</strong>，需要多条 SIMD 指令完成，并不是十分高效。</p></li></ul><!-- - 为了解决向量化 intrinsic 以及自动向量化覆盖面过窄的问题，在 OpenJDK 的 [Paname 项目](http://openjdk.java.net/projects/panama/) 中尝试引入开发人员可控的向量化抽象（[参考 Vladimir Ivanov 2018 年在 JVMLS 上的演讲](http://cr.openjdk.java.net/~vlivanov/talks/2018_JVMLS_VectorAPI.pdf)）。--><h2 id="自动向量化的条件"><a href="#自动向量化的条件" class="headerlink" title="自动向量化的条件"></a>自动向量化的条件</h2><ol><li>循环变量的<strong>增量为 1</strong>（能够遍历整个数组）。</li><li>循环变量<strong>不能为 long 类型</strong>（ C2 无法将循环识别为计数循环）。</li><li>循环<strong>迭代之间最好不要有数据依赖</strong>（循环展开之后，循环体内存在数据依赖，C2 无法进行自动向量化）。</li><li>循环体内<strong>不要有分支跳转</strong>。</li><li><strong>不要手工进行循环展开</strong>（如果 C2 无法自动展开，也无法进行自动向量化）。</li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/39838" target="_blank" rel="noopener">https://time.geekbang.org/column/article/39838</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SIMD&quot;&gt;&lt;a href=&quot;#SIMD&quot; class=&quot;headerlink&quot; title=&quot;SIMD&quot;&gt;&lt;/a&gt;SIMD&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;寄存器名称&lt;/th&gt;
&lt;th&gt;所属指令集&lt;/th&gt;
&lt;th&gt;位数&lt;/th&gt;
&lt;t
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://blog.ennis.info/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://blog.ennis.info/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-25循环优化</title>
    <link href="http://blog.ennis.info/2018/11/24/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-25%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.ennis.info/2018/11/24/笔记-深入拆解Java虚拟机-25循环优化/</id>
    <published>2018-11-24T10:59:41.000Z</published>
    <updated>2019-01-26T13:26:29.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="循环无关代码外提"><a href="#循环无关代码外提" class="headerlink" title="循环无关代码外提"></a>循环无关代码外提</h1><blockquote><p>所谓的循环无关代码（Loop-invariant Code），指的是循环中值不变的表达式。</p></blockquote><ul><li>在<strong>不改变程序语义</strong>的情况下，将<strong>循环无关代码提出循环之外</strong>。</li></ul><h2 id="外提循环中值不变的表达式"><a href="#外提循环中值不变的表达式" class="headerlink" title="外提循环中值不变的表达式"></a>外提循环中值不变的表达式</h2><ul><li>通过 Sea-of-Nodes IR 以及节点调度共同完成。</li></ul><h2 id="外提循环无关检测"><a href="#外提循环无关检测" class="headerlink" title="外提循环无关检测"></a>外提循环无关检测</h2><ul><li>通过循环预测（Loop Prediction）完成。</li></ul><p>比如 null 检测（null check），数组下标范围检测（range check）。</p><p>null 检测涉及控制流依赖，无法通过 Sea-of-Nodes IR 转换以及节点调度外提。</p><h1 id="循环展开（Loop-Unrolling）"><a href="#循环展开（Loop-Unrolling）" class="headerlink" title="循环展开（Loop Unrolling）"></a>循环展开（Loop Unrolling）</h1><blockquote><p>指的是在循环体中重复多次循环迭代，并<strong>减少循环次数</strong>的编译优化。</p></blockquote><ul><li>在 C2 中，<strong>只有计数循环</strong>（Counted Loop）才能被展开。</li><li>随着循环体的增大，优化机会不断增加。</li><li>如果循环展开能够触发进一步优化，总体的代码复杂度将降低。</li><li>缺点：可能会<strong>增加代码的冗余度</strong>，导致所生成机器码的长度大幅上涨。</li></ul><h2 id="循环完全展开（Full-Unroll）"><a href="#循环完全展开（Full-Unroll）" class="headerlink" title="循环完全展开（Full Unroll）"></a>循环完全展开（Full Unroll）</h2><ul><li>当<strong>循环数目</strong>是<strong>固定值</strong>而且<strong>非常小</strong>时，会将<strong>循环全部展开</strong>（Full Unroll）。</li><li>仅迭代三次（或以下）的循环，即时编译器将进行完全展开。</li><li>循环体 IR 节点数目超过阈值的循环，即时编译器不会进行任何循环展开。</li></ul><h2 id="计数循环需满足的-4-个条件"><a href="#计数循环需满足的-4-个条件" class="headerlink" title="计数循环需满足的 4 个条件"></a>计数循环需满足的 4 个条件</h2><ol><li>维护一个循环计数器，并且基于计数器的循环出口只有一个（但可以有基于其他判断条件的出口）。</li><li>循环计数器的类型为 int、short 或者 char（即不能是 byte、long，更不能是 float 或者 double）。</li><li>每个迭代循环计数器的增量为常数。</li><li>循环计数器的上限（增量为正数）或下限（增量为负数）是循环无关的数值。</li></ol><h1 id="循环判断外提（loop-unswitching）"><a href="#循环判断外提（loop-unswitching）" class="headerlink" title="循环判断外提（loop unswitching）"></a>循环判断外提（loop unswitching）</h1><blockquote><p>指的是<strong>将循环中的 if 语句外提至循环之前</strong>，并且在该 if 语句的两个分支中分别放置一份循环代码。</p></blockquote><ul><li>与循环无关检测外提所针对的代码模式比较类似。</li></ul><h1 id="循环剥离（loop-peeling）"><a href="#循环剥离（loop-peeling）" class="headerlink" title="循环剥离（loop peeling）"></a>循环剥离（loop peeling）</h1><blockquote><p>指的是将循环的前几个迭代或者后几个迭代剥离出循环的优化方式。</p></blockquote><ul><li>一般来说，循环的<strong>前几个迭代</strong>或者<strong>后几个迭代</strong>都包含<strong>特殊处理</strong>。</li><li>剥离出去后，可以<strong>使原本的循环体的规律性更加明显</strong>，触发进一步的优化。</li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Q：</p><p>如果有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( ... ) &#123;</span><br><span class="line">sum += x + y + a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借助 Sea-of-Nodes IR 能把 x + y 表达式外提出去。但，如果表达式变成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum += x + a[i] + y;</span><br></pre></td></tr></table></figure><p>也能借助 IR 外提  x + y 吗？</p><p>A：能。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/39814" target="_blank" rel="noopener">https://time.geekbang.org/column/article/39814</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;循环无关代码外提&quot;&gt;&lt;a href=&quot;#循环无关代码外提&quot; class=&quot;headerlink&quot; title=&quot;循环无关代码外提&quot;&gt;&lt;/a&gt;循环无关代码外提&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;所谓的循环无关代码（Loop-invariant Code），指的
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://blog.ennis.info/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://blog.ennis.info/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-24字段访问相关优化</title>
    <link href="http://blog.ennis.info/2018/11/22/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-24%E5%AD%97%E6%AE%B5%E8%AE%BF%E9%97%AE%E7%9B%B8%E5%85%B3%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.ennis.info/2018/11/22/笔记-深入拆解Java虚拟机-24字段访问相关优化/</id>
    <published>2018-11-22T11:20:50.000Z</published>
    <updated>2019-01-26T13:26:29.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字段读取优化"><a href="#字段读取优化" class="headerlink" title="字段读取优化"></a>字段读取优化</h1><ul><li><p>即时编译器会<strong>优化实例字段和静态字段访问</strong>，以减少总的内存访问数目。</p><ul><li>沿控制流，缓存各个字段存储节点将要存储的值，或者字段读取节点所得到的值。</li><li>遇到对同一字段的读取节点时，如果缓存值还没有失效，将读取节点替换为该缓存值。</li><li>遇到对同一字段的存储节点时，更新所缓存的值。</li><li>遇到可能更新字段的节点时，采取保守策略，舍弃所有缓存值。</li></ul></li><li><p>如果字段读取节点被替换成一个常量，将进一步触发更多优化。</p><ul><li>删除不可达条件分支代码，死循环后的代码。</li></ul></li><li><p>即时编译器将在 volatile 字段访问前后插入内存屏障节点。</p></li><li><strong>内存屏障节点会阻止即时编译器将屏障之前所缓存的值用于屏障之后的读取节点之上。</strong></li><li><strong>加锁、解锁操作会阻止即时编译器的字段读取优化。</strong></li></ul><h1 id="字段存储优化"><a href="#字段存储优化" class="headerlink" title="字段存储优化"></a>字段存储优化</h1><ul><li>即时编译器会<strong>消除冗余的存储节点</strong>。</li><li>如果字段被标记为 <strong>volatile</strong>，即时编译器<strong>不能</strong>将冗余的存储操作<strong>消除</strong>掉。</li></ul><h1 id="死代码消除（dead-code-eliminiation）"><a href="#死代码消除（dead-code-eliminiation）" class="headerlink" title="死代码消除（dead code eliminiation）"></a>死代码消除（dead code eliminiation）</h1><ul><li><strong>消除局部变量的死存储</strong>（dead store）（涉及冗余存储）。</li><li><strong>消除不可达分支。</strong></li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Q：思考即时编译器会怎么优化下面代码中的除法操作？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t = x/y;</span><br><span class="line">t = x+y;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A：<strong>除法无法优化，因为可能存在除零异常。</strong>s即时编译器需要判断除数是否为 0。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/39683" target="_blank" rel="noopener">https://time.geekbang.org/column/article/39683</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字段读取优化&quot;&gt;&lt;a href=&quot;#字段读取优化&quot; class=&quot;headerlink&quot; title=&quot;字段读取优化&quot;&gt;&lt;/a&gt;字段读取优化&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;即时编译器会&lt;strong&gt;优化实例字段和静态字段访问&lt;/strong&gt;，以减少总的内存访
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://blog.ennis.info/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://blog.ennis.info/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>笔记-深入拆解Java虚拟机-23逃逸分析</title>
    <link href="http://blog.ennis.info/2018/11/15/%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-23%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/"/>
    <id>http://blog.ennis.info/2018/11/15/笔记-深入拆解Java虚拟机-23逃逸分析/</id>
    <published>2018-11-15T08:40:59.000Z</published>
    <updated>2019-01-26T13:26:29.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h1><blockquote><p>一种确定<strong>指针动态范围</strong>的<strong>静态分析</strong>，它可以分析在程序的哪些地方可以访问到指针。</p></blockquote><ul><li>在 JVM 的<strong>即时编译</strong>语境下，逃逸分析将<strong>判断新建的对象是否逃逸</strong>。</li></ul><h2 id="判断对象是否逃逸的依据"><a href="#判断对象是否逃逸的依据" class="headerlink" title="判断对象是否逃逸的依据"></a>判断对象是否逃逸的依据</h2><ul><li>对象是否被<strong>存入堆</strong>中（静态字段或者堆中对象的实例字段）。</li><li><p>对象是否被<strong>传入未知代码</strong>中（对象是否作为方法调用的调用者或者参数）。</p><ul><li>方法中未被内联的方法调用当成未知代码。</li><li>可以认为<strong>方法调用的调用者以及参数是逃逸的</strong>。</li></ul></li><li><p>通常<strong>逃逸分析</strong>放在<strong>方法内联之后</strong>。</p></li></ul><h1 id="基于逃逸分析的优化"><a href="#基于逃逸分析的优化" class="headerlink" title="基于逃逸分析的优化"></a>基于逃逸分析的优化</h1><h2 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h2><ul><li><p>如果能证明<strong>锁对象不逃逸</strong>，对该锁对象的<strong>加锁、解锁</strong>操作<strong>没有意义</strong>。</p><ul><li>因为其他线程不能获得该所对象，即时编译器可以消除加锁、解锁操作。</li><li>传统编译器仅需证明锁对象不逃逸出线程，便可以进行锁消除。</li><li>由于即时编译的限制，条件被强化为证明锁<strong>对象不逃逸</strong>出当前编译的<strong>方法</strong>。</li></ul></li><li><p>基于逃逸分析的锁消除实际上不多见。</p></li></ul><h2 id="栈上分配（HotSpot-虚拟机未采用）"><a href="#栈上分配（HotSpot-虚拟机未采用）" class="headerlink" title="栈上分配（HotSpot 虚拟机未采用）"></a>栈上分配（HotSpot 虚拟机未采用）</h2><ul><li>如果逃逸分析能证明某些<strong>新建的对象不逃逸</strong>，可以将其<strong>分配至栈上</strong>。</li><li>new 语句所在的方法退出时，<strong>弹出</strong>当前方法的<strong>栈桢自动回收内存空间</strong>。</li><li>无须借助垃圾回收器处理。</li><li>实现需要<strong>更改大量</strong>假设“对象只能堆分配”的<strong>代码</strong>。</li></ul><h2 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h2><blockquote><p>标量：就是仅能存储一个值的变量，如局部变量。<br>聚合量：可能同时存储多个值，如 Java 对象。</p></blockquote><ul><li>可以看成将原本<strong>对对象的字段的访问，替换为一个个局部变量的访问</strong>。</li><li>对象没有被实际分配，和栈上分配一样。</li><li>可以减轻垃圾回收的压力。</li><li>与栈上分配相比，<strong>对字段的内存连续性不做要求</strong>。</li><li>字段甚至可以<strong>直接在寄存器中维护</strong>，无须浪费任何内存空间。</li></ul><h1 id="部分逃逸分析（partial-escape-analysis）"><a href="#部分逃逸分析（partial-escape-analysis）" class="headerlink" title="部分逃逸分析（partial escape analysis）"></a>部分逃逸分析（partial escape analysis）</h1><ul><li>C2 的逃逸分析与控制流无关。</li><li>Graal 引入一个<strong>与控制流有关</strong>的逃逸分析，即部分逃逸分析。</li><li>部分逃逸分析能够<strong>优化更多的情况，编译时间更长</strong>。</li><li><strong>解决</strong>所新建的实例仅在<strong>部分程序路径中逃逸</strong>的情况。</li><li>根据控制流信息，判断出新建对象仅在部分分支中逃逸，<strong>将对象的新建操作推延至对象逃逸的分支中</strong>。</li><li>使得原本因对象逃逸而无法避免的新建对象操作，不再出现在只执行 if-else 分支的程序路径之中。（不懂）</li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://time.geekbang.org/column/article/18048" target="_blank" rel="noopener">https://time.geekbang.org/column/article/18048</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;逃逸分析&quot;&gt;&lt;a href=&quot;#逃逸分析&quot; class=&quot;headerlink&quot; title=&quot;逃逸分析&quot;&gt;&lt;/a&gt;逃逸分析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一种确定&lt;strong&gt;指针动态范围&lt;/strong&gt;的&lt;strong&gt;静态分析&lt;/strong&gt;
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://blog.ennis.info/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://blog.ennis.info/tags/JVM/"/>
    
  </entry>
  
</feed>
